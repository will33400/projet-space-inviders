
test_rs232_comm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000857  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ec  00000000  00000000  00000aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00001193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000438  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000df  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

void inline uart_init(void) {
	//baud_rate 9600
	//ubrr_set = F_CPU/16/baud_rate-1
	
	UCSR0A = UCSR0A_INIT;
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	Bit 3 DOR0: Data OverRun
	Bit 2 UPE0: USART Parity Error
	Bit 1 U2X0: Double the USART Transmission Speed
	Bit 0 MPCM0: Multi-processor Communication Mode
	*/
	UCSR0B = UCSR0B_INIT;
  96:	88 ed       	ldi	r24, 0xD8	; 216
  98:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	Bit 3 TXEN0: Transmitter Enable 0
	Bit 2 UCSZ02: Character Size 0
	Bit 1 RXB80: Receive Data Bit 8 0
	Bit 0 TXB80: Transmit Data Bit 8 0
	*/
	UCSR0C = UCSR0C_INIT;
  9c:	8e e0       	ldi	r24, 0x0E	; 14
  9e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	Bit 2 UCSZ01 / UDORD0: USART Character Size / Data Order
	Bit 1 UCSZ00 / UCPHA0: USART Character Size / Clock Phase
	Bit 0 UCPOL0: Clock Polarity 0
	*/
	//UBRR0L = 0b00000001;
	UBRR0L = BAUD_9600_8MHZ;
  a2:	83 e3       	ldi	r24, 0x33	; 51
  a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//UBRR0L = 3;
	/*
	Bits 7:0 UBRR0[7:0]: USART Baud Rate 0
	*/
	//UBRR0H = 0b00000000;
	UBRR0H = 0;
  a8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>


int main(void) {
	
	uart_init();
	sei();
  ac:	78 94       	sei
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x1e>

000000b0 <__vector_20>:
	}
	
	return 0;
}

ISR(USART_TX_vect, ISR_BLOCK) {
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
	return value;
}

//interrupts routines
void inline transmission_complete() {
	UCSR0A &= ~(1<<TXCIE0);
  c0:	e0 ec       	ldi	r30, 0xC0	; 192
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 7b       	andi	r24, 0xBF	; 191
  c8:	80 83       	st	Z, r24
	while (UCSR0B&(1<<TXCIE0));
  ca:	e1 ec       	ldi	r30, 0xC1	; 193
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	86 fd       	sbrc	r24, 6
  d2:	fd cf       	rjmp	.-6      	; 0xce <__vector_20+0x1e>
	UCSR0A |= (1<<TXCIE0);
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
	while (!(UCSR0B&(1<<TXCIE0)));
  de:	e1 ec       	ldi	r30, 0xC1	; 193
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	86 ff       	sbrs	r24, 6
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <__vector_20+0x32>
	transmission_complete();
}
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_18>:

ISR(USART_RX_vect, ISR_BLOCK) {
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
}

void inline keyboard_mode() {
	UCSR0B &= ~(1<<RXCIE0);
 10a:	e1 ec       	ldi	r30, 0xC1	; 193
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8f 77       	andi	r24, 0x7F	; 127
 112:	80 83       	st	Z, r24
	while (UCSR0B&(1<<RXCIE0));
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	ec f3       	brlt	.-6      	; 0x114 <__vector_18+0x1c>
	char r = UDR0;
 11a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	Bits 7:0 TXB / RXB[7:0]: USART Transmit / Receive Data Buffer
	*/
}

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 11e:	e1 ec       	ldi	r30, 0xC1	; 193
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	88 e5       	ldi	r24, 0x58	; 88
 124:	80 83       	st	Z, r24
	while (UCSR0B&(1>>TXCIE0)) {}
 126:	80 81       	ld	r24, Z
	while (!(UCSR0A & (1<<UDRE0))) {}
 128:	e0 ec       	ldi	r30, 0xC0	; 192
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	85 ff       	sbrs	r24, 5
 130:	fd cf       	rjmp	.-6      	; 0x12c <__vector_18+0x34>
	UDR0 = data_buffer;
 132:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
void inline keyboard_mode() {
	UCSR0B &= ~(1<<RXCIE0);
	while (UCSR0B&(1<<RXCIE0));
	char r = UDR0;
	uart_send(r);
	UCSR0B |= (1<<RXCIE0);
 136:	e1 ec       	ldi	r30, 0xC1	; 193
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	80 83       	st	Z, r24
	while (!(UCSR0B&(1<<RXCIE0)));
 140:	80 81       	ld	r24, Z
 142:	88 23       	and	r24, r24
 144:	ec f7       	brge	.-6      	; 0x140 <__vector_18+0x48>
	keyboard_mode();
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
