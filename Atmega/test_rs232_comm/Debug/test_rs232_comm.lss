
test_rs232_comm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000542  000005d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000542  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000123  00800102  00800102  000005d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011c4  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ec  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e9  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058d  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000545  00000000  00000000  00003219  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000375e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 00 	call	0x102	; 0x102 <main>
  9e:	0c 94 9f 02 	jmp	0x53e	; 0x53e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_20>:
#include "space_invaders.h"
#include "vt100.h"

int pin_scroll;

ISR(USART_TX_vect, ISR_BLOCK) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	return value;
}

//interrupts routines
void inline transmission_complete() {
	UCSR0A |= (1<<TXC0);
  b6:	e0 ec       	ldi	r30, 0xC0	; 192
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	while (UCSR0B&(1<<TXC0));
  c0:	e1 ec       	ldi	r30, 0xC1	; 193
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	86 fd       	sbrc	r24, 6
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <__vector_20+0x1e>
	transmission_complete();
	//uart_init();
}
  ca:	ff 91       	pop	r31
  cc:	ef 91       	pop	r30
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <__vector_18>:

ISR(USART_RX_vect, ISR_BLOCK) {
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	//vt100_clear_screen();
	pin_scroll = 1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <pin_scroll+0x1>
  f0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pin_scroll>
	//uart_init();
}
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:
	
	//Bits 7:0 UBRR0[7:0]: USART Baud Rate 0
	
	uint32_t ubrr_rate = F_CPU / (16 * baud) - 1;
	
	UBRR0 = ubrr_rate;
 102:	83 e3       	ldi	r24, 0x33	; 51
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 10a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	//while(!(UBRR0H&(8>>ubrr_rate))&&!(UBRR0L&(ubrr_rate)));
	
	//Bits 3:0 UBRR0[3:0]: USART Baud Rate 0 n [n = 11:8]
	
	UCSR0A = UCSR0A_INIT;
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	Bit 3 DOR0: Data OverRun
	Bit 2 UPE0: USART Parity Error
	Bit 1 U2X0: Double the USART Transmission Speed
	Bit 0 MPCM0: Multi-processor Communication Mode
	*/
	UCSR0B = UCSR0B_INIT;
 114:	88 ed       	ldi	r24, 0xD8	; 216
 116:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	Bit 3 TXEN0: Transmitter Enable 0
	Bit 2 UCSZ02: Character Size 0
	Bit 1 RXB80: Receive Data Bit 8 0
	Bit 0 TXB80: Transmit Data Bit 8 0
	*/
	UCSR0C = UCSR0C_INIT;
 11a:	8e e0       	ldi	r24, 0x0E	; 14
 11c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
}
*/
int main(void) {
	
	uart_init(9600);
	sei();
 120:	78 94       	sei
	//uart_send('A');
	init_screen();
 122:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <init_screen>

void inline keyboard_mode() {
	//UCSR0B &= ~(1<<RXCIE0);
	//while (UCSR0B&(1<<RXCIE0));
	
	r = UDR0;
 126:	c6 ec       	ldi	r28, 0xC6	; 198
 128:	d0 e0       	ldi	r29, 0x00	; 0
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 12a:	e1 ec       	ldi	r30, 0xC1	; 193
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	28 ed       	ldi	r18, 0xD8	; 216
	while (!(UCSR0B&(1<<TXCIE0)));
	while (!(UCSR0A&(1<<UDRE0)));
 130:	a0 ec       	ldi	r26, 0xC0	; 192
 132:	b0 e0       	ldi	r27, 0x00	; 0
	//init_spaceship();
	while(1) {
		if(pin_scroll == 1) {
 134:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pin_scroll>
 138:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <pin_scroll+0x1>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	91 05       	cpc	r25, r1
 140:	e9 f7       	brne	.-6      	; 0x13c <main+0x3a>

void inline keyboard_mode() {
	//UCSR0B &= ~(1<<RXCIE0);
	//while (UCSR0B&(1<<RXCIE0));
	
	r = UDR0;
 142:	98 81       	ld	r25, Y
 144:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <r>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 148:	20 83       	st	Z, r18
	while (!(UCSR0B&(1<<TXCIE0)));
 14a:	80 81       	ld	r24, Z
 14c:	86 ff       	sbrs	r24, 6
 14e:	fd cf       	rjmp	.-6      	; 0x14a <main+0x48>
	while (!(UCSR0A&(1<<UDRE0)));
 150:	8c 91       	ld	r24, X
 152:	85 ff       	sbrs	r24, 5
 154:	fd cf       	rjmp	.-6      	; 0x150 <main+0x4e>
	UDR0 = data_buffer;
 156:	98 83       	st	Y, r25
			keyboard_mode();
			pin_scroll = 0;
 158:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <pin_scroll+0x1>
 15c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pin_scroll>
 160:	e9 cf       	rjmp	.-46     	; 0x134 <main+0x32>

00000162 <init_pins>:
{ 32 }, { 32 }, { 32 }, { 32 }, { 32 }, { 32 }, { 32 }, { 32 }, { 32 },
{ 32 } };

void init_pins() {
	
	PORTC |= (1<<PORTC4) | (1<<PORTC5);
 162:	88 b1       	in	r24, 0x08	; 8
 164:	80 63       	ori	r24, 0x30	; 48
 166:	88 b9       	out	0x08, r24	; 8
	PCIFR |= 1;
 168:	d8 9a       	sbi	0x1b, 0	; 27
	PCMSK1 |= (1<<PINC4) | (1<<PINC5);
 16a:	ec e6       	ldi	r30, 0x6C	; 108
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 63       	ori	r24, 0x30	; 48
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <init_spaceship>:
	_spaceship.coordinates_y = 24;
	
	init_spaceship();
}

void init_spaceship() {
 176:	af 92       	push	r10
 178:	bf 92       	push	r11
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	0f 2e       	mov	r0, r31
 18c:	f3 e0       	ldi	r31, 0x03	; 3
 18e:	ef 2e       	mov	r14, r31
 190:	f1 e0       	ldi	r31, 0x01	; 1
 192:	ff 2e       	mov	r15, r31
 194:	f0 2d       	mov	r31, r0
 196:	b1 2c       	mov	r11, r1
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 198:	c1 ec       	ldi	r28, 0xC1	; 193
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	0f 2e       	mov	r0, r31
 19e:	f8 ed       	ldi	r31, 0xD8	; 216
 1a0:	af 2e       	mov	r10, r31
 1a2:	f0 2d       	mov	r31, r0
	while (!(UCSR0B&(1<<TXCIE0)));
	while (!(UCSR0A&(1<<UDRE0)));
 1a4:	00 ec       	ldi	r16, 0xC0	; 192
 1a6:	10 e0       	ldi	r17, 0x00	; 0
	UDR0 = data_buffer;
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f6 ec       	ldi	r31, 0xC6	; 198
 1ac:	cf 2e       	mov	r12, r31
 1ae:	d1 2c       	mov	r13, r1
 1b0:	f0 2d       	mov	r31, r0
	for (int i = 0; i < 3; i++) {
		vt100_move(x + i, y);
 1b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
 1b6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1ba:	8b 0d       	add	r24, r11
 1bc:	0e 94 11 01 	call	0x222	; 0x222 <vt100_move>
		uart_send(_spaceship.spaceship_appearance[i]);
 1c0:	f7 01       	movw	r30, r14
 1c2:	91 91       	ld	r25, Z+
 1c4:	7f 01       	movw	r14, r30
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 1c6:	a8 82       	st	Y, r10
	while (!(UCSR0B&(1<<TXCIE0)));
 1c8:	88 81       	ld	r24, Y
 1ca:	86 ff       	sbrs	r24, 6
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <init_spaceship+0x52>
	while (!(UCSR0A&(1<<UDRE0)));
 1ce:	f8 01       	movw	r30, r16
 1d0:	80 81       	ld	r24, Z
 1d2:	85 ff       	sbrs	r24, 5
 1d4:	fc cf       	rjmp	.-8      	; 0x1ce <init_spaceship+0x58>
	UDR0 = data_buffer;
 1d6:	f6 01       	movw	r30, r12
 1d8:	90 83       	st	Z, r25
 1da:	b3 94       	inc	r11
	
	init_spaceship();
}

void init_spaceship() {
	for (int i = 0; i < 3; i++) {
 1dc:	f3 e0       	ldi	r31, 0x03	; 3
 1de:	bf 12       	cpse	r11, r31
 1e0:	e8 cf       	rjmp	.-48     	; 0x1b2 <init_spaceship+0x3c>
		vt100_move(x + i, y);
		uart_send(_spaceship.spaceship_appearance[i]);
	}
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	cf 90       	pop	r12
 1f2:	bf 90       	pop	r11
 1f4:	af 90       	pop	r10
 1f6:	08 95       	ret

000001f8 <init_screen>:
}

void init_screen() {
	//uart_init(9600);

	vt100_move(0, 0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 11 01 	call	0x222	; 0x222 <vt100_move>
	vt100_clear_screen();
 200:	0e 94 fe 01 	call	0x3fc	; 0x3fc <vt100_clear_screen>
	
	init_pins();
 204:	0e 94 b1 00 	call	0x162	; 0x162 <init_pins>

	_spaceship.life = SPACESHIP_LIFE_MAX;
 208:	e2 e0       	ldi	r30, 0x02	; 2
 20a:	f1 e0       	ldi	r31, 0x01	; 1
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	80 83       	st	Z, r24
 210:	8c e7       	ldi	r24, 0x7C	; 124
 212:	84 83       	std	Z+4, r24	; 0x04
	for (int i = 0; i < 3; i++)
	//_spaceship.spaceship_appearance[i] = spaceship_appearance[i];
	_spaceship.spaceship_shoot = SPACESHIP_SHOOT;
	_spaceship.coordinates_x = 40;
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	85 83       	std	Z+5, r24	; 0x05
	_spaceship.coordinates_y = 24;
 218:	88 e1       	ldi	r24, 0x18	; 24
 21a:	86 83       	std	Z+6, r24	; 0x06
	
	init_spaceship();
 21c:	0e 94 bb 00 	call	0x176	; 0x176 <init_spaceship>
 220:	08 95       	ret

00000222 <vt100_move>:
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 222:	98 ed       	ldi	r25, 0xD8	; 216
 224:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 228:	e1 ec       	ldi	r30, 0xC1	; 193
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	90 81       	ld	r25, Z
 22e:	96 ff       	sbrs	r25, 6
 230:	fd cf       	rjmp	.-6      	; 0x22c <vt100_move+0xa>
	while (!(UCSR0A&(1<<UDRE0)));
 232:	e0 ec       	ldi	r30, 0xC0	; 192
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	90 81       	ld	r25, Z
 238:	95 ff       	sbrs	r25, 5
 23a:	fd cf       	rjmp	.-6      	; 0x236 <vt100_move+0x14>
	UDR0 = data_buffer;
 23c:	9b e1       	ldi	r25, 0x1B	; 27
 23e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 242:	98 ed       	ldi	r25, 0xD8	; 216
 244:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 248:	e1 ec       	ldi	r30, 0xC1	; 193
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	90 81       	ld	r25, Z
 24e:	96 ff       	sbrs	r25, 6
 250:	fd cf       	rjmp	.-6      	; 0x24c <vt100_move+0x2a>
	while (!(UCSR0A&(1<<UDRE0)));
 252:	e0 ec       	ldi	r30, 0xC0	; 192
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	90 81       	ld	r25, Z
 258:	95 ff       	sbrs	r25, 5
 25a:	fd cf       	rjmp	.-6      	; 0x256 <vt100_move+0x34>
	UDR0 = data_buffer;
 25c:	9b e5       	ldi	r25, 0x5B	; 91
 25e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

void vt100_move(uint8_t x, uint8_t y)
{
	uart_send(VT100_ESC);
	uart_send('[');
	uart_send('0' + (y / 100));
 262:	29 e2       	ldi	r18, 0x29	; 41
 264:	62 9f       	mul	r22, r18
 266:	21 2d       	mov	r18, r1
 268:	11 24       	eor	r1, r1
 26a:	22 95       	swap	r18
 26c:	2f 70       	andi	r18, 0x0F	; 15
 26e:	20 5d       	subi	r18, 0xD0	; 208
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 270:	98 ed       	ldi	r25, 0xD8	; 216
 272:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 276:	e1 ec       	ldi	r30, 0xC1	; 193
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	90 81       	ld	r25, Z
 27c:	96 ff       	sbrs	r25, 6
 27e:	fd cf       	rjmp	.-6      	; 0x27a <vt100_move+0x58>
	while (!(UCSR0A&(1<<UDRE0)));
 280:	e0 ec       	ldi	r30, 0xC0	; 192
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	90 81       	ld	r25, Z
 286:	95 ff       	sbrs	r25, 5
 288:	fd cf       	rjmp	.-6      	; 0x284 <vt100_move+0x62>
	UDR0 = data_buffer;
 28a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	uart_send('0' + ((y / 10) % 10));
 28e:	9d ec       	ldi	r25, 0xCD	; 205
 290:	69 9f       	mul	r22, r25
 292:	21 2d       	mov	r18, r1
 294:	11 24       	eor	r1, r1
 296:	26 95       	lsr	r18
 298:	26 95       	lsr	r18
 29a:	26 95       	lsr	r18
 29c:	29 9f       	mul	r18, r25
 29e:	91 2d       	mov	r25, r1
 2a0:	11 24       	eor	r1, r1
 2a2:	96 95       	lsr	r25
 2a4:	96 95       	lsr	r25
 2a6:	96 95       	lsr	r25
 2a8:	99 0f       	add	r25, r25
 2aa:	39 2f       	mov	r19, r25
 2ac:	33 0f       	add	r19, r19
 2ae:	33 0f       	add	r19, r19
 2b0:	93 0f       	add	r25, r19
 2b2:	29 1b       	sub	r18, r25
 2b4:	20 5d       	subi	r18, 0xD0	; 208
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 2b6:	98 ed       	ldi	r25, 0xD8	; 216
 2b8:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 2bc:	e1 ec       	ldi	r30, 0xC1	; 193
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	90 81       	ld	r25, Z
 2c2:	96 ff       	sbrs	r25, 6
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <vt100_move+0x9e>
	while (!(UCSR0A&(1<<UDRE0)));
 2c6:	e0 ec       	ldi	r30, 0xC0	; 192
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	90 81       	ld	r25, Z
 2cc:	95 ff       	sbrs	r25, 5
 2ce:	fd cf       	rjmp	.-6      	; 0x2ca <vt100_move+0xa8>
	UDR0 = data_buffer;
 2d0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	uart_send('0' + (y % 10));
 2d4:	9d ec       	ldi	r25, 0xCD	; 205
 2d6:	69 9f       	mul	r22, r25
 2d8:	91 2d       	mov	r25, r1
 2da:	11 24       	eor	r1, r1
 2dc:	96 95       	lsr	r25
 2de:	96 95       	lsr	r25
 2e0:	96 95       	lsr	r25
 2e2:	99 0f       	add	r25, r25
 2e4:	29 2f       	mov	r18, r25
 2e6:	22 0f       	add	r18, r18
 2e8:	22 0f       	add	r18, r18
 2ea:	92 0f       	add	r25, r18
 2ec:	69 1b       	sub	r22, r25
 2ee:	60 5d       	subi	r22, 0xD0	; 208
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 2f0:	98 ed       	ldi	r25, 0xD8	; 216
 2f2:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 2f6:	e1 ec       	ldi	r30, 0xC1	; 193
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	90 81       	ld	r25, Z
 2fc:	96 ff       	sbrs	r25, 6
 2fe:	fd cf       	rjmp	.-6      	; 0x2fa <vt100_move+0xd8>
	while (!(UCSR0A&(1<<UDRE0)));
 300:	e0 ec       	ldi	r30, 0xC0	; 192
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	90 81       	ld	r25, Z
 306:	95 ff       	sbrs	r25, 5
 308:	fd cf       	rjmp	.-6      	; 0x304 <vt100_move+0xe2>
	UDR0 = data_buffer;
 30a:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 30e:	98 ed       	ldi	r25, 0xD8	; 216
 310:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 314:	e1 ec       	ldi	r30, 0xC1	; 193
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	90 81       	ld	r25, Z
 31a:	96 ff       	sbrs	r25, 6
 31c:	fd cf       	rjmp	.-6      	; 0x318 <vt100_move+0xf6>
	while (!(UCSR0A&(1<<UDRE0)));
 31e:	e0 ec       	ldi	r30, 0xC0	; 192
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	90 81       	ld	r25, Z
 324:	95 ff       	sbrs	r25, 5
 326:	fd cf       	rjmp	.-6      	; 0x322 <vt100_move+0x100>
	UDR0 = data_buffer;
 328:	9b e3       	ldi	r25, 0x3B	; 59
 32a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	uart_send(';');
	uart_send('0' + (x / 100));
 32e:	29 e2       	ldi	r18, 0x29	; 41
 330:	82 9f       	mul	r24, r18
 332:	21 2d       	mov	r18, r1
 334:	11 24       	eor	r1, r1
 336:	22 95       	swap	r18
 338:	2f 70       	andi	r18, 0x0F	; 15
 33a:	20 5d       	subi	r18, 0xD0	; 208
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 33c:	98 ed       	ldi	r25, 0xD8	; 216
 33e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 342:	e1 ec       	ldi	r30, 0xC1	; 193
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	90 81       	ld	r25, Z
 348:	96 ff       	sbrs	r25, 6
 34a:	fd cf       	rjmp	.-6      	; 0x346 <vt100_move+0x124>
	while (!(UCSR0A&(1<<UDRE0)));
 34c:	e0 ec       	ldi	r30, 0xC0	; 192
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	90 81       	ld	r25, Z
 352:	95 ff       	sbrs	r25, 5
 354:	fd cf       	rjmp	.-6      	; 0x350 <vt100_move+0x12e>
	UDR0 = data_buffer;
 356:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	uart_send('0' + ((x / 10) % 10));
 35a:	9d ec       	ldi	r25, 0xCD	; 205
 35c:	89 9f       	mul	r24, r25
 35e:	21 2d       	mov	r18, r1
 360:	11 24       	eor	r1, r1
 362:	26 95       	lsr	r18
 364:	26 95       	lsr	r18
 366:	26 95       	lsr	r18
 368:	29 9f       	mul	r18, r25
 36a:	91 2d       	mov	r25, r1
 36c:	11 24       	eor	r1, r1
 36e:	96 95       	lsr	r25
 370:	96 95       	lsr	r25
 372:	96 95       	lsr	r25
 374:	99 0f       	add	r25, r25
 376:	39 2f       	mov	r19, r25
 378:	33 0f       	add	r19, r19
 37a:	33 0f       	add	r19, r19
 37c:	93 0f       	add	r25, r19
 37e:	29 1b       	sub	r18, r25
 380:	20 5d       	subi	r18, 0xD0	; 208
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 382:	98 ed       	ldi	r25, 0xD8	; 216
 384:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 388:	e1 ec       	ldi	r30, 0xC1	; 193
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	90 81       	ld	r25, Z
 38e:	96 ff       	sbrs	r25, 6
 390:	fd cf       	rjmp	.-6      	; 0x38c <vt100_move+0x16a>
	while (!(UCSR0A&(1<<UDRE0)));
 392:	e0 ec       	ldi	r30, 0xC0	; 192
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	90 81       	ld	r25, Z
 398:	95 ff       	sbrs	r25, 5
 39a:	fd cf       	rjmp	.-6      	; 0x396 <vt100_move+0x174>
	UDR0 = data_buffer;
 39c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	uart_send('0' + (x % 10));
 3a0:	9d ec       	ldi	r25, 0xCD	; 205
 3a2:	89 9f       	mul	r24, r25
 3a4:	91 2d       	mov	r25, r1
 3a6:	11 24       	eor	r1, r1
 3a8:	96 95       	lsr	r25
 3aa:	96 95       	lsr	r25
 3ac:	96 95       	lsr	r25
 3ae:	99 0f       	add	r25, r25
 3b0:	29 2f       	mov	r18, r25
 3b2:	22 0f       	add	r18, r18
 3b4:	22 0f       	add	r18, r18
 3b6:	92 0f       	add	r25, r18
 3b8:	89 1b       	sub	r24, r25
 3ba:	80 5d       	subi	r24, 0xD0	; 208
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 3bc:	98 ed       	ldi	r25, 0xD8	; 216
 3be:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 3c2:	e1 ec       	ldi	r30, 0xC1	; 193
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	90 81       	ld	r25, Z
 3c8:	96 ff       	sbrs	r25, 6
 3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <vt100_move+0x1a4>
	while (!(UCSR0A&(1<<UDRE0)));
 3cc:	e0 ec       	ldi	r30, 0xC0	; 192
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	90 81       	ld	r25, Z
 3d2:	95 ff       	sbrs	r25, 5
 3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <vt100_move+0x1ae>
	UDR0 = data_buffer;
 3d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 3da:	88 ed       	ldi	r24, 0xD8	; 216
 3dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 3e0:	e1 ec       	ldi	r30, 0xC1	; 193
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	86 ff       	sbrs	r24, 6
 3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <vt100_move+0x1c2>
	while (!(UCSR0A&(1<<UDRE0)));
 3ea:	e0 ec       	ldi	r30, 0xC0	; 192
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	85 ff       	sbrs	r24, 5
 3f2:	fd cf       	rjmp	.-6      	; 0x3ee <vt100_move+0x1cc>
	UDR0 = data_buffer;
 3f4:	88 e4       	ldi	r24, 0x48	; 72
 3f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3fa:	08 95       	ret

000003fc <vt100_clear_screen>:
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 3fc:	88 ed       	ldi	r24, 0xD8	; 216
 3fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 402:	e1 ec       	ldi	r30, 0xC1	; 193
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	86 ff       	sbrs	r24, 6
 40a:	fd cf       	rjmp	.-6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	while (!(UCSR0A&(1<<UDRE0)));
 40c:	e0 ec       	ldi	r30, 0xC0	; 192
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	85 ff       	sbrs	r24, 5
 414:	fd cf       	rjmp	.-6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	UDR0 = data_buffer;
 416:	8b e1       	ldi	r24, 0x1B	; 27
 418:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 41c:	88 ed       	ldi	r24, 0xD8	; 216
 41e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 422:	e1 ec       	ldi	r30, 0xC1	; 193
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	86 ff       	sbrs	r24, 6
 42a:	fd cf       	rjmp	.-6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	while (!(UCSR0A&(1<<UDRE0)));
 42c:	e0 ec       	ldi	r30, 0xC0	; 192
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	85 ff       	sbrs	r24, 5
 434:	fd cf       	rjmp	.-6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	UDR0 = data_buffer;
 436:	8b e5       	ldi	r24, 0x5B	; 91
 438:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 43c:	88 ed       	ldi	r24, 0xD8	; 216
 43e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 442:	e1 ec       	ldi	r30, 0xC1	; 193
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	86 ff       	sbrs	r24, 6
 44a:	fd cf       	rjmp	.-6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	while (!(UCSR0A&(1<<UDRE0)));
 44c:	e0 ec       	ldi	r30, 0xC0	; 192
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	85 ff       	sbrs	r24, 5
 454:	fd cf       	rjmp	.-6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	UDR0 = data_buffer;
 456:	82 e3       	ldi	r24, 0x32	; 50
 458:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 45c:	88 ed       	ldi	r24, 0xD8	; 216
 45e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 462:	e1 ec       	ldi	r30, 0xC1	; 193
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	86 ff       	sbrs	r24, 6
 46a:	fd cf       	rjmp	.-6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	while (!(UCSR0A&(1<<UDRE0)));
 46c:	e0 ec       	ldi	r30, 0xC0	; 192
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	85 ff       	sbrs	r24, 5
 474:	fd cf       	rjmp	.-6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	UDR0 = data_buffer;
 476:	8a e4       	ldi	r24, 0x4A	; 74
 478:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 47c:	88 ed       	ldi	r24, 0xD8	; 216
 47e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 482:	e1 ec       	ldi	r30, 0xC1	; 193
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	86 ff       	sbrs	r24, 6
 48a:	fd cf       	rjmp	.-6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	while (!(UCSR0A&(1<<UDRE0)));
 48c:	e0 ec       	ldi	r30, 0xC0	; 192
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	85 ff       	sbrs	r24, 5
 494:	fd cf       	rjmp	.-6      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	UDR0 = data_buffer;
 496:	8b e1       	ldi	r24, 0x1B	; 27
 498:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 49c:	88 ed       	ldi	r24, 0xD8	; 216
 49e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 4a2:	e1 ec       	ldi	r30, 0xC1	; 193
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	86 ff       	sbrs	r24, 6
 4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
	while (!(UCSR0A&(1<<UDRE0)));
 4ac:	e0 ec       	ldi	r30, 0xC0	; 192
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	85 ff       	sbrs	r24, 5
 4b4:	fd cf       	rjmp	.-6      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	UDR0 = data_buffer;
 4b6:	8b e5       	ldi	r24, 0x5B	; 91
 4b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 4bc:	88 ed       	ldi	r24, 0xD8	; 216
 4be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 4c2:	e1 ec       	ldi	r30, 0xC1	; 193
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	86 ff       	sbrs	r24, 6
 4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	while (!(UCSR0A&(1<<UDRE0)));
 4cc:	e0 ec       	ldi	r30, 0xC0	; 192
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	85 ff       	sbrs	r24, 5
 4d4:	fd cf       	rjmp	.-6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
	UDR0 = data_buffer;
 4d6:	8f e3       	ldi	r24, 0x3F	; 63
 4d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 4dc:	88 ed       	ldi	r24, 0xD8	; 216
 4de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 4e2:	e1 ec       	ldi	r30, 0xC1	; 193
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	86 ff       	sbrs	r24, 6
 4ea:	fd cf       	rjmp	.-6      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
	while (!(UCSR0A&(1<<UDRE0)));
 4ec:	e0 ec       	ldi	r30, 0xC0	; 192
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	85 ff       	sbrs	r24, 5
 4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
	UDR0 = data_buffer;
 4f6:	82 e3       	ldi	r24, 0x32	; 50
 4f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 4fc:	88 ed       	ldi	r24, 0xD8	; 216
 4fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 502:	e1 ec       	ldi	r30, 0xC1	; 193
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	86 ff       	sbrs	r24, 6
 50a:	fd cf       	rjmp	.-6      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
	while (!(UCSR0A&(1<<UDRE0)));
 50c:	e0 ec       	ldi	r30, 0xC0	; 192
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	85 ff       	sbrs	r24, 5
 514:	fd cf       	rjmp	.-6      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
	UDR0 = data_buffer;
 516:	85 e3       	ldi	r24, 0x35	; 53
 518:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

char r;

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 51c:	88 ed       	ldi	r24, 0xD8	; 216
 51e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (!(UCSR0B&(1<<TXCIE0)));
 522:	e1 ec       	ldi	r30, 0xC1	; 193
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	86 ff       	sbrs	r24, 6
 52a:	fd cf       	rjmp	.-6      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
	while (!(UCSR0A&(1<<UDRE0)));
 52c:	e0 ec       	ldi	r30, 0xC0	; 192
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	85 ff       	sbrs	r24, 5
 534:	fd cf       	rjmp	.-6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
	UDR0 = data_buffer;
 536:	8c e6       	ldi	r24, 0x6C	; 108
 538:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 53c:	08 95       	ret

0000053e <_exit>:
 53e:	f8 94       	cli

00000540 <__stop_program>:
 540:	ff cf       	rjmp	.-2      	; 0x540 <__stop_program>
