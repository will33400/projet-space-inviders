
USART_UNIT_TESTS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000064e  00800200  00001968  000019fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080084e  0080084e  0000204a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000204a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040fc  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000203b  00000000  00000000  0000634c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002858  00000000  00000000  00008387  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000788  00000000  00000000  0000abe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001aeed  00000000  00000000  0000b368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021e5  00000000  00000000  00026255  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0002843a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000074da  00000000  00000000  000285b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
       2:	00 00       	nop
       4:	ab c0       	rjmp	.+342    	; 0x15c <__bad_interrupt>
       6:	00 00       	nop
       8:	a9 c0       	rjmp	.+338    	; 0x15c <__bad_interrupt>
       a:	00 00       	nop
       c:	a7 c0       	rjmp	.+334    	; 0x15c <__bad_interrupt>
       e:	00 00       	nop
      10:	a5 c0       	rjmp	.+330    	; 0x15c <__bad_interrupt>
      12:	00 00       	nop
      14:	a3 c0       	rjmp	.+326    	; 0x15c <__bad_interrupt>
      16:	00 00       	nop
      18:	a1 c0       	rjmp	.+322    	; 0x15c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
      1e:	00 00       	nop
      20:	9d c0       	rjmp	.+314    	; 0x15c <__bad_interrupt>
      22:	00 00       	nop
      24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>
      26:	00 00       	nop
      28:	99 c0       	rjmp	.+306    	; 0x15c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	97 c0       	rjmp	.+302    	; 0x15c <__bad_interrupt>
      2e:	00 00       	nop
      30:	95 c0       	rjmp	.+298    	; 0x15c <__bad_interrupt>
      32:	00 00       	nop
      34:	93 c0       	rjmp	.+294    	; 0x15c <__bad_interrupt>
      36:	00 00       	nop
      38:	91 c0       	rjmp	.+290    	; 0x15c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8f c0       	rjmp	.+286    	; 0x15c <__bad_interrupt>
      3e:	00 00       	nop
      40:	8d c0       	rjmp	.+282    	; 0x15c <__bad_interrupt>
      42:	00 00       	nop
      44:	8b c0       	rjmp	.+278    	; 0x15c <__bad_interrupt>
      46:	00 00       	nop
      48:	89 c0       	rjmp	.+274    	; 0x15c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	87 c0       	rjmp	.+270    	; 0x15c <__bad_interrupt>
      4e:	00 00       	nop
      50:	85 c0       	rjmp	.+266    	; 0x15c <__bad_interrupt>
      52:	00 00       	nop
      54:	83 c0       	rjmp	.+262    	; 0x15c <__bad_interrupt>
      56:	00 00       	nop
      58:	81 c0       	rjmp	.+258    	; 0x15c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7f c0       	rjmp	.+254    	; 0x15c <__bad_interrupt>
      5e:	00 00       	nop
      60:	7d c0       	rjmp	.+250    	; 0x15c <__bad_interrupt>
      62:	00 00       	nop
      64:	7b c0       	rjmp	.+246    	; 0x15c <__bad_interrupt>
      66:	00 00       	nop
      68:	79 c0       	rjmp	.+242    	; 0x15c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	77 c0       	rjmp	.+238    	; 0x15c <__bad_interrupt>
      6e:	00 00       	nop
      70:	75 c0       	rjmp	.+234    	; 0x15c <__bad_interrupt>
      72:	00 00       	nop
      74:	73 c0       	rjmp	.+230    	; 0x15c <__bad_interrupt>
      76:	00 00       	nop
      78:	71 c0       	rjmp	.+226    	; 0x15c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6f c0       	rjmp	.+222    	; 0x15c <__bad_interrupt>
      7e:	00 00       	nop
      80:	6d c0       	rjmp	.+218    	; 0x15c <__bad_interrupt>
      82:	00 00       	nop
      84:	6b c0       	rjmp	.+214    	; 0x15c <__bad_interrupt>
      86:	00 00       	nop
      88:	69 c0       	rjmp	.+210    	; 0x15c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	67 c0       	rjmp	.+206    	; 0x15c <__bad_interrupt>
      8e:	00 00       	nop
      90:	65 c0       	rjmp	.+202    	; 0x15c <__bad_interrupt>
      92:	00 00       	nop
      94:	63 c0       	rjmp	.+198    	; 0x15c <__bad_interrupt>
      96:	00 00       	nop
      98:	61 c0       	rjmp	.+194    	; 0x15c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5f c0       	rjmp	.+190    	; 0x15c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	5d c0       	rjmp	.+186    	; 0x15c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5b c0       	rjmp	.+182    	; 0x15c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	59 c0       	rjmp	.+178    	; 0x15c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	57 c0       	rjmp	.+174    	; 0x15c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	55 c0       	rjmp	.+170    	; 0x15c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	53 c0       	rjmp	.+166    	; 0x15c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	51 c0       	rjmp	.+162    	; 0x15c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	4f c0       	rjmp	.+158    	; 0x15c <__bad_interrupt>
      be:	00 00       	nop
      c0:	4d c0       	rjmp	.+154    	; 0x15c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4b c0       	rjmp	.+150    	; 0x15c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	49 c0       	rjmp	.+146    	; 0x15c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	47 c0       	rjmp	.+142    	; 0x15c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	45 c0       	rjmp	.+138    	; 0x15c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	43 c0       	rjmp	.+134    	; 0x15c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	41 c0       	rjmp	.+130    	; 0x15c <__bad_interrupt>
      da:	00 00       	nop
      dc:	3f c0       	rjmp	.+126    	; 0x15c <__bad_interrupt>
      de:	00 00       	nop
      e0:	3d c0       	rjmp	.+122    	; 0x15c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3b c0       	rjmp	.+118    	; 0x15c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	39 c0       	rjmp	.+114    	; 0x15c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	37 c0       	rjmp	.+110    	; 0x15c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	35 c0       	rjmp	.+106    	; 0x15c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	33 c0       	rjmp	.+102    	; 0x15c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	31 c0       	rjmp	.+98     	; 0x15c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	2f c0       	rjmp	.+94     	; 0x15c <__bad_interrupt>
      fe:	00 00       	nop
     100:	2d c0       	rjmp	.+90     	; 0x15c <__bad_interrupt>
     102:	00 00       	nop
     104:	2b c0       	rjmp	.+86     	; 0x15c <__bad_interrupt>
     106:	00 00       	nop
     108:	29 c0       	rjmp	.+82     	; 0x15c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	27 c0       	rjmp	.+78     	; 0x15c <__bad_interrupt>
     10e:	00 00       	nop
     110:	25 c0       	rjmp	.+74     	; 0x15c <__bad_interrupt>
     112:	00 00       	nop
     114:	23 c0       	rjmp	.+70     	; 0x15c <__bad_interrupt>
     116:	00 00       	nop
     118:	21 c0       	rjmp	.+66     	; 0x15c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	1f c0       	rjmp	.+62     	; 0x15c <__bad_interrupt>
	...

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d1 e4       	ldi	r29, 0x41	; 65
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	18 e0       	ldi	r17, 0x08	; 8
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b2 e0       	ldi	r27, 0x02	; 2
     132:	e8 e6       	ldi	r30, 0x68	; 104
     134:	f9 e1       	ldi	r31, 0x19	; 25
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0b bf       	out	0x3b, r16	; 59
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
     13c:	07 90       	elpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	ae 34       	cpi	r26, 0x4E	; 78
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>

00000146 <__do_clear_bss>:
     146:	28 e0       	ldi	r18, 0x08	; 8
     148:	ae e4       	ldi	r26, 0x4E	; 78
     14a:	b8 e0       	ldi	r27, 0x08	; 8
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	a7 37       	cpi	r26, 0x77	; 119
     152:	b2 07       	cpc	r27, r18
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	da d6       	rcall	.+3508   	; 0xf0c <main>
     158:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <_exit>

0000015c <__bad_interrupt>:
     15c:	51 cf       	rjmp	.-350    	; 0x0 <__vectors>

0000015e <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	1f 92       	push	r1
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     168:	8f ef       	ldi	r24, 0xFF	; 255
     16a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     16e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     172:	8f b7       	in	r24, 0x3f	; 63
     174:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     176:	f8 94       	cli
	return flags;
     178:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     17a:	5f 93       	push	r21
     17c:	50 e8       	ldi	r21, 0x80	; 128
     17e:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     188:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     18a:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     18c:	0f 90       	pop	r0
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	1f 92       	push	r1
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     19e:	9f b7       	in	r25, 0x3f	; 63
     1a0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     1a2:	f8 94       	cli
	return flags;
     1a4:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     1a6:	82 30       	cpi	r24, 0x02	; 2
     1a8:	40 f4       	brcc	.+16     	; 0x1ba <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     1aa:	e8 2f       	mov	r30, r24
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	ec 59       	subi	r30, 0x9C	; 156
     1b0:	ff 4f       	sbci	r31, 0xFF	; 255
     1b2:	60 95       	com	r22
     1b4:	80 81       	ld	r24, Z
     1b6:	68 23       	and	r22, r24
     1b8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     1ba:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     1bc:	0f 90       	pop	r0
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret

000001c4 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	1f 92       	push	r1
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     1ce:	80 91 6b 08 	lds	r24, 0x086B	; 0x80086b <stdio_base>
     1d2:	90 91 6c 08 	lds	r25, 0x086C	; 0x80086c <stdio_base+0x1>
     1d6:	e0 91 67 08 	lds	r30, 0x0867	; 0x800867 <ptr_get>
     1da:	f0 91 68 08 	lds	r31, 0x0868	; 0x800868 <ptr_get+0x1>
     1de:	be 01       	movw	r22, r28
     1e0:	6f 5f       	subi	r22, 0xFF	; 255
     1e2:	7f 4f       	sbci	r23, 0xFF	; 255
     1e4:	09 95       	icall
	return c;
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
}
     1e8:	08 2e       	mov	r0, r24
     1ea:	00 0c       	add	r0, r0
     1ec:	99 0b       	sbc	r25, r25
     1ee:	0f 90       	pop	r0
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     1f6:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     1f8:	80 91 6b 08 	lds	r24, 0x086B	; 0x80086b <stdio_base>
     1fc:	90 91 6c 08 	lds	r25, 0x086C	; 0x80086c <stdio_base+0x1>
     200:	e0 91 69 08 	lds	r30, 0x0869	; 0x800869 <ptr_put>
     204:	f0 91 6a 08 	lds	r31, 0x086A	; 0x80086a <ptr_put+0x1>
     208:	09 95       	icall
     20a:	99 23       	and	r25, r25
     20c:	1c f0       	brlt	.+6      	; 0x214 <_write+0x1e>
		return -1;
	}
	return 1;
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     214:	8f ef       	ldi	r24, 0xFF	; 255
     216:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     218:	08 95       	ret

0000021a <test_call>:
 * \return #TEST_PASS if \a func was executed successfully, or the
 * result value passed to test_fail() on failure.
 */
static int test_call(void (*func)(const struct test_case *),
		const struct test_case *test)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	00 d0       	rcall	.+0      	; 0x220 <test_call+0x6>
     220:	00 d0       	rcall	.+0      	; 0x222 <test_call+0x8>
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
	int ret = 0;

	if (!func) {
     226:	00 97       	sbiw	r24, 0x00	; 0
     228:	91 f0       	breq	.+36     	; 0x24e <test_call+0x34>
     22a:	7c 83       	std	Y+4, r23	; 0x04
     22c:	6b 83       	std	Y+3, r22	; 0x03
     22e:	9a 83       	std	Y+2, r25	; 0x02
     230:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * The first call to setjmp() always return 0. However, if the
	 * call to func() below goes wrong, we'll return here again with
	 * a nonzero value.
	 */
	ret = setjmp(test_failure_jmpbuf);
     232:	80 e5       	ldi	r24, 0x50	; 80
     234:	98 e0       	ldi	r25, 0x08	; 8
     236:	d9 d6       	rcall	.+3506   	; 0xfea <setjmp>
     238:	9c 01       	movw	r18, r24
	if (ret) {
     23a:	00 97       	sbiw	r24, 0x00	; 0
     23c:	59 f4       	brne	.+22     	; 0x254 <test_call+0x3a>
		return ret;
	}

	func(test);
     23e:	8b 81       	ldd	r24, Y+3	; 0x03
     240:	9c 81       	ldd	r25, Y+4	; 0x04
     242:	e9 81       	ldd	r30, Y+1	; 0x01
     244:	fa 81       	ldd	r31, Y+2	; 0x02
     246:	09 95       	icall

	return TEST_PASS;
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	04 c0       	rjmp	.+8      	; 0x256 <test_call+0x3c>
		const struct test_case *test)
{
	int ret = 0;

	if (!func) {
		return TEST_PASS;
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	01 c0       	rjmp	.+2      	; 0x256 <test_call+0x3c>
	 * call to func() below goes wrong, we'll return here again with
	 * a nonzero value.
	 */
	ret = setjmp(test_failure_jmpbuf);
	if (ret) {
		return ret;
     254:	93 2f       	mov	r25, r19
	}

	func(test);

	return TEST_PASS;
}
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <test_case_fail>:
 * \param ... Values to insert into failure message.
 */
void test_case_fail(const struct test_case *test, int result,
		const char *file, unsigned int line,
		const char *fmt, ...)
{
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	ed 81       	ldd	r30, Y+5	; 0x05
     26e:	fe 81       	ldd	r31, Y+6	; 0x06
     270:	89 85       	ldd	r24, Y+9	; 0x09
     272:	9a 85       	ldd	r25, Y+10	; 0x0a
     274:	2b 85       	ldd	r18, Y+11	; 0x0b
     276:	3c 85       	ldd	r19, Y+12	; 0x0c
	va_list ap;

	dbg_error("Test '%s' failed at %s:%u:\r\n\t", test->name, file, line);
     278:	3f 93       	push	r19
     27a:	2f 93       	push	r18
     27c:	9f 93       	push	r25
     27e:	8f 93       	push	r24
     280:	87 81       	ldd	r24, Z+7	; 0x07
     282:	8f 93       	push	r24
     284:	86 81       	ldd	r24, Z+6	; 0x06
     286:	8f 93       	push	r24
     288:	87 e1       	ldi	r24, 0x17	; 23
     28a:	92 e0       	ldi	r25, 0x02	; 2
     28c:	9f 93       	push	r25
     28e:	8f 93       	push	r24
     290:	73 d7       	rcall	.+3814   	; 0x1178 <printf>

	va_start(ap, fmt);
	dbg_vprintf_pgm(fmt, ap);
     292:	0d e6       	ldi	r16, 0x6D	; 109
     294:	18 e0       	ldi	r17, 0x08	; 8
     296:	ae 01       	movw	r20, r28
     298:	41 5f       	subi	r20, 0xF1	; 241
     29a:	5f 4f       	sbci	r21, 0xFF	; 255
     29c:	6d 85       	ldd	r22, Y+13	; 0x0d
     29e:	7e 85       	ldd	r23, Y+14	; 0x0e
     2a0:	f8 01       	movw	r30, r16
     2a2:	82 81       	ldd	r24, Z+2	; 0x02
     2a4:	93 81       	ldd	r25, Z+3	; 0x03
     2a6:	ab d7       	rcall	.+3926   	; 0x11fe <vfprintf>
	va_end(ap);
	dbg_putchar('\r');
     2a8:	f8 01       	movw	r30, r16
     2aa:	62 81       	ldd	r22, Z+2	; 0x02
     2ac:	73 81       	ldd	r23, Z+3	; 0x03
     2ae:	8d e0       	ldi	r24, 0x0D	; 13
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	26 d7       	rcall	.+3660   	; 0x1100 <fputc>
	dbg_putchar('\n');
     2b4:	f8 01       	movw	r30, r16
     2b6:	62 81       	ldd	r22, Z+2	; 0x02
     2b8:	73 81       	ldd	r23, Z+3	; 0x03
     2ba:	8a e0       	ldi	r24, 0x0A	; 10
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	20 d7       	rcall	.+3648   	; 0x1100 <fputc>

	/*
	 * This will cause the setjmp() call in test_call() to return
	 * TEST_FAIL.
	 */
	longjmp(test_failure_jmpbuf, result);
     2c0:	6f 81       	ldd	r22, Y+7	; 0x07
     2c2:	78 85       	ldd	r23, Y+8	; 0x08
     2c4:	80 e5       	ldi	r24, 0x50	; 80
     2c6:	98 e0       	ldi	r25, 0x08	; 8
     2c8:	b0 d6       	rcall	.+3424   	; 0x102a <longjmp>

000002ca <test_suite_run>:
 * the array.
 *
 * \return The number of tests that didn't pass.
 */
int test_suite_run(const struct test_suite *suite)
{
     2ca:	2f 92       	push	r2
     2cc:	3f 92       	push	r3
     2ce:	4f 92       	push	r4
     2d0:	5f 92       	push	r5
     2d2:	6f 92       	push	r6
     2d4:	7f 92       	push	r7
     2d6:	8f 92       	push	r8
     2d8:	9f 92       	push	r9
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	6c 01       	movw	r12, r24
	unsigned int nr_failures = 0;
	unsigned int nr_errors = 0;
	unsigned int i;
	int          ret;

	dbg_info("Running test suite '%s'...\r\n", suite->name);
     2f0:	dc 01       	movw	r26, r24
     2f2:	15 96       	adiw	r26, 0x05	; 5
     2f4:	8c 91       	ld	r24, X
     2f6:	15 97       	sbiw	r26, 0x05	; 5
     2f8:	8f 93       	push	r24
     2fa:	14 96       	adiw	r26, 0x04	; 4
     2fc:	8c 91       	ld	r24, X
     2fe:	8f 93       	push	r24
     300:	85 e3       	ldi	r24, 0x35	; 53
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	9f 93       	push	r25
     306:	8f 93       	push	r24
     308:	37 d7       	rcall	.+3694   	; 0x1178 <printf>

	for (i = 0; i < suite->nr_tests; i++) {
     30a:	f6 01       	movw	r30, r12
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	00 97       	sbiw	r24, 0x00	; 0
     31a:	09 f4       	brne	.+2      	; 0x31e <test_suite_run+0x54>
     31c:	af c0       	rjmp	.+350    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     31e:	e1 2c       	mov	r14, r1
     320:	f1 2c       	mov	r15, r1
     322:	61 2c       	mov	r6, r1
     324:	71 2c       	mov	r7, r1
     326:	a1 2c       	mov	r10, r1
     328:	b1 2c       	mov	r11, r1
// Store test pointer for access by test_get_data()
#if defined(_ASSERT_ENABLE_) && defined(TEST_SUITE_DEFINE_ASSERT_MACRO)
	test_set_case(test);
#endif

	dbg_info("Running test: %s\r\n", test->name);
     32a:	0f 2e       	mov	r0, r31
     32c:	f2 e5       	ldi	r31, 0x52	; 82
     32e:	8f 2e       	mov	r8, r31
     330:	f2 e0       	ldi	r31, 0x02	; 2
     332:	9f 2e       	mov	r9, r31
     334:	f0 2d       	mov	r31, r0
 * \param result Result value of test stage.
 */
static void test_report_failure(const struct test_case *test, const char *stage,
		int result)
{
	dbg_error("Test '%s' failed during '%s': %d\r\n", test->name, stage,
     336:	0f 2e       	mov	r0, r31
     338:	ff e7       	ldi	r31, 0x7F	; 127
     33a:	4f 2e       	mov	r4, r31
     33c:	f2 e0       	ldi	r31, 0x02	; 2
     33e:	5f 2e       	mov	r5, r31
     340:	f0 2d       	mov	r31, r0
	dbg_info("Running test suite '%s'...\r\n", suite->name);

	for (i = 0; i < suite->nr_tests; i++) {
		const struct test_case *test;

		test = suite->tests[i];
     342:	d6 01       	movw	r26, r12
     344:	12 96       	adiw	r26, 0x02	; 2
     346:	ed 91       	ld	r30, X+
     348:	fc 91       	ld	r31, X
     34a:	13 97       	sbiw	r26, 0x03	; 3
     34c:	c7 01       	movw	r24, r14
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	e8 0f       	add	r30, r24
     354:	f9 1f       	adc	r31, r25
     356:	c0 81       	ld	r28, Z
     358:	d1 81       	ldd	r29, Z+1	; 0x01
 * \internal
 * \brief Set pointer to current test.
 */
static inline void test_set_case(const struct test_case *test)
{
	test_case_ptr = (struct test_case *)test;
     35a:	d0 93 4f 08 	sts	0x084F, r29	; 0x80084f <__data_end+0x1>
     35e:	c0 93 4e 08 	sts	0x084E, r28	; 0x80084e <__data_end>
// Store test pointer for access by test_get_data()
#if defined(_ASSERT_ENABLE_) && defined(TEST_SUITE_DEFINE_ASSERT_MACRO)
	test_set_case(test);
#endif

	dbg_info("Running test: %s\r\n", test->name);
     362:	8f 81       	ldd	r24, Y+7	; 0x07
     364:	8f 93       	push	r24
     366:	8e 81       	ldd	r24, Y+6	; 0x06
     368:	8f 93       	push	r24
     36a:	9f 92       	push	r9
     36c:	8f 92       	push	r8
     36e:	04 d7       	rcall	.+3592   	; 0x1178 <printf>
	if (test->setup) {
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	88 81       	ld	r24, Y
     37a:	99 81       	ldd	r25, Y+1	; 0x01
     37c:	89 2b       	or	r24, r25
     37e:	01 f1       	breq	.+64     	; 0x3c0 <test_suite_run+0xf6>
		int ret;
		dbg("Setting up fixture\r\n");
     380:	85 e6       	ldi	r24, 0x65	; 101
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	0c d7       	rcall	.+3608   	; 0x119e <puts>
		ret = test_call(test->setup, test);
     386:	be 01       	movw	r22, r28
     388:	88 81       	ld	r24, Y
     38a:	99 81       	ldd	r25, Y+1	; 0x01
     38c:	46 df       	rcall	.-372    	; 0x21a <test_call>
     38e:	8c 01       	movw	r16, r24
		if (ret) {
     390:	00 97       	sbiw	r24, 0x00	; 0
     392:	b1 f0       	breq	.+44     	; 0x3c0 <test_suite_run+0xf6>
 * \param result Result value of test stage.
 */
static void test_report_failure(const struct test_case *test, const char *stage,
		int result)
{
	dbg_error("Test '%s' failed during '%s': %d\r\n", test->name, stage,
     394:	1f 93       	push	r17
     396:	8f 93       	push	r24
     398:	e9 e7       	ldi	r30, 0x79	; 121
     39a:	f2 e0       	ldi	r31, 0x02	; 2
     39c:	ff 93       	push	r31
     39e:	ef 93       	push	r30
     3a0:	8f 81       	ldd	r24, Y+7	; 0x07
     3a2:	8f 93       	push	r24
     3a4:	8e 81       	ldd	r24, Y+6	; 0x06
     3a6:	8f 93       	push	r24
     3a8:	5f 92       	push	r5
     3aa:	4f 92       	push	r4
     3ac:	e5 d6       	rcall	.+3530   	; 0x1178 <printf>
     3ae:	8d b7       	in	r24, 0x3d	; 61
     3b0:	9e b7       	in	r25, 0x3e	; 62
     3b2:	08 96       	adiw	r24, 0x08	; 8
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	9e bf       	out	0x3e, r25	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	8d bf       	out	0x3d, r24	; 61
			test_report_failure(test, "setup", ret);
			return ret;
		}
	}

	result = test_call(test->run, test);
     3be:	47 c0       	rjmp	.+142    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3c0:	be 01       	movw	r22, r28
     3c2:	8a 81       	ldd	r24, Y+2	; 0x02
     3c4:	9b 81       	ldd	r25, Y+3	; 0x03
     3c6:	29 df       	rcall	.-430    	; 0x21a <test_call>
     3c8:	8c 01       	movw	r16, r24
	if (result) {
     3ca:	00 97       	sbiw	r24, 0x00	; 0
     3cc:	a9 f0       	breq	.+42     	; 0x3f8 <test_suite_run+0x12e>
 * \param result Result value of test stage.
 */
static void test_report_failure(const struct test_case *test, const char *stage,
		int result)
{
	dbg_error("Test '%s' failed during '%s': %d\r\n", test->name, stage,
     3ce:	1f 93       	push	r17
     3d0:	8f 93       	push	r24
     3d2:	a2 ea       	ldi	r26, 0xA2	; 162
     3d4:	b2 e0       	ldi	r27, 0x02	; 2
     3d6:	bf 93       	push	r27
     3d8:	af 93       	push	r26
     3da:	8f 81       	ldd	r24, Y+7	; 0x07
     3dc:	8f 93       	push	r24
     3de:	8e 81       	ldd	r24, Y+6	; 0x06
     3e0:	8f 93       	push	r24
     3e2:	5f 92       	push	r5
     3e4:	4f 92       	push	r4
     3e6:	c8 d6       	rcall	.+3472   	; 0x1178 <printf>
     3e8:	8d b7       	in	r24, 0x3d	; 61
     3ea:	9e b7       	in	r25, 0x3e	; 62
     3ec:	08 96       	adiw	r24, 0x08	; 8
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	9e bf       	out	0x3e, r25	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	8d bf       	out	0x3d, r24	; 61
	result = test_call(test->run, test);
	if (result) {
		test_report_failure(test, "test", result);
	}

	if (test->cleanup) {
     3f8:	8c 81       	ldd	r24, Y+4	; 0x04
     3fa:	9d 81       	ldd	r25, Y+5	; 0x05
     3fc:	89 2b       	or	r24, r25
		int ret;
		dbg("Cleaning up fixture\r\n");
     3fe:	19 f1       	breq	.+70     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     400:	87 ea       	ldi	r24, 0xA7	; 167
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	cc d6       	rcall	.+3480   	; 0x119e <puts>
		ret = test_call(test->cleanup, test);
     406:	be 01       	movw	r22, r28
     408:	8c 81       	ldd	r24, Y+4	; 0x04
     40a:	9d 81       	ldd	r25, Y+5	; 0x05
     40c:	06 df       	rcall	.-500    	; 0x21a <test_call>
     40e:	1c 01       	movw	r2, r24
     410:	00 97       	sbiw	r24, 0x00	; 0
		if (ret && !result) {
     412:	c9 f0       	breq	.+50     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     414:	01 15       	cp	r16, r1
     416:	11 05       	cpc	r17, r1
     418:	b1 f4       	brne	.+44     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     41a:	3f 92       	push	r3
 * \param result Result value of test stage.
 */
static void test_report_failure(const struct test_case *test, const char *stage,
		int result)
{
	dbg_error("Test '%s' failed during '%s': %d\r\n", test->name, stage,
     41c:	8f 93       	push	r24
     41e:	ac eb       	ldi	r26, 0xBC	; 188
     420:	b2 e0       	ldi	r27, 0x02	; 2
     422:	bf 93       	push	r27
     424:	af 93       	push	r26
     426:	8f 81       	ldd	r24, Y+7	; 0x07
     428:	8f 93       	push	r24
     42a:	8e 81       	ldd	r24, Y+6	; 0x06
     42c:	8f 93       	push	r24
     42e:	5f 92       	push	r5
     430:	4f 92       	push	r4
     432:	a2 d6       	rcall	.+3396   	; 0x1178 <printf>
     434:	8d b7       	in	r24, 0x3d	; 61
     436:	9e b7       	in	r25, 0x3e	; 62
     438:	08 96       	adiw	r24, 0x08	; 8
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	9e bf       	out	0x3e, r25	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	8d bf       	out	0x3d, r24	; 61
     444:	81 01       	movw	r16, r2
		int ret;
		dbg("Cleaning up fixture\r\n");
		ret = test_call(test->cleanup, test);
		if (ret && !result) {
			test_report_failure(test, "cleanup", ret);
			result = ret;
     446:	10 92 4f 08 	sts	0x084F, r1	; 0x80084f <__data_end+0x1>
     44a:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <__data_end>
     44e:	11 23       	and	r17, r17
	for (i = 0; i < suite->nr_tests; i++) {
		const struct test_case *test;

		test = suite->tests[i];
		ret = test_case_run(test);
		if (ret < TEST_PASS) {
     450:	24 f4       	brge	.+8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     452:	9f ef       	ldi	r25, 0xFF	; 255
			nr_errors++;
     454:	69 1a       	sub	r6, r25
     456:	79 0a       	sbc	r7, r25
     458:	06 c0       	rjmp	.+12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     45a:	10 16       	cp	r1, r16
		} else if (ret > TEST_PASS) {
     45c:	11 06       	cpc	r1, r17
     45e:	1c f4       	brge	.+6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     460:	af ef       	ldi	r26, 0xFF	; 255
			nr_failures++;
     462:	aa 1a       	sub	r10, r26
     464:	ba 0a       	sbc	r11, r26
     466:	bf ef       	ldi	r27, 0xFF	; 255
	unsigned int i;
	int          ret;

	dbg_info("Running test suite '%s'...\r\n", suite->name);

	for (i = 0; i < suite->nr_tests; i++) {
     468:	eb 1a       	sub	r14, r27
     46a:	fb 0a       	sbc	r15, r27
     46c:	f6 01       	movw	r30, r12
     46e:	80 81       	ld	r24, Z
     470:	91 81       	ldd	r25, Z+1	; 0x01
     472:	e8 16       	cp	r14, r24
     474:	f9 06       	cpc	r15, r25
     476:	08 f4       	brcc	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     478:	64 cf       	rjmp	.-312    	; 0x342 <test_suite_run+0x78>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     47c:	61 2c       	mov	r6, r1
 * \return The number of tests that didn't pass.
 */
int test_suite_run(const struct test_suite *suite)
{
	unsigned int nr_failures = 0;
	unsigned int nr_errors = 0;
     47e:	71 2c       	mov	r7, r1
     480:	a1 2c       	mov	r10, r1
 *
 * \return The number of tests that didn't pass.
 */
int test_suite_run(const struct test_suite *suite)
{
	unsigned int nr_failures = 0;
     482:	b1 2c       	mov	r11, r1
     484:	7f 92       	push	r7
		} else if (ret > TEST_PASS) {
			nr_failures++;
		}
	}

	dbg_info("Test suite '%s' complete: %u tests, %u failures, %u errors\r\n\r\n",
     486:	6f 92       	push	r6
     488:	bf 92       	push	r11
     48a:	af 92       	push	r10
     48c:	9f 93       	push	r25
     48e:	8f 93       	push	r24
     490:	d6 01       	movw	r26, r12
     492:	15 96       	adiw	r26, 0x05	; 5
     494:	8c 91       	ld	r24, X
     496:	15 97       	sbiw	r26, 0x05	; 5
     498:	8f 93       	push	r24
     49a:	14 96       	adiw	r26, 0x04	; 4
     49c:	8c 91       	ld	r24, X
     49e:	8f 93       	push	r24
     4a0:	84 ec       	ldi	r24, 0xC4	; 196
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	9f 93       	push	r25
     4a6:	8f 93       	push	r24
     4a8:	67 d6       	rcall	.+3278   	; 0x1178 <printf>
     4aa:	ed b7       	in	r30, 0x3d	; 61
			suite->name, suite->nr_tests, nr_failures, nr_errors);

	return nr_errors + nr_failures;
     4ac:	fe b7       	in	r31, 0x3e	; 62
     4ae:	3a 96       	adiw	r30, 0x0a	; 10
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	fe bf       	out	0x3e, r31	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	ed bf       	out	0x3d, r30	; 61
     4ba:	c5 01       	movw	r24, r10
}
     4bc:	86 0d       	add	r24, r6
     4be:	97 1d       	adc	r25, r7
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	bf 90       	pop	r11
     4d2:	af 90       	pop	r10
     4d4:	9f 90       	pop	r9
     4d6:	8f 90       	pop	r8
     4d8:	7f 90       	pop	r7
     4da:	6f 90       	pop	r6
     4dc:	5f 90       	pop	r5
     4de:	4f 90       	pop	r4
     4e0:	3f 90       	pop	r3
     4e2:	2f 90       	pop	r2
     4e4:	08 95       	ret

000004e6 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	85 b9       	out	0x05, r24	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     4ea:	84 b9       	out	0x04, r24	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     4ec:	1a b8       	out	0x0a, r1	; 10
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     4ee:	8b b9       	out	0x0b, r24	; 11
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     4f0:	9e b1       	in	r25, 0x0e	; 14
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     4f2:	8d b1       	in	r24, 0x0d	; 13
     4f4:	8c 61       	ori	r24, 0x1C	; 28
     4f6:	8f 7d       	andi	r24, 0xDF	; 223
     4f8:	8d b9       	out	0x0d, r24	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     4fa:	89 2f       	mov	r24, r25
     4fc:	8c 63       	ori	r24, 0x3C	; 60
     4fe:	8e b9       	out	0x0e, r24	; 14
     500:	08 95       	ret

00000502 <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     502:	fc 01       	movw	r30, r24
     504:	90 81       	ld	r25, Z
     506:	95 ff       	sbrs	r25, 5
     508:	fd cf       	rjmp	.-6      	; 0x504 <usart_putchar+0x2>
     50a:	66 83       	std	Z+6, r22	; 0x06
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	08 95       	ret

00000510 <usart_getchar>:
     510:	fc 01       	movw	r30, r24
     512:	90 81       	ld	r25, Z
     514:	99 23       	and	r25, r25
     516:	ec f7       	brge	.-6      	; 0x512 <usart_getchar+0x2>
     518:	86 81       	ldd	r24, Z+6	; 0x06
     51a:	08 95       	ret

0000051c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     51c:	4f 92       	push	r4
     51e:	5f 92       	push	r5
     520:	6f 92       	push	r6
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	ec 01       	movw	r28, r24
     53e:	6a 01       	movw	r12, r20
     540:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     542:	28 01       	movw	r4, r16
     544:	39 01       	movw	r6, r18
     546:	68 94       	set
     548:	12 f8       	bld	r1, 2
     54a:	76 94       	lsr	r7
     54c:	67 94       	ror	r6
     54e:	57 94       	ror	r5
     550:	47 94       	ror	r4
     552:	16 94       	lsr	r1
     554:	d1 f7       	brne	.-12     	; 0x54a <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     556:	88 81       	ld	r24, Y
     558:	81 fd       	sbrc	r24, 1
     55a:	0e c0       	rjmp	.+28     	; 0x578 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     55c:	48 01       	movw	r8, r16
     55e:	59 01       	movw	r10, r18
     560:	07 2e       	mov	r0, r23
     562:	73 e1       	ldi	r23, 0x13	; 19
     564:	b6 94       	lsr	r11
     566:	a7 94       	ror	r10
     568:	97 94       	ror	r9
     56a:	87 94       	ror	r8
     56c:	7a 95       	dec	r23
     56e:	d1 f7       	brne	.-12     	; 0x564 <usart_set_baudrate+0x48>
     570:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     572:	d3 01       	movw	r26, r6
     574:	c2 01       	movw	r24, r4
     576:	15 c0       	rjmp	.+42     	; 0x5a2 <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     578:	d9 01       	movw	r26, r18
     57a:	c8 01       	movw	r24, r16
     57c:	68 94       	set
     57e:	13 f8       	bld	r1, 3
     580:	b6 95       	lsr	r27
     582:	a7 95       	ror	r26
     584:	97 95       	ror	r25
     586:	87 95       	ror	r24
     588:	16 94       	lsr	r1
     58a:	d1 f7       	brne	.-12     	; 0x580 <usart_set_baudrate+0x64>
		min_rate /= 2;
     58c:	48 01       	movw	r8, r16
     58e:	59 01       	movw	r10, r18
     590:	07 2e       	mov	r0, r23
     592:	74 e1       	ldi	r23, 0x14	; 20
     594:	b6 94       	lsr	r11
     596:	a7 94       	ror	r10
     598:	97 94       	ror	r9
     59a:	87 94       	ror	r8
     59c:	7a 95       	dec	r23
     59e:	d1 f7       	brne	.-12     	; 0x594 <usart_set_baudrate+0x78>
     5a0:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     5a2:	8c 15       	cp	r24, r12
     5a4:	9d 05       	cpc	r25, r13
     5a6:	ae 05       	cpc	r26, r14
     5a8:	bf 05       	cpc	r27, r15
     5aa:	68 f1       	brcs	.+90     	; 0x606 <usart_set_baudrate+0xea>
     5ac:	c8 14       	cp	r12, r8
     5ae:	d9 04       	cpc	r13, r9
     5b0:	ea 04       	cpc	r14, r10
     5b2:	fb 04       	cpc	r15, r11
     5b4:	50 f1       	brcs	.+84     	; 0x60a <usart_set_baudrate+0xee>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     5b6:	88 81       	ld	r24, Y
     5b8:	81 ff       	sbrs	r24, 1
     5ba:	0f c0       	rjmp	.+30     	; 0x5da <usart_set_baudrate+0xbe>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     5bc:	a7 01       	movw	r20, r14
     5be:	96 01       	movw	r18, r12
     5c0:	22 0f       	add	r18, r18
     5c2:	33 1f       	adc	r19, r19
     5c4:	44 1f       	adc	r20, r20
     5c6:	55 1f       	adc	r21, r21
     5c8:	c3 01       	movw	r24, r6
     5ca:	b2 01       	movw	r22, r4
     5cc:	ec d4       	rcall	.+2520   	; 0xfa6 <__udivmodsi4>
     5ce:	da 01       	movw	r26, r20
     5d0:	c9 01       	movw	r24, r18
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	a1 09       	sbc	r26, r1
     5d6:	b1 09       	sbc	r27, r1
     5d8:	12 c0       	rjmp	.+36     	; 0x5fe <usart_set_baudrate+0xe2>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     5da:	c9 01       	movw	r24, r18
     5dc:	b8 01       	movw	r22, r16
     5de:	68 94       	set
     5e0:	13 f8       	bld	r1, 3
     5e2:	96 95       	lsr	r25
     5e4:	87 95       	ror	r24
     5e6:	77 95       	ror	r23
     5e8:	67 95       	ror	r22
     5ea:	16 94       	lsr	r1
     5ec:	d1 f7       	brne	.-12     	; 0x5e2 <usart_set_baudrate+0xc6>
     5ee:	a7 01       	movw	r20, r14
     5f0:	96 01       	movw	r18, r12
     5f2:	d9 d4       	rcall	.+2482   	; 0xfa6 <__udivmodsi4>
     5f4:	da 01       	movw	r26, r20
     5f6:	c9 01       	movw	r24, r18
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	a1 09       	sbc	r26, r1
     5fc:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     5fe:	9d 83       	std	Y+5, r25	; 0x05
     600:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	03 c0       	rjmp	.+6      	; 0x60c <usart_set_baudrate+0xf0>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	01 c0       	rjmp	.+2      	; 0x60c <usart_set_baudrate+0xf0>
     60a:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	bf 90       	pop	r11
     61e:	af 90       	pop	r10
     620:	9f 90       	pop	r9
     622:	8f 90       	pop	r8
     624:	7f 90       	pop	r7
     626:	6f 90       	pop	r6
     628:	5f 90       	pop	r5
     62a:	4f 90       	pop	r4
     62c:	08 95       	ret

0000062e <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	ec 01       	movw	r28, r24
     638:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     63a:	80 3c       	cpi	r24, 0xC0	; 192
     63c:	91 05       	cpc	r25, r1
     63e:	21 f4       	brne	.+8      	; 0x648 <usart_init_rs232+0x1a>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     640:	62 e0       	ldi	r22, 0x02	; 2
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	a7 dd       	rcall	.-1202   	; 0x194 <sysclk_enable_module>
     646:	06 c0       	rjmp	.+12     	; 0x654 <usart_init_rs232+0x26>
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
     648:	88 3c       	cpi	r24, 0xC8	; 200
     64a:	91 05       	cpc	r25, r1
     64c:	19 f4       	brne	.+6      	; 0x654 <usart_init_rs232+0x26>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	a0 dd       	rcall	.-1216   	; 0x194 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     654:	8a 81       	ldd	r24, Y+2	; 0x02
     656:	8f 73       	andi	r24, 0x3F	; 63
     658:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     65a:	f8 01       	movw	r30, r16
     65c:	26 81       	ldd	r18, Z+6	; 0x06
     65e:	35 81       	ldd	r19, Z+5	; 0x05
     660:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	48 2f       	mov	r20, r24
     666:	43 70       	andi	r20, 0x03	; 3
     668:	44 0f       	add	r20, r20
     66a:	99 7f       	andi	r25, 0xF9	; 249
     66c:	94 2b       	or	r25, r20
     66e:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     670:	99 81       	ldd	r25, Y+1	; 0x01
     672:	84 70       	andi	r24, 0x04	; 4
     674:	88 0f       	add	r24, r24
     676:	88 0f       	add	r24, r24
     678:	9b 7f       	andi	r25, 0xFB	; 251
     67a:	89 2b       	or	r24, r25
     67c:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	8f 7c       	andi	r24, 0xCF	; 207
     682:	83 2b       	or	r24, r19
     684:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	97 7f       	andi	r25, 0xF7	; 247
     68a:	82 2f       	mov	r24, r18
     68c:	88 0f       	add	r24, r24
     68e:	88 0f       	add	r24, r24
     690:	88 0f       	add	r24, r24
     692:	89 2b       	or	r24, r25
     694:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     696:	40 81       	ld	r20, Z
     698:	51 81       	ldd	r21, Z+1	; 0x01
     69a:	62 81       	ldd	r22, Z+2	; 0x02
     69c:	73 81       	ldd	r23, Z+3	; 0x03
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	12 e1       	ldi	r17, 0x12	; 18
     6a2:	2a e7       	ldi	r18, 0x7A	; 122
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	ce 01       	movw	r24, r28
     6a8:	39 df       	rcall	.-398    	; 0x51c <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     6aa:	99 81       	ldd	r25, Y+1	; 0x01
     6ac:	98 60       	ori	r25, 0x08	; 8
     6ae:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     6b0:	99 81       	ldd	r25, Y+1	; 0x01
     6b2:	90 61       	ori	r25, 0x10	; 16
     6b4:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	08 95       	ret

000006c0 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ec 01       	movw	r28, r24
	uint32_t ubrr;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     6d2:	d9 01       	movw	r26, r18
     6d4:	c8 01       	movw	r24, r16
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	48 17       	cp	r20, r24
     6e0:	59 07       	cpc	r21, r25
     6e2:	6a 07       	cpc	r22, r26
     6e4:	7b 07       	cpc	r23, r27
     6e6:	88 f4       	brcc	.+34     	; 0x70a <usart_spi_set_baudrate+0x4a>
		ubrr = (cpu_hz / (2 * baud) - 1);
     6e8:	6a 01       	movw	r12, r20
     6ea:	7b 01       	movw	r14, r22
     6ec:	cc 0c       	add	r12, r12
     6ee:	dd 1c       	adc	r13, r13
     6f0:	ee 1c       	adc	r14, r14
     6f2:	ff 1c       	adc	r15, r15
     6f4:	c9 01       	movw	r24, r18
     6f6:	b8 01       	movw	r22, r16
     6f8:	a7 01       	movw	r20, r14
     6fa:	96 01       	movw	r18, r12
     6fc:	54 d4       	rcall	.+2216   	; 0xfa6 <__udivmodsi4>
     6fe:	da 01       	movw	r26, r20
     700:	c9 01       	movw	r24, r18
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	a1 09       	sbc	r26, r1
     706:	b1 09       	sbc	r27, r1
     708:	03 c0       	rjmp	.+6      	; 0x710 <usart_spi_set_baudrate+0x50>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		ubrr = 0;
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	dc 01       	movw	r26, r24
	}
	
	usart->UBRR  = ubrr;
     710:	9d 83       	std	Y+5, r25	; 0x05
     712:	8c 83       	std	Y+4, r24	; 0x04
}
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	08 95       	ret

00000726 <run_set_functions_test>:
 * correct values are being set.
 *
 * \param test Current test case.
 */
static void run_set_functions_test(const struct test_case *test)
{
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	c8 2f       	mov	r28, r24
     72c:	d9 2f       	mov	r29, r25
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     72e:	e0 ec       	ldi	r30, 0xC0	; 192
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	82 81       	ldd	r24, Z+2	; 0x02
     734:	80 6c       	ori	r24, 0xC0	; 192
     736:	82 83       	std	Z+2, r24	; 0x02
	bool success;

	/* Set USART mode and verify that it has been correctly set. */
	usart_set_mode(&CONF_UNIT_USART, USART_CMODE_MSPI_gc);
	success = (CONF_UNIT_USART.UCSRnC & USART_UMSEL01_gm) ==
     738:	82 81       	ldd	r24, Z+2	; 0x02
			USART_CMODE_MSPI_gc;
	test_assert_true(test, success,
     73a:	80 7c       	andi	r24, 0xC0	; 192
     73c:	80 3c       	cpi	r24, 0xC0	; 192
     73e:	c9 f0       	breq	.+50     	; 0x772 <run_set_functions_test+0x4c>
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	9f 93       	push	r25
     746:	8f 93       	push	r24
     748:	1f 92       	push	r1
     74a:	8c e9       	ldi	r24, 0x9C	; 156
     74c:	8f 93       	push	r24
     74e:	82 e3       	ldi	r24, 0x32	; 50
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	1f 92       	push	r1
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	8f 93       	push	r24
     75c:	df 93       	push	r29
     75e:	cf 93       	push	r28
     760:	81 dd       	rcall	.-1278   	; 0x264 <test_case_fail>
     762:	8d b7       	in	r24, 0x3d	; 61
     764:	9e b7       	in	r25, 0x3e	; 62
     766:	0a 96       	adiw	r24, 0x0a	; 10
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	9e bf       	out	0x3e, r25	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	8d bf       	out	0x3d, r24	; 61
     772:	e0 ec       	ldi	r30, 0xC0	; 192
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	8f 73       	andi	r24, 0x3F	; 63
     77a:	80 64       	ori	r24, 0x40	; 64
     77c:	82 83       	std	Z+2, r24	; 0x02
			"Trying to set USART mode to master SPI failed.");
        
        /* Set USART sync mode and verify that it has been correctly set. */
	usart_set_mode(&CONF_UNIT_USART, USART_CMODE_SYNCHRONOUS_gc);
	success = (CONF_UNIT_USART.UCSRnC & USART_UMSEL01_gm) ==
     77e:	82 81       	ldd	r24, Z+2	; 0x02
			USART_CMODE_SYNCHRONOUS_gc;
	test_assert_true(test, success,
     780:	80 7c       	andi	r24, 0xC0	; 192
     782:	80 34       	cpi	r24, 0x40	; 64
     784:	c9 f0       	breq	.+50     	; 0x7b8 <run_set_functions_test+0x92>
     786:	86 e4       	ldi	r24, 0x46	; 70
     788:	93 e0       	ldi	r25, 0x03	; 3
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	1f 92       	push	r1
     790:	83 ea       	ldi	r24, 0xA3	; 163
     792:	8f 93       	push	r24
     794:	82 e3       	ldi	r24, 0x32	; 50
     796:	93 e0       	ldi	r25, 0x03	; 3
     798:	9f 93       	push	r25
     79a:	8f 93       	push	r24
     79c:	1f 92       	push	r1
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	8f 93       	push	r24
     7a2:	df 93       	push	r29
     7a4:	cf 93       	push	r28
     7a6:	5e dd       	rcall	.-1348   	; 0x264 <test_case_fail>
     7a8:	8d b7       	in	r24, 0x3d	; 61
     7aa:	9e b7       	in	r25, 0x3e	; 62
     7ac:	0a 96       	adiw	r24, 0x0a	; 10
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	9e bf       	out	0x3e, r25	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart The USART module.
 */
static inline void usart_double_baud_enable(USART_t *usart)
{
	usart->UCSRnA |=  USART_U2X_bm;
     7b8:	e0 ec       	ldi	r30, 0xC0	; 192
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	82 60       	ori	r24, 0x02	; 2
     7c0:	80 83       	st	Z, r24
			"Trying to set USART mode to sync mode failed.");
			
	/* Test enabling and disabling USART double baud*/
	usart_double_baud_enable(&CONF_UNIT_USART);
	success = (CONF_UNIT_USART.UCSRnA & USART_U2X_bm);
     7c2:	80 81       	ld	r24, Z
	test_assert_true(test, success, "Trying to enable USART double baud failed.");
     7c4:	81 fd       	sbrc	r24, 1
     7c6:	19 c0       	rjmp	.+50     	; 0x7fa <run_set_functions_test+0xd4>
     7c8:	84 e7       	ldi	r24, 0x74	; 116
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	9f 93       	push	r25
     7ce:	8f 93       	push	r24
     7d0:	1f 92       	push	r1
     7d2:	88 ea       	ldi	r24, 0xA8	; 168
     7d4:	8f 93       	push	r24
     7d6:	82 e3       	ldi	r24, 0x32	; 50
     7d8:	93 e0       	ldi	r25, 0x03	; 3
     7da:	9f 93       	push	r25
     7dc:	8f 93       	push	r24
     7de:	1f 92       	push	r1
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	8f 93       	push	r24
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	3d dd       	rcall	.-1414   	; 0x264 <test_case_fail>
     7ea:	8d b7       	in	r24, 0x3d	; 61
     7ec:	9e b7       	in	r25, 0x3e	; 62
     7ee:	0a 96       	adiw	r24, 0x0a	; 10
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	9e bf       	out	0x3e, r25	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart The USART module.
 */
static inline void usart_double_baud_disable(USART_t *usart)
{
	usart->UCSRnA &= ~USART_U2X_bm;
     7fa:	e0 ec       	ldi	r30, 0xC0	; 192
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	8d 7f       	andi	r24, 0xFD	; 253
     802:	80 83       	st	Z, r24
	
	usart_double_baud_disable(&CONF_UNIT_USART);
	success = !(CONF_UNIT_USART.UCSRnA & USART_U2X_bm);
     804:	80 81       	ld	r24, Z
	test_assert_true(test, success, "Trying to disable USART double baud failed.");        
     806:	81 ff       	sbrs	r24, 1
     808:	19 c0       	rjmp	.+50     	; 0x83c <run_set_functions_test+0x116>
     80a:	8f e9       	ldi	r24, 0x9F	; 159
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	9f 93       	push	r25
     810:	8f 93       	push	r24
     812:	1f 92       	push	r1
     814:	8c ea       	ldi	r24, 0xAC	; 172
     816:	8f 93       	push	r24
     818:	82 e3       	ldi	r24, 0x32	; 50
     81a:	93 e0       	ldi	r25, 0x03	; 3
     81c:	9f 93       	push	r25
     81e:	8f 93       	push	r24
     820:	1f 92       	push	r1
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	8f 93       	push	r24
     826:	df 93       	push	r29
     828:	cf 93       	push	r28
     82a:	1c dd       	rcall	.-1480   	; 0x264 <test_case_fail>
     82c:	8d b7       	in	r24, 0x3d	; 61
     82e:	9e b7       	in	r25, 0x3e	; 62
     830:	0a 96       	adiw	r24, 0x0a	; 10
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	9e bf       	out	0x3e, r25	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     83c:	e0 ec       	ldi	r30, 0xC0	; 192
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	81 81       	ldd	r24, Z+1	; 0x01
     842:	80 61       	ori	r24, 0x10	; 16
     844:	81 83       	std	Z+1, r24	; 0x01

	/* Test enabling and disabling USART RX */
	usart_rx_enable(&CONF_UNIT_USART);
	success = (CONF_UNIT_USART.UCSRnB & USART_RXEN_bm);
     846:	81 81       	ldd	r24, Z+1	; 0x01
	test_assert_true(test, success, "Trying to enable USART RX failed.");
     848:	84 fd       	sbrc	r24, 4
     84a:	19 c0       	rjmp	.+50     	; 0x87e <run_set_functions_test+0x158>
     84c:	8b ec       	ldi	r24, 0xCB	; 203
     84e:	93 e0       	ldi	r25, 0x03	; 3
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	1f 92       	push	r1
     856:	81 eb       	ldi	r24, 0xB1	; 177
     858:	8f 93       	push	r24
     85a:	82 e3       	ldi	r24, 0x32	; 50
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	9f 93       	push	r25
     860:	8f 93       	push	r24
     862:	1f 92       	push	r1
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	8f 93       	push	r24
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	fb dc       	rcall	.-1546   	; 0x264 <test_case_fail>
     86e:	8d b7       	in	r24, 0x3d	; 61
     870:	9e b7       	in	r25, 0x3e	; 62
     872:	0a 96       	adiw	r24, 0x0a	; 10
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	9e bf       	out	0x3e, r25	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->UCSRnB &= ~USART_RXEN_bm;
     87e:	e0 ec       	ldi	r30, 0xC0	; 192
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	81 81       	ldd	r24, Z+1	; 0x01
     884:	8f 7e       	andi	r24, 0xEF	; 239
     886:	81 83       	std	Z+1, r24	; 0x01

	usart_rx_disable(&CONF_UNIT_USART);
	success = !(CONF_UNIT_USART.UCSRnB & USART_RXEN_bm);
     888:	81 81       	ldd	r24, Z+1	; 0x01
	test_assert_true(test, success, "Trying to disable USART RX failed.");
     88a:	84 ff       	sbrs	r24, 4
     88c:	19 c0       	rjmp	.+50     	; 0x8c0 <run_set_functions_test+0x19a>
     88e:	8d ee       	ldi	r24, 0xED	; 237
     890:	93 e0       	ldi	r25, 0x03	; 3
     892:	9f 93       	push	r25
     894:	8f 93       	push	r24
     896:	1f 92       	push	r1
     898:	85 eb       	ldi	r24, 0xB5	; 181
     89a:	8f 93       	push	r24
     89c:	82 e3       	ldi	r24, 0x32	; 50
     89e:	93 e0       	ldi	r25, 0x03	; 3
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	1f 92       	push	r1
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	8f 93       	push	r24
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	da dc       	rcall	.-1612   	; 0x264 <test_case_fail>
     8b0:	8d b7       	in	r24, 0x3d	; 61
     8b2:	9e b7       	in	r25, 0x3e	; 62
     8b4:	0a 96       	adiw	r24, 0x0a	; 10
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	9e bf       	out	0x3e, r25	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     8c0:	e0 ec       	ldi	r30, 0xC0	; 192
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	81 81       	ldd	r24, Z+1	; 0x01
     8c6:	88 60       	ori	r24, 0x08	; 8
     8c8:	81 83       	std	Z+1, r24	; 0x01

	/* Test enabling and disabling USART TX */
	usart_tx_enable(&CONF_UNIT_USART);
	success = (CONF_UNIT_USART.UCSRnB & USART_TXEN_bm);
     8ca:	81 81       	ldd	r24, Z+1	; 0x01
	test_assert_true(test, success, "Trying to enable USART TX failed.");
     8cc:	83 fd       	sbrc	r24, 3
     8ce:	19 c0       	rjmp	.+50     	; 0x902 <run_set_functions_test+0x1dc>
     8d0:	80 e1       	ldi	r24, 0x10	; 16
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	1f 92       	push	r1
     8da:	8a eb       	ldi	r24, 0xBA	; 186
     8dc:	8f 93       	push	r24
     8de:	82 e3       	ldi	r24, 0x32	; 50
     8e0:	93 e0       	ldi	r25, 0x03	; 3
     8e2:	9f 93       	push	r25
     8e4:	8f 93       	push	r24
     8e6:	1f 92       	push	r1
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	8f 93       	push	r24
     8ec:	df 93       	push	r29
     8ee:	cf 93       	push	r28
     8f0:	b9 dc       	rcall	.-1678   	; 0x264 <test_case_fail>
     8f2:	8d b7       	in	r24, 0x3d	; 61
     8f4:	9e b7       	in	r25, 0x3e	; 62
     8f6:	0a 96       	adiw	r24, 0x0a	; 10
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	9e bf       	out	0x3e, r25	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_disable(USART_t *usart)
{
	(usart)->UCSRnB &= ~USART_TXEN_bm;
     902:	e0 ec       	ldi	r30, 0xC0	; 192
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	81 81       	ldd	r24, Z+1	; 0x01
     908:	87 7f       	andi	r24, 0xF7	; 247
     90a:	81 83       	std	Z+1, r24	; 0x01

	usart_tx_disable(&CONF_UNIT_USART);
	success = !(CONF_UNIT_USART.UCSRnB & USART_TXEN_bm);
     90c:	81 81       	ldd	r24, Z+1	; 0x01
	test_assert_true(test, success, "Trying to disable USART TX failed.");
     90e:	83 ff       	sbrs	r24, 3
     910:	19 c0       	rjmp	.+50     	; 0x944 <run_set_functions_test+0x21e>
     912:	82 e3       	ldi	r24, 0x32	; 50
     914:	94 e0       	ldi	r25, 0x04	; 4
     916:	9f 93       	push	r25
     918:	8f 93       	push	r24
     91a:	1f 92       	push	r1
     91c:	8e eb       	ldi	r24, 0xBE	; 190
     91e:	8f 93       	push	r24
     920:	82 e3       	ldi	r24, 0x32	; 50
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	9f 93       	push	r25
     926:	8f 93       	push	r24
     928:	1f 92       	push	r1
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	8f 93       	push	r24
     92e:	df 93       	push	r29
     930:	cf 93       	push	r28
     932:	98 dc       	rcall	.-1744   	; 0x264 <test_case_fail>
     934:	8d b7       	in	r24, 0x3d	; 61
     936:	9e b7       	in	r25, 0x3e	; 62
     938:	0a 96       	adiw	r24, 0x0a	; 10
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	9e bf       	out	0x3e, r25	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_complete_interrupt_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXC_bm;
     944:	e0 ec       	ldi	r30, 0xC0	; 192
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	81 81       	ldd	r24, Z+1	; 0x01
     94a:	80 64       	ori	r24, 0x40	; 64
     94c:	81 83       	std	Z+1, r24	; 0x01
	
	/* Test enabling and disabling USART TX complete interrupt*/
	usart_tx_complete_interrupt_enable(&CONF_UNIT_USART);
	success = (CONF_UNIT_USART.UCSRnB & USART_TXC_bm);
     94e:	81 81       	ldd	r24, Z+1	; 0x01
	test_assert_true(test, success, "Trying to enable USART TX Complete interrupt failed.");
     950:	86 fd       	sbrc	r24, 6
     952:	19 c0       	rjmp	.+50     	; 0x986 <run_set_functions_test+0x260>
     954:	85 e5       	ldi	r24, 0x55	; 85
     956:	94 e0       	ldi	r25, 0x04	; 4
     958:	9f 93       	push	r25
     95a:	8f 93       	push	r24
     95c:	1f 92       	push	r1
     95e:	83 ec       	ldi	r24, 0xC3	; 195
     960:	8f 93       	push	r24
     962:	82 e3       	ldi	r24, 0x32	; 50
     964:	93 e0       	ldi	r25, 0x03	; 3
     966:	9f 93       	push	r25
     968:	8f 93       	push	r24
     96a:	1f 92       	push	r1
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	8f 93       	push	r24
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	77 dc       	rcall	.-1810   	; 0x264 <test_case_fail>
     976:	8d b7       	in	r24, 0x3d	; 61
     978:	9e b7       	in	r25, 0x3e	; 62
     97a:	0a 96       	adiw	r24, 0x0a	; 10
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	9e bf       	out	0x3e, r25	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_complete_interrupt_disable(USART_t *usart)
{
	(usart)->UCSRnB &= ~USART_TXC_bm;
     986:	e0 ec       	ldi	r30, 0xC0	; 192
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	81 81       	ldd	r24, Z+1	; 0x01
     98c:	8f 7b       	andi	r24, 0xBF	; 191
     98e:	81 83       	std	Z+1, r24	; 0x01

	usart_tx_complete_interrupt_disable(&CONF_UNIT_USART);
	success = !(CONF_UNIT_USART.UCSRnB & USART_TXC_bm);
     990:	81 81       	ldd	r24, Z+1	; 0x01
	test_assert_true(test, success, "Trying to disable USART TX Complete interrupt failed.");
     992:	86 ff       	sbrs	r24, 6
     994:	19 c0       	rjmp	.+50     	; 0x9c8 <run_set_functions_test+0x2a2>
     996:	8a e8       	ldi	r24, 0x8A	; 138
     998:	94 e0       	ldi	r25, 0x04	; 4
     99a:	9f 93       	push	r25
     99c:	8f 93       	push	r24
     99e:	1f 92       	push	r1
     9a0:	87 ec       	ldi	r24, 0xC7	; 199
     9a2:	8f 93       	push	r24
     9a4:	82 e3       	ldi	r24, 0x32	; 50
     9a6:	93 e0       	ldi	r25, 0x03	; 3
     9a8:	9f 93       	push	r25
     9aa:	8f 93       	push	r24
     9ac:	1f 92       	push	r1
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	8f 93       	push	r24
     9b2:	df 93       	push	r29
     9b4:	cf 93       	push	r28
     9b6:	56 dc       	rcall	.-1876   	; 0x264 <test_case_fail>
     9b8:	8d b7       	in	r24, 0x3d	; 61
     9ba:	9e b7       	in	r25, 0x3e	; 62
     9bc:	0a 96       	adiw	r24, 0x0a	; 10
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	9e bf       	out	0x3e, r25	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_complete_interrupt_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXC_bm;
     9c8:	e0 ec       	ldi	r30, 0xC0	; 192
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	81 81       	ldd	r24, Z+1	; 0x01
     9ce:	80 68       	ori	r24, 0x80	; 128
     9d0:	81 83       	std	Z+1, r24	; 0x01
	
	/* Test enabling and disabling USART RX complete interrupt*/
	usart_rx_complete_interrupt_enable(&CONF_UNIT_USART);
	success = (CONF_UNIT_USART.UCSRnB & USART_RXC_bm);
     9d2:	81 81       	ldd	r24, Z+1	; 0x01
	test_assert_true(test, success, "Trying to enable USART RX Complete interrupt failed.");
     9d4:	88 23       	and	r24, r24
     9d6:	cc f0       	brlt	.+50     	; 0xa0a <run_set_functions_test+0x2e4>
     9d8:	80 ec       	ldi	r24, 0xC0	; 192
     9da:	94 e0       	ldi	r25, 0x04	; 4
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	1f 92       	push	r1
     9e2:	8c ec       	ldi	r24, 0xCC	; 204
     9e4:	8f 93       	push	r24
     9e6:	82 e3       	ldi	r24, 0x32	; 50
     9e8:	93 e0       	ldi	r25, 0x03	; 3
     9ea:	9f 93       	push	r25
     9ec:	8f 93       	push	r24
     9ee:	1f 92       	push	r1
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	8f 93       	push	r24
     9f4:	df 93       	push	r29
     9f6:	cf 93       	push	r28
     9f8:	35 dc       	rcall	.-1942   	; 0x264 <test_case_fail>
     9fa:	8d b7       	in	r24, 0x3d	; 61
     9fc:	9e b7       	in	r25, 0x3e	; 62
     9fe:	0a 96       	adiw	r24, 0x0a	; 10
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	9e bf       	out	0x3e, r25	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_complete_interrupt_disable(USART_t *usart)
{
	(usart)->UCSRnB &= ~USART_RXC_bm;
     a0a:	e0 ec       	ldi	r30, 0xC0	; 192
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	81 81       	ldd	r24, Z+1	; 0x01
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	81 83       	std	Z+1, r24	; 0x01

	usart_rx_complete_interrupt_disable(&CONF_UNIT_USART);
	success = !(CONF_UNIT_USART.UCSRnB & USART_RXC_bm);
     a14:	81 81       	ldd	r24, Z+1	; 0x01
	test_assert_true(test, success, "Trying to disable USART RX Complete interrupt failed.");
     a16:	88 23       	and	r24, r24
     a18:	cc f4       	brge	.+50     	; 0xa4c <run_set_functions_test+0x326>
     a1a:	85 ef       	ldi	r24, 0xF5	; 245
     a1c:	94 e0       	ldi	r25, 0x04	; 4
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	1f 92       	push	r1
     a24:	80 ed       	ldi	r24, 0xD0	; 208
     a26:	8f 93       	push	r24
     a28:	82 e3       	ldi	r24, 0x32	; 50
     a2a:	93 e0       	ldi	r25, 0x03	; 3
     a2c:	9f 93       	push	r25
     a2e:	8f 93       	push	r24
     a30:	1f 92       	push	r1
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	8f 93       	push	r24
     a36:	df 93       	push	r29
     a38:	cf 93       	push	r28
     a3a:	14 dc       	rcall	.-2008   	; 0x264 <test_case_fail>
     a3c:	8d b7       	in	r24, 0x3d	; 61
     a3e:	9e b7       	in	r25, 0x3e	; 62
     a40:	0a 96       	adiw	r24, 0x0a	; 10
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	9e bf       	out	0x3e, r25	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_data_empty_interrupt_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_DRIE_bm;
     a4c:	e0 ec       	ldi	r30, 0xC0	; 192
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	81 81       	ldd	r24, Z+1	; 0x01
     a52:	80 62       	ori	r24, 0x20	; 32
     a54:	81 83       	std	Z+1, r24	; 0x01
	
	/* Test enabling and disabling USART data register empty interrupt*/
	usart_data_empty_interrupt_enable(&CONF_UNIT_USART);
	success = (CONF_UNIT_USART.UCSRnB & USART_DRIE_bm);
     a56:	81 81       	ldd	r24, Z+1	; 0x01
	test_assert_true(test, success, "Trying to enable USART data register empty interrupt failed.");
     a58:	85 fd       	sbrc	r24, 5
     a5a:	19 c0       	rjmp	.+50     	; 0xa8e <run_set_functions_test+0x368>
     a5c:	8b e2       	ldi	r24, 0x2B	; 43
     a5e:	95 e0       	ldi	r25, 0x05	; 5
     a60:	9f 93       	push	r25
     a62:	8f 93       	push	r24
     a64:	1f 92       	push	r1
     a66:	85 ed       	ldi	r24, 0xD5	; 213
     a68:	8f 93       	push	r24
     a6a:	82 e3       	ldi	r24, 0x32	; 50
     a6c:	93 e0       	ldi	r25, 0x03	; 3
     a6e:	9f 93       	push	r25
     a70:	8f 93       	push	r24
     a72:	1f 92       	push	r1
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	8f 93       	push	r24
     a78:	df 93       	push	r29
     a7a:	cf 93       	push	r28
     a7c:	f3 db       	rcall	.-2074   	; 0x264 <test_case_fail>
     a7e:	8d b7       	in	r24, 0x3d	; 61
     a80:	9e b7       	in	r25, 0x3e	; 62
     a82:	0a 96       	adiw	r24, 0x0a	; 10
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	9e bf       	out	0x3e, r25	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	8d bf       	out	0x3d, r24	; 61
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_data_empty_interrupt_disable(USART_t *usart)
{
	(usart)->UCSRnB &= ~USART_DRIE_bm;
     a8e:	e0 ec       	ldi	r30, 0xC0	; 192
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	81 81       	ldd	r24, Z+1	; 0x01
     a94:	8f 7d       	andi	r24, 0xDF	; 223
     a96:	81 83       	std	Z+1, r24	; 0x01

	usart_data_empty_interrupt_disable(&CONF_UNIT_USART);
	success = !(CONF_UNIT_USART.UCSRnB & USART_DRIE_bm);
     a98:	81 81       	ldd	r24, Z+1	; 0x01
	test_assert_true(test, success, "Trying to disable USART data register empty interrupt failed.");	
     a9a:	85 ff       	sbrs	r24, 5
     a9c:	19 c0       	rjmp	.+50     	; 0xad0 <run_set_functions_test+0x3aa>
     a9e:	88 e6       	ldi	r24, 0x68	; 104
     aa0:	95 e0       	ldi	r25, 0x05	; 5
     aa2:	9f 93       	push	r25
     aa4:	8f 93       	push	r24
     aa6:	1f 92       	push	r1
     aa8:	89 ed       	ldi	r24, 0xD9	; 217
     aaa:	8f 93       	push	r24
     aac:	82 e3       	ldi	r24, 0x32	; 50
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	9f 93       	push	r25
     ab2:	8f 93       	push	r24
     ab4:	1f 92       	push	r1
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	8f 93       	push	r24
     aba:	df 93       	push	r29
     abc:	cf 93       	push	r28
     abe:	d2 db       	rcall	.-2140   	; 0x264 <test_case_fail>
     ac0:	8d b7       	in	r24, 0x3d	; 61
     ac2:	9e b7       	in	r25, 0x3e	; 62
     ac4:	0a 96       	adiw	r24, 0x0a	; 10
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	9e bf       	out	0x3e, r25	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	8d bf       	out	0x3d, r24	; 61
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     ad0:	e0 ec       	ldi	r30, 0xC0	; 192
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	82 81       	ldd	r24, Z+2	; 0x02
     ad6:	86 60       	ori	r24, 0x06	; 6
     ad8:	82 83       	std	Z+2, r24	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     ada:	81 81       	ldd	r24, Z+1	; 0x01
     adc:	8b 7f       	andi	r24, 0xFB	; 251
     ade:	81 83       	std	Z+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     ae0:	82 81       	ldd	r24, Z+2	; 0x02
     ae2:	8f 7c       	andi	r24, 0xCF	; 207
     ae4:	80 62       	ori	r24, 0x20	; 32
     ae6:	82 83       	std	Z+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     ae8:	82 81       	ldd	r24, Z+2	; 0x02
     aea:	88 60       	ori	r24, 0x08	; 8
     aec:	82 83       	std	Z+2, r24	; 0x02

	/* Try to set format. */
	usart_format_set(&CONF_UNIT_USART, USART_CHSIZE_8BIT_gc,
			USART_PMODE_EVEN_gc, true);
	success = !(CONF_UNIT_USART.UCSRnA & USART_FE_bm);
     aee:	80 81       	ld	r24, Z
	test_assert_true(test, success,
     af0:	84 ff       	sbrs	r24, 4
     af2:	19 c0       	rjmp	.+50     	; 0xb26 <run_set_functions_test+0x400>
     af4:	86 ea       	ldi	r24, 0xA6	; 166
     af6:	95 e0       	ldi	r25, 0x05	; 5
     af8:	9f 93       	push	r25
     afa:	8f 93       	push	r24
     afc:	1f 92       	push	r1
     afe:	80 ee       	ldi	r24, 0xE0	; 224
     b00:	8f 93       	push	r24
     b02:	82 e3       	ldi	r24, 0x32	; 50
     b04:	93 e0       	ldi	r25, 0x03	; 3
     b06:	9f 93       	push	r25
     b08:	8f 93       	push	r24
     b0a:	1f 92       	push	r1
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	8f 93       	push	r24
     b10:	df 93       	push	r29
     b12:	cf 93       	push	r28
     b14:	a7 db       	rcall	.-2226   	; 0x264 <test_case_fail>
     b16:	8d b7       	in	r24, 0x3d	; 61
     b18:	9e b7       	in	r25, 0x3e	; 62
     b1a:	0a 96       	adiw	r24, 0x0a	; 10
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	9e bf       	out	0x3e, r25	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	8d bf       	out	0x3d, r24	; 61
			"Trying to set the Frame Format failed.");
}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <run_check_registers_test>:
 * correct values.
 *
 * \param test Current test case.
 */
static void run_check_registers_test(const struct test_case *test)
{
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	29 97       	sbiw	r28, 0x09	; 9
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	18 2f       	mov	r17, r24
     b46:	09 2f       	mov	r16, r25
	bool success;
	uint8_t data = 'b';

	
	const usart_rs232_options_t options = {
     b48:	87 e0       	ldi	r24, 0x07	; 7
     b4a:	e6 e0       	ldi	r30, 0x06	; 6
     b4c:	f2 e0       	ldi	r31, 0x02	; 2
     b4e:	de 01       	movw	r26, r28
     b50:	11 96       	adiw	r26, 0x01	; 1
     b52:	01 90       	ld	r0, Z+
     b54:	0d 92       	st	X+, r0
     b56:	8a 95       	dec	r24
     b58:	e1 f7       	brne	.-8      	; 0xb52 <run_check_registers_test+0x26>
		.charlength = CONF_UNIT_CHARLENGTH,
		.paritytype = CONF_UNIT_PARITY,
		.stopbits   = CONF_UNIT_STOPBITS
	};

	usart_init_rs232(&CONF_UNIT_USART, &options);
     b5a:	be 01       	movw	r22, r28
     b5c:	6f 5f       	subi	r22, 0xFF	; 255
     b5e:	7f 4f       	sbci	r23, 0xFF	; 255
     b60:	80 ec       	ldi	r24, 0xC0	; 192
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	64 dd       	rcall	.-1336   	; 0x62e <usart_init_rs232>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t *usart)
{
	return (usart)->UCSRnA & USART_DRE_bm;
     b66:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      
	/* Test empty data register */
	success = usart_data_register_is_empty(&CONF_UNIT_USART);
	test_assert_true(test, success,
     b6a:	85 fd       	sbrc	r24, 5
     b6c:	16 c0       	rjmp	.+44     	; 0xb9a <run_check_registers_test+0x6e>
     b6e:	8d ec       	ldi	r24, 0xCD	; 205
     b70:	95 e0       	ldi	r25, 0x05	; 5
     b72:	9f 93       	push	r25
     b74:	8f 93       	push	r24
     b76:	1f 92       	push	r1
     b78:	8d ef       	ldi	r24, 0xFD	; 253
     b7a:	8f 93       	push	r24
     b7c:	82 e3       	ldi	r24, 0x32	; 50
     b7e:	93 e0       	ldi	r25, 0x03	; 3
     b80:	9f 93       	push	r25
     b82:	8f 93       	push	r24
     b84:	1f 92       	push	r1
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	8f 93       	push	r24
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	6a db       	rcall	.-2348   	; 0x264 <test_case_fail>
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t *usart, uint8_t txdata)
{
	(usart)->UDR = txdata;
     b9a:	82 e6       	ldi	r24, 0x62	; 98
     b9c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			"Checking if the data register is empty failed");
	
	/* Test finished data transfers */
	usart_put(&CONF_UNIT_USART, data);
	for(volatile uint16_t delay=0;delay<20000;delay++);
     ba0:	19 86       	std	Y+9, r1	; 0x09
     ba2:	18 86       	std	Y+8, r1	; 0x08
     ba4:	88 85       	ldd	r24, Y+8	; 0x08
     ba6:	99 85       	ldd	r25, Y+9	; 0x09
     ba8:	80 32       	cpi	r24, 0x20	; 32
     baa:	9e 44       	sbci	r25, 0x4E	; 78
     bac:	50 f4       	brcc	.+20     	; 0xbc2 <run_check_registers_test+0x96>
     bae:	88 85       	ldd	r24, Y+8	; 0x08
     bb0:	99 85       	ldd	r25, Y+9	; 0x09
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	99 87       	std	Y+9, r25	; 0x09
     bb6:	88 87       	std	Y+8, r24	; 0x08
     bb8:	88 85       	ldd	r24, Y+8	; 0x08
     bba:	99 85       	ldd	r25, Y+9	; 0x09
     bbc:	80 32       	cpi	r24, 0x20	; 32
     bbe:	9e 44       	sbci	r25, 0x4E	; 78
     bc0:	b0 f3       	brcs	.-20     	; 0xbae <run_check_registers_test+0x82>
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t *usart)
{
	return (usart)->UCSRnA & USART_RXC_bm;
     bc2:	e0 ec       	ldi	r30, 0xC0	; 192
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t *usart)
{
	return (usart)->UDR;
     bc8:	96 81       	ldd	r25, Z+6	; 0x06
    
	success = usart_rx_is_complete(&CONF_UNIT_USART);
	usart_get(&CONF_UNIT_USART);
	test_assert_true(test, success,
     bca:	88 23       	and	r24, r24
     bcc:	b4 f0       	brlt	.+44     	; 0xbfa <run_check_registers_test+0xce>
     bce:	8b ef       	ldi	r24, 0xFB	; 251
     bd0:	95 e0       	ldi	r25, 0x05	; 5
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	8f 93       	push	r24
     bda:	96 e0       	ldi	r25, 0x06	; 6
     bdc:	9f 93       	push	r25
     bde:	22 e3       	ldi	r18, 0x32	; 50
     be0:	33 e0       	ldi	r19, 0x03	; 3
     be2:	3f 93       	push	r19
     be4:	2f 93       	push	r18
     be6:	1f 92       	push	r1
     be8:	8f 93       	push	r24
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	3a db       	rcall	.-2444   	; 0x264 <test_case_fail>
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t *usart)
{
	return (usart)->UCSRnA & USART_TXC_bm;
     bfa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   	                "Checking if the receive is finished failed");		       
					
	success = usart_tx_is_complete(&CONF_UNIT_USART);
	test_assert_true(test, success,
     bfe:	86 fd       	sbrc	r24, 6
     c00:	16 c0       	rjmp	.+44     	; 0xc2e <run_check_registers_test+0x102>
     c02:	86 e2       	ldi	r24, 0x26	; 38
     c04:	96 e0       	ldi	r25, 0x06	; 6
     c06:	9f 93       	push	r25
     c08:	8f 93       	push	r24
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	8f 93       	push	r24
     c0e:	9a e0       	ldi	r25, 0x0A	; 10
     c10:	9f 93       	push	r25
     c12:	22 e3       	ldi	r18, 0x32	; 50
     c14:	33 e0       	ldi	r19, 0x03	; 3
     c16:	3f 93       	push	r19
     c18:	2f 93       	push	r18
     c1a:	1f 92       	push	r1
     c1c:	8f 93       	push	r24
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	20 db       	rcall	.-2496   	; 0x264 <test_case_fail>
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	cd bf       	out	0x3d, r28	; 61
	                "Checking if the transmit is finished failed");

}
     c2e:	29 96       	adiw	r28, 0x09	; 9
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     c44:	5e cc       	rjmp	.-1860   	; 0x502 <usart_putchar>
}
     c46:	08 95       	ret

00000c48 <run_loopback_syncmode_test>:
 * and sending/receiving works. A jumper is connected on the USART.
 *
 * \param test Current test case.
 */
static void run_loopback_syncmode_test(const struct test_case *test)
{
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	f8 2e       	mov	r15, r24
     c56:	e9 2e       	mov	r14, r25
	uint8_t out_c = 'c';
	uint8_t in_c  = 0;
        port_pin_t sck_pin;
        
        sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     c58:	62 e0       	ldi	r22, 0x02	; 2
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	9b da       	rcall	.-2762   	; 0x194 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     c5e:	c0 ec       	ldi	r28, 0xC0	; 192
     c60:	d0 e0       	ldi	r29, 0x00	; 0
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	8f 73       	andi	r24, 0x3F	; 63
     c66:	80 64       	ori	r24, 0x40	; 64
     c68:	8a 83       	std	Y+2, r24	; 0x02
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     c6a:	72 9a       	sbi	0x0e, 2	; 14
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     c6c:	6a 9a       	sbi	0x0d, 2	; 13
	sck_pin = IOPORT_CREATE_PIN(PORTE, 2);
	ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
				ioport_pin_to_mask(sck_pin),
				IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH );
        
        usart_spi_set_baudrate(&CONF_UNIT_USART, CONF_UNIT_BAUDRATE,
     c6e:	00 e0       	ldi	r16, 0x00	; 0
     c70:	12 e1       	ldi	r17, 0x12	; 18
     c72:	2a e7       	ldi	r18, 0x7A	; 122
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	55 e2       	ldi	r21, 0x25	; 37
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	80 ec       	ldi	r24, 0xC0	; 192
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	1e dd       	rcall	.-1476   	; 0x6c0 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	88 60       	ori	r24, 0x08	; 8
     c88:	89 83       	std	Y+1, r24	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	80 61       	ori	r24, 0x10	; 16
     c8e:	89 83       	std	Y+1, r24	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(&CONF_UNIT_USART);
	usart_rx_enable(&CONF_UNIT_USART);

	usart_putchar(&CONF_UNIT_USART, out_c);
     c90:	63 e6       	ldi	r22, 0x63	; 99
     c92:	80 ec       	ldi	r24, 0xC0	; 192
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	35 dc       	rcall	.-1942   	; 0x502 <usart_putchar>
	in_c = usart_getchar(&CONF_UNIT_USART);
     c98:	80 ec       	ldi	r24, 0xC0	; 192
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	39 dc       	rcall	.-1934   	; 0x510 <usart_getchar>
     c9e:	83 36       	cpi	r24, 0x63	; 99

	test_assert_true(test, in_c == out_c,
     ca0:	f1 f0       	breq	.+60     	; 0xcde <run_loopback_syncmode_test+0x96>
     ca2:	1f 92       	push	r1
     ca4:	93 e6       	ldi	r25, 0x63	; 99
     ca6:	9f 93       	push	r25
     ca8:	1f 92       	push	r1
     caa:	8f 93       	push	r24
     cac:	82 e5       	ldi	r24, 0x52	; 82
     cae:	96 e0       	ldi	r25, 0x06	; 6
     cb0:	9f 93       	push	r25
     cb2:	8f 93       	push	r24
     cb4:	1f 92       	push	r1
     cb6:	88 e8       	ldi	r24, 0x88	; 136
     cb8:	8f 93       	push	r24
     cba:	82 e3       	ldi	r24, 0x32	; 50
     cbc:	93 e0       	ldi	r25, 0x03	; 3
     cbe:	9f 93       	push	r25
     cc0:	8f 93       	push	r24
     cc2:	1f 92       	push	r1
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	8f 93       	push	r24
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	cb da       	rcall	.-2666   	; 0x264 <test_case_fail>
     cce:	8d b7       	in	r24, 0x3d	; 61
     cd0:	9e b7       	in	r25, 0x3e	; 62
     cd2:	0e 96       	adiw	r24, 0x0e	; 14
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	9e bf       	out	0x3e, r25	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	8d bf       	out	0x3d, r24	; 61
     cde:	df 91       	pop	r29
	   "Read character through sync mode is not correct: %d != %d", in_c, out_c);			
}
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <run_loopback_test>:
     cec:	0f 93       	push	r16
 * and sending/receiving works. A jumper is connected on the USART.
 *
 * \param test Current test case.
 */
static void run_loopback_test(const struct test_case *test)
{
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	27 97       	sbiw	r28, 0x07	; 7
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	18 2f       	mov	r17, r24
     d06:	09 2f       	mov	r16, r25
	uint8_t out_c = 'a';
	uint8_t in_c  = 0;
	
	const usart_rs232_options_t options = {
     d08:	87 e0       	ldi	r24, 0x07	; 7
     d0a:	e6 e0       	ldi	r30, 0x06	; 6
     d0c:	f2 e0       	ldi	r31, 0x02	; 2
     d0e:	de 01       	movw	r26, r28
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	01 90       	ld	r0, Z+
     d14:	0d 92       	st	X+, r0
     d16:	8a 95       	dec	r24
     d18:	e1 f7       	brne	.-8      	; 0xd12 <run_loopback_test+0x26>
		.charlength = CONF_UNIT_CHARLENGTH,
		.paritytype = CONF_UNIT_PARITY,
		.stopbits   = CONF_UNIT_STOPBITS
	};

	usart_init_rs232(&CONF_UNIT_USART, &options);
     d1a:	be 01       	movw	r22, r28
     d1c:	6f 5f       	subi	r22, 0xFF	; 255
     d1e:	7f 4f       	sbci	r23, 0xFF	; 255
     d20:	80 ec       	ldi	r24, 0xC0	; 192
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	84 dc       	rcall	.-1784   	; 0x62e <usart_init_rs232>

	usart_putchar(&CONF_UNIT_USART, out_c);
     d26:	61 e6       	ldi	r22, 0x61	; 97
     d28:	80 ec       	ldi	r24, 0xC0	; 192
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	ea db       	rcall	.-2092   	; 0x502 <usart_putchar>
	in_c = usart_getchar(&CONF_UNIT_USART);
     d2e:	80 ec       	ldi	r24, 0xC0	; 192
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	ee db       	rcall	.-2084   	; 0x510 <usart_getchar>

	test_assert_true(test, in_c == out_c,
     d34:	81 36       	cpi	r24, 0x61	; 97
     d36:	d9 f0       	breq	.+54     	; 0xd6e <run_loopback_test+0x82>
     d38:	1f 92       	push	r1
     d3a:	91 e6       	ldi	r25, 0x61	; 97
     d3c:	9f 93       	push	r25
     d3e:	1f 92       	push	r1
     d40:	8f 93       	push	r24
     d42:	8c e8       	ldi	r24, 0x8C	; 140
     d44:	96 e0       	ldi	r25, 0x06	; 6
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	1f 92       	push	r1
     d4c:	85 e6       	ldi	r24, 0x65	; 101
     d4e:	8f 93       	push	r24
     d50:	82 e3       	ldi	r24, 0x32	; 50
     d52:	93 e0       	ldi	r25, 0x03	; 3
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24
     d58:	1f 92       	push	r1
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	8f 93       	push	r24
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	80 da       	rcall	.-2816   	; 0x264 <test_case_fail>
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
			"Read character is not correct: %d != %d", in_c, out_c);			
}
     d6e:	27 96       	adiw	r28, 0x07	; 7
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     d8a:	c2 db       	rcall	.-2172   	; 0x510 <usart_getchar>
     d8c:	88 83       	st	Y, r24
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <run_baudrate_test>:
 * been set in the register.
 *
 * \param test Current test case.
 */
static void run_baudrate_test(const struct test_case *test)
{
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	c8 2f       	mov	r28, r24
     d9e:	d9 2f       	mov	r29, r25
	/* Get the system cpu frequency */
	cpu_hz = sysclk_get_cpu_hz();
        
        /* Test for baud rate equal to 2400 */
	baud = 2400;
	usart_set_baudrate(&CONF_UNIT_USART, baud, cpu_hz);
     da0:	00 e0       	ldi	r16, 0x00	; 0
     da2:	12 e1       	ldi	r17, 0x12	; 18
     da4:	2a e7       	ldi	r18, 0x7A	; 122
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e6       	ldi	r20, 0x60	; 96
     daa:	59 e0       	ldi	r21, 0x09	; 9
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	80 ec       	ldi	r24, 0xC0	; 192
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	b3 db       	rcall	.-2202   	; 0x51c <usart_set_baudrate>
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (CONF_UNIT_USART.UCSRnA & USART_U2X_bm) {
     db6:	e0 ec       	ldi	r30, 0xC0	; 192
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
	}

	/* Check if double speed is enabled. */
	if (CONF_UNIT_USART.UCSRnA & USART_U2X_bm) {
     dbc:	80 81       	ld	r24, Z
        
        /* Test for baud rate equal to 2400 */
	baud = 2400;
	usart_set_baudrate(&CONF_UNIT_USART, baud, cpu_hz);
	ubrr = calculate_baudrate(baud, cpu_hz);
	success = CONF_UNIT_USART.UBRR == ubrr;
     dbe:	84 81       	ldd	r24, Z+4	; 0x04
     dc0:	95 81       	ldd	r25, Z+5	; 0x05
	test_assert_true(test, success, "Setting baud rate to 2400 failed");
     dc2:	8f 3c       	cpi	r24, 0xCF	; 207
     dc4:	91 05       	cpc	r25, r1
     dc6:	c9 f0       	breq	.+50     	; 0xdfa <run_baudrate_test+0x66>
     dc8:	84 eb       	ldi	r24, 0xB4	; 180
     dca:	96 e0       	ldi	r25, 0x06	; 6
     dcc:	9f 93       	push	r25
     dce:	8f 93       	push	r24
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	8f 93       	push	r24
     dd4:	9a e4       	ldi	r25, 0x4A	; 74
     dd6:	9f 93       	push	r25
     dd8:	22 e3       	ldi	r18, 0x32	; 50
     dda:	33 e0       	ldi	r19, 0x03	; 3
     ddc:	3f 93       	push	r19
     dde:	2f 93       	push	r18
     de0:	1f 92       	push	r1
     de2:	8f 93       	push	r24
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	3d da       	rcall	.-2950   	; 0x264 <test_case_fail>
     dea:	8d b7       	in	r24, 0x3d	; 61
     dec:	9e b7       	in	r25, 0x3e	; 62
     dee:	0a 96       	adiw	r24, 0x0a	; 10
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	9e bf       	out	0x3e, r25	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	8d bf       	out	0x3d, r24	; 61
	
	/* Test for baud rate equal to 9600 */
	baud = 9600;
	usart_set_baudrate(&CONF_UNIT_USART, baud, cpu_hz);
     dfa:	00 e0       	ldi	r16, 0x00	; 0
     dfc:	12 e1       	ldi	r17, 0x12	; 18
     dfe:	2a e7       	ldi	r18, 0x7A	; 122
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e8       	ldi	r20, 0x80	; 128
     e04:	55 e2       	ldi	r21, 0x25	; 37
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	80 ec       	ldi	r24, 0xC0	; 192
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	86 db       	rcall	.-2292   	; 0x51c <usart_set_baudrate>
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (CONF_UNIT_USART.UCSRnA & USART_U2X_bm) {
     e10:	e0 ec       	ldi	r30, 0xC0	; 192
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
	}

	/* Check if double speed is enabled. */
	if (CONF_UNIT_USART.UCSRnA & USART_U2X_bm) {
     e16:	80 81       	ld	r24, Z
	
	/* Test for baud rate equal to 9600 */
	baud = 9600;
	usart_set_baudrate(&CONF_UNIT_USART, baud, cpu_hz);
	ubrr = calculate_baudrate(baud, cpu_hz);
	success = CONF_UNIT_USART.UBRR == ubrr;
     e18:	84 81       	ldd	r24, Z+4	; 0x04
     e1a:	95 81       	ldd	r25, Z+5	; 0x05
	test_assert_true(test, success, "Setting baud rate to 9600 failed");
     e1c:	c3 97       	sbiw	r24, 0x33	; 51
     e1e:	c9 f0       	breq	.+50     	; 0xe52 <run_baudrate_test+0xbe>
     e20:	85 ed       	ldi	r24, 0xD5	; 213
     e22:	96 e0       	ldi	r25, 0x06	; 6
     e24:	9f 93       	push	r25
     e26:	8f 93       	push	r24
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	8f 93       	push	r24
     e2c:	91 e5       	ldi	r25, 0x51	; 81
     e2e:	9f 93       	push	r25
     e30:	22 e3       	ldi	r18, 0x32	; 50
     e32:	33 e0       	ldi	r19, 0x03	; 3
     e34:	3f 93       	push	r19
     e36:	2f 93       	push	r18
     e38:	1f 92       	push	r1
     e3a:	8f 93       	push	r24
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	11 da       	rcall	.-3038   	; 0x264 <test_case_fail>
     e42:	8d b7       	in	r24, 0x3d	; 61
     e44:	9e b7       	in	r25, 0x3e	; 62
     e46:	0a 96       	adiw	r24, 0x0a	; 10
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	9e bf       	out	0x3e, r25	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	8d bf       	out	0x3d, r24	; 61

	/* Test for baud rate equal to 19200 */
	baud = 19200;
	usart_set_baudrate(&CONF_UNIT_USART, baud, cpu_hz);
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	12 e1       	ldi	r17, 0x12	; 18
     e56:	2a e7       	ldi	r18, 0x7A	; 122
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	5b e4       	ldi	r21, 0x4B	; 75
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	80 ec       	ldi	r24, 0xC0	; 192
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	5a db       	rcall	.-2380   	; 0x51c <usart_set_baudrate>
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (CONF_UNIT_USART.UCSRnA & USART_U2X_bm) {
     e68:	e0 ec       	ldi	r30, 0xC0	; 192
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
	}

	/* Check if double speed is enabled. */
	if (CONF_UNIT_USART.UCSRnA & USART_U2X_bm) {
     e6e:	80 81       	ld	r24, Z

	/* Test for baud rate equal to 19200 */
	baud = 19200;
	usart_set_baudrate(&CONF_UNIT_USART, baud, cpu_hz);
	ubrr = calculate_baudrate(baud, cpu_hz);
	success = CONF_UNIT_USART.UBRR == ubrr;
     e70:	84 81       	ldd	r24, Z+4	; 0x04
     e72:	95 81       	ldd	r25, Z+5	; 0x05
	test_assert_true(test, success, "Setting baud rate to 19200 failed");
     e74:	49 97       	sbiw	r24, 0x19	; 25
     e76:	c9 f0       	breq	.+50     	; 0xeaa <run_baudrate_test+0x116>
     e78:	86 ef       	ldi	r24, 0xF6	; 246
     e7a:	96 e0       	ldi	r25, 0x06	; 6
     e7c:	9f 93       	push	r25
     e7e:	8f 93       	push	r24
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	8f 93       	push	r24
     e84:	98 e5       	ldi	r25, 0x58	; 88
     e86:	9f 93       	push	r25
     e88:	22 e3       	ldi	r18, 0x32	; 50
     e8a:	33 e0       	ldi	r19, 0x03	; 3
     e8c:	3f 93       	push	r19
     e8e:	2f 93       	push	r18
     e90:	1f 92       	push	r1
     e92:	8f 93       	push	r24
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	e5 d9       	rcall	.-3126   	; 0x264 <test_case_fail>
     e9a:	8d b7       	in	r24, 0x3d	; 61
     e9c:	9e b7       	in	r25, 0x3e	; 62
     e9e:	0a 96       	adiw	r24, 0x0a	; 10
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	9e bf       	out	0x3e, r25	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	8d bf       	out	0x3d, r24	; 61

	/* Test for baud rate equal to 38400 */
	baud = 38400;
	usart_set_baudrate(&CONF_UNIT_USART, baud, cpu_hz);
     eaa:	00 e0       	ldi	r16, 0x00	; 0
     eac:	12 e1       	ldi	r17, 0x12	; 18
     eae:	2a e7       	ldi	r18, 0x7A	; 122
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	56 e9       	ldi	r21, 0x96	; 150
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	80 ec       	ldi	r24, 0xC0	; 192
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	2e db       	rcall	.-2468   	; 0x51c <usart_set_baudrate>
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (CONF_UNIT_USART.UCSRnA & USART_U2X_bm) {
     ec0:	e0 ec       	ldi	r30, 0xC0	; 192
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
	}

	/* Check if double speed is enabled. */
	if (CONF_UNIT_USART.UCSRnA & USART_U2X_bm) {
     ec6:	80 81       	ld	r24, Z

	/* Test for baud rate equal to 38400 */
	baud = 38400;
	usart_set_baudrate(&CONF_UNIT_USART, baud, cpu_hz);
	ubrr = calculate_baudrate(baud, cpu_hz);
	success = CONF_UNIT_USART.UBRR == ubrr;
     ec8:	84 81       	ldd	r24, Z+4	; 0x04
     eca:	95 81       	ldd	r25, Z+5	; 0x05
	test_assert_true(test, success, "Setting baud rate to 38400 failed");
     ecc:	0c 97       	sbiw	r24, 0x0c	; 12
     ece:	c9 f0       	breq	.+50     	; 0xf02 <run_baudrate_test+0x16e>
     ed0:	88 e1       	ldi	r24, 0x18	; 24
     ed2:	97 e0       	ldi	r25, 0x07	; 7
     ed4:	9f 93       	push	r25
     ed6:	8f 93       	push	r24
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	8f 93       	push	r24
     edc:	9f e5       	ldi	r25, 0x5F	; 95
     ede:	9f 93       	push	r25
     ee0:	22 e3       	ldi	r18, 0x32	; 50
     ee2:	33 e0       	ldi	r19, 0x03	; 3
     ee4:	3f 93       	push	r19
     ee6:	2f 93       	push	r18
     ee8:	1f 92       	push	r1
     eea:	8f 93       	push	r24
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	b9 d9       	rcall	.-3214   	; 0x264 <test_case_fail>
     ef2:	8d b7       	in	r24, 0x3d	; 61
     ef4:	9e b7       	in	r25, 0x3e	; 62
     ef6:	0a 96       	adiw	r24, 0x0a	; 10
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	9e bf       	out	0x3e, r25	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	8d bf       	out	0x3d, r24	; 61
}
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	08 95       	ret

00000f0c <main>:
 *
 * Initializes the clock system, board and serial output, then sets up the
 * USART unit test suite and runs it.
 */
int main(void)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	67 97       	sbiw	r28, 0x17	; 23
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
		.charlength = CONF_TEST_CHARLENGTH,
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};

	board_init();
     f20:	e2 da       	rcall	.-2620   	; 0x4e6 <board_init>
	sysclk_init();
     f22:	1d d9       	rcall	.-3526   	; 0x15e <sysclk_init>
     f24:	88 ec       	ldi	r24, 0xC8	; 200
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	90 93 6c 08 	sts	0x086C, r25	; 0x80086c <stdio_base+0x1>
     f2c:	80 93 6b 08 	sts	0x086B, r24	; 0x80086b <stdio_base>
     f30:	82 e2       	ldi	r24, 0x22	; 34
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     f32:	96 e0       	ldi	r25, 0x06	; 6
     f34:	90 93 6a 08 	sts	0x086A, r25	; 0x80086a <ptr_put+0x1>
     f38:	80 93 69 08 	sts	0x0869, r24	; 0x800869 <ptr_put>
     f3c:	82 ec       	ldi	r24, 0xC2	; 194
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     f3e:	96 e0       	ldi	r25, 0x06	; 6
     f40:	90 93 68 08 	sts	0x0868, r25	; 0x800868 <ptr_get+0x1>
     f44:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <ptr_get>
     f48:	83 e0       	ldi	r24, 0x03	; 3
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	/* USART options. */
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     f4a:	8d 8b       	std	Y+21, r24	; 0x15
     f4c:	1e 8a       	std	Y+22, r1	; 0x16
	usart_rs232_options.paritytype   = options->paritytype;
     f4e:	1f 8a       	std	Y+23, r1	; 0x17
	usart_rs232_options.stopbits     = options->stopbits;
     f50:	80 e0       	ldi	r24, 0x00	; 0
	usart_rs232_options.baudrate     = options->baudrate;
     f52:	96 e9       	ldi	r25, 0x96	; 150
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	89 8b       	std	Y+17, r24	; 0x11
     f5a:	9a 8b       	std	Y+18, r25	; 0x12
     f5c:	ab 8b       	std	Y+19, r26	; 0x13
     f5e:	bc 8b       	std	Y+20, r27	; 0x14
     f60:	be 01       	movw	r22, r28

	if (usart_init_rs232(usart, &usart_rs232_options)) {
     f62:	6f 5e       	subi	r22, 0xEF	; 239
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	88 ec       	ldi	r24, 0xC8	; 200
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	61 db       	rcall	.-2366   	; 0x62e <usart_init_rs232>
     f6c:	62 ee       	ldi	r22, 0xE2	; 226
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	8b ef       	ldi	r24, 0xFB	; 251
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	7b d0       	rcall	.+246    	; 0x106c <fdevopen>
     f76:	2a e0       	ldi	r18, 0x0A	; 10
			NULL, "Test checking registers and transfers");
	DEFINE_TEST_CASE(baudrate_test, NULL, run_baudrate_test, NULL,
			"Test setting standard baudrates");

	/* Put test case addresses in an array */
	DEFINE_TEST_ARRAY(usart_tests) = {
     f78:	ed e0       	ldi	r30, 0x0D	; 13
     f7a:	f2 e0       	ldi	r31, 0x02	; 2
     f7c:	ce 01       	movw	r24, r28
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	dc 01       	movw	r26, r24
     f82:	01 90       	ld	r0, Z+
     f84:	0d 92       	st	X+, r0
     f86:	2a 95       	dec	r18
     f88:	e1 f7       	brne	.-8      	; 0xf82 <main+0x76>
     f8a:	25 e0       	ldi	r18, 0x05	; 5
		&check_registers_test,
		&baudrate_test,
	};

	/* Define the test suite */
	DEFINE_TEST_SUITE(usart_suite, usart_tests,
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	3c 87       	std	Y+12, r19	; 0x0c
     f90:	2b 87       	std	Y+11, r18	; 0x0b
     f92:	9e 87       	std	Y+14, r25	; 0x0e
     f94:	8d 87       	std	Y+13, r24	; 0x0d
     f96:	8e e2       	ldi	r24, 0x2E	; 46
     f98:	98 e0       	ldi	r25, 0x08	; 8
     f9a:	98 8b       	std	Y+16, r25	; 0x10
     f9c:	8f 87       	std	Y+15, r24	; 0x0f
			"MEGARF USART driver test suite");

	/* Run all tests in the suite */
	test_suite_run(&usart_suite);
     f9e:	ce 01       	movw	r24, r28
     fa0:	0b 96       	adiw	r24, 0x0b	; 11
     fa2:	93 d9       	rcall	.-3290   	; 0x2ca <test_suite_run>
     fa4:	ff cf       	rjmp	.-2      	; 0xfa4 <main+0x98>

00000fa6 <__udivmodsi4>:
     fa6:	a1 e2       	ldi	r26, 0x21	; 33
     fa8:	1a 2e       	mov	r1, r26
     faa:	aa 1b       	sub	r26, r26
     fac:	bb 1b       	sub	r27, r27
     fae:	fd 01       	movw	r30, r26
     fb0:	0d c0       	rjmp	.+26     	; 0xfcc <__udivmodsi4_ep>

00000fb2 <__udivmodsi4_loop>:
     fb2:	aa 1f       	adc	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	ee 1f       	adc	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	a2 17       	cp	r26, r18
     fbc:	b3 07       	cpc	r27, r19
     fbe:	e4 07       	cpc	r30, r20
     fc0:	f5 07       	cpc	r31, r21
     fc2:	20 f0       	brcs	.+8      	; 0xfcc <__udivmodsi4_ep>
     fc4:	a2 1b       	sub	r26, r18
     fc6:	b3 0b       	sbc	r27, r19
     fc8:	e4 0b       	sbc	r30, r20
     fca:	f5 0b       	sbc	r31, r21

00000fcc <__udivmodsi4_ep>:
     fcc:	66 1f       	adc	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	88 1f       	adc	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	1a 94       	dec	r1
     fd6:	69 f7       	brne	.-38     	; 0xfb2 <__udivmodsi4_loop>
     fd8:	60 95       	com	r22
     fda:	70 95       	com	r23
     fdc:	80 95       	com	r24
     fde:	90 95       	com	r25
     fe0:	9b 01       	movw	r18, r22
     fe2:	ac 01       	movw	r20, r24
     fe4:	bd 01       	movw	r22, r26
     fe6:	cf 01       	movw	r24, r30
     fe8:	08 95       	ret

00000fea <setjmp>:
     fea:	dc 01       	movw	r26, r24
     fec:	2d 92       	st	X+, r2
     fee:	3d 92       	st	X+, r3
     ff0:	4d 92       	st	X+, r4
     ff2:	5d 92       	st	X+, r5
     ff4:	6d 92       	st	X+, r6
     ff6:	7d 92       	st	X+, r7
     ff8:	8d 92       	st	X+, r8
     ffa:	9d 92       	st	X+, r9
     ffc:	ad 92       	st	X+, r10
     ffe:	bd 92       	st	X+, r11
    1000:	cd 92       	st	X+, r12
    1002:	dd 92       	st	X+, r13
    1004:	ed 92       	st	X+, r14
    1006:	fd 92       	st	X+, r15
    1008:	0d 93       	st	X+, r16
    100a:	1d 93       	st	X+, r17
    100c:	cd 93       	st	X+, r28
    100e:	dd 93       	st	X+, r29
    1010:	ff 91       	pop	r31
    1012:	ef 91       	pop	r30
    1014:	8d b7       	in	r24, 0x3d	; 61
    1016:	8d 93       	st	X+, r24
    1018:	8e b7       	in	r24, 0x3e	; 62
    101a:	8d 93       	st	X+, r24
    101c:	8f b7       	in	r24, 0x3f	; 63
    101e:	8d 93       	st	X+, r24
    1020:	ed 93       	st	X+, r30
    1022:	fd 93       	st	X+, r31
    1024:	88 27       	eor	r24, r24
    1026:	99 27       	eor	r25, r25
    1028:	09 94       	ijmp

0000102a <longjmp>:
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	81 1d       	adc	r24, r1
    1034:	2d 90       	ld	r2, X+
    1036:	3d 90       	ld	r3, X+
    1038:	4d 90       	ld	r4, X+
    103a:	5d 90       	ld	r5, X+
    103c:	6d 90       	ld	r6, X+
    103e:	7d 90       	ld	r7, X+
    1040:	8d 90       	ld	r8, X+
    1042:	9d 90       	ld	r9, X+
    1044:	ad 90       	ld	r10, X+
    1046:	bd 90       	ld	r11, X+
    1048:	cd 90       	ld	r12, X+
    104a:	dd 90       	ld	r13, X+
    104c:	ed 90       	ld	r14, X+
    104e:	fd 90       	ld	r15, X+
    1050:	0d 91       	ld	r16, X+
    1052:	1d 91       	ld	r17, X+
    1054:	cd 91       	ld	r28, X+
    1056:	dd 91       	ld	r29, X+
    1058:	ed 91       	ld	r30, X+
    105a:	fd 91       	ld	r31, X+
    105c:	0d 90       	ld	r0, X+
    105e:	f8 94       	cli
    1060:	fe bf       	out	0x3e, r31	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	ed bf       	out	0x3d, r30	; 61
    1066:	ed 91       	ld	r30, X+
    1068:	fd 91       	ld	r31, X+
    106a:	09 94       	ijmp

0000106c <fdevopen>:
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	31 f4       	brne	.+12     	; 0x1084 <fdevopen+0x18>
    1078:	61 15       	cp	r22, r1
    107a:	71 05       	cpc	r23, r1
    107c:	19 f4       	brne	.+6      	; 0x1084 <fdevopen+0x18>
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	39 c0       	rjmp	.+114    	; 0x10f6 <fdevopen+0x8a>
    1084:	8b 01       	movw	r16, r22
    1086:	ec 01       	movw	r28, r24
    1088:	6e e0       	ldi	r22, 0x0E	; 14
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	b3 d2       	rcall	.+1382   	; 0x15f8 <calloc>
    1092:	fc 01       	movw	r30, r24
    1094:	89 2b       	or	r24, r25
    1096:	99 f3       	breq	.-26     	; 0x107e <fdevopen+0x12>
    1098:	80 e8       	ldi	r24, 0x80	; 128
    109a:	83 83       	std	Z+3, r24	; 0x03
    109c:	01 15       	cp	r16, r1
    109e:	11 05       	cpc	r17, r1
    10a0:	71 f0       	breq	.+28     	; 0x10be <fdevopen+0x52>
    10a2:	13 87       	std	Z+11, r17	; 0x0b
    10a4:	02 87       	std	Z+10, r16	; 0x0a
    10a6:	81 e8       	ldi	r24, 0x81	; 129
    10a8:	83 83       	std	Z+3, r24	; 0x03
    10aa:	80 91 6d 08 	lds	r24, 0x086D	; 0x80086d <__iob>
    10ae:	90 91 6e 08 	lds	r25, 0x086E	; 0x80086e <__iob+0x1>
    10b2:	89 2b       	or	r24, r25
    10b4:	21 f4       	brne	.+8      	; 0x10be <fdevopen+0x52>
    10b6:	f0 93 6e 08 	sts	0x086E, r31	; 0x80086e <__iob+0x1>
    10ba:	e0 93 6d 08 	sts	0x086D, r30	; 0x80086d <__iob>
    10be:	20 97       	sbiw	r28, 0x00	; 0
    10c0:	c9 f0       	breq	.+50     	; 0x10f4 <fdevopen+0x88>
    10c2:	d1 87       	std	Z+9, r29	; 0x09
    10c4:	c0 87       	std	Z+8, r28	; 0x08
    10c6:	83 81       	ldd	r24, Z+3	; 0x03
    10c8:	82 60       	ori	r24, 0x02	; 2
    10ca:	83 83       	std	Z+3, r24	; 0x03
    10cc:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <__iob+0x2>
    10d0:	90 91 70 08 	lds	r25, 0x0870	; 0x800870 <__iob+0x3>
    10d4:	89 2b       	or	r24, r25
    10d6:	71 f4       	brne	.+28     	; 0x10f4 <fdevopen+0x88>
    10d8:	f0 93 70 08 	sts	0x0870, r31	; 0x800870 <__iob+0x3>
    10dc:	e0 93 6f 08 	sts	0x086F, r30	; 0x80086f <__iob+0x2>
    10e0:	80 91 71 08 	lds	r24, 0x0871	; 0x800871 <__iob+0x4>
    10e4:	90 91 72 08 	lds	r25, 0x0872	; 0x800872 <__iob+0x5>
    10e8:	89 2b       	or	r24, r25
    10ea:	21 f4       	brne	.+8      	; 0x10f4 <fdevopen+0x88>
    10ec:	f0 93 72 08 	sts	0x0872, r31	; 0x800872 <__iob+0x5>
    10f0:	e0 93 71 08 	sts	0x0871, r30	; 0x800871 <__iob+0x4>
    10f4:	cf 01       	movw	r24, r30
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	08 95       	ret

00001100 <fputc>:
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	fb 01       	movw	r30, r22
    110a:	23 81       	ldd	r18, Z+3	; 0x03
    110c:	21 fd       	sbrc	r18, 1
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <fputc+0x16>
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	9f ef       	ldi	r25, 0xFF	; 255
    1114:	2c c0       	rjmp	.+88     	; 0x116e <fputc+0x6e>
    1116:	22 ff       	sbrs	r18, 2
    1118:	16 c0       	rjmp	.+44     	; 0x1146 <fputc+0x46>
    111a:	46 81       	ldd	r20, Z+6	; 0x06
    111c:	57 81       	ldd	r21, Z+7	; 0x07
    111e:	24 81       	ldd	r18, Z+4	; 0x04
    1120:	35 81       	ldd	r19, Z+5	; 0x05
    1122:	42 17       	cp	r20, r18
    1124:	53 07       	cpc	r21, r19
    1126:	44 f4       	brge	.+16     	; 0x1138 <fputc+0x38>
    1128:	a0 81       	ld	r26, Z
    112a:	b1 81       	ldd	r27, Z+1	; 0x01
    112c:	9d 01       	movw	r18, r26
    112e:	2f 5f       	subi	r18, 0xFF	; 255
    1130:	3f 4f       	sbci	r19, 0xFF	; 255
    1132:	31 83       	std	Z+1, r19	; 0x01
    1134:	20 83       	st	Z, r18
    1136:	8c 93       	st	X, r24
    1138:	26 81       	ldd	r18, Z+6	; 0x06
    113a:	37 81       	ldd	r19, Z+7	; 0x07
    113c:	2f 5f       	subi	r18, 0xFF	; 255
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	37 83       	std	Z+7, r19	; 0x07
    1142:	26 83       	std	Z+6, r18	; 0x06
    1144:	14 c0       	rjmp	.+40     	; 0x116e <fputc+0x6e>
    1146:	8b 01       	movw	r16, r22
    1148:	ec 01       	movw	r28, r24
    114a:	fb 01       	movw	r30, r22
    114c:	00 84       	ldd	r0, Z+8	; 0x08
    114e:	f1 85       	ldd	r31, Z+9	; 0x09
    1150:	e0 2d       	mov	r30, r0
    1152:	09 95       	icall
    1154:	89 2b       	or	r24, r25
    1156:	e1 f6       	brne	.-72     	; 0x1110 <fputc+0x10>
    1158:	d8 01       	movw	r26, r16
    115a:	16 96       	adiw	r26, 0x06	; 6
    115c:	8d 91       	ld	r24, X+
    115e:	9c 91       	ld	r25, X
    1160:	17 97       	sbiw	r26, 0x07	; 7
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	17 96       	adiw	r26, 0x07	; 7
    1166:	9c 93       	st	X, r25
    1168:	8e 93       	st	-X, r24
    116a:	16 97       	sbiw	r26, 0x06	; 6
    116c:	ce 01       	movw	r24, r28
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	08 95       	ret

00001178 <printf>:
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	ae 01       	movw	r20, r28
    1182:	4b 5f       	subi	r20, 0xFB	; 251
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	fa 01       	movw	r30, r20
    1188:	61 91       	ld	r22, Z+
    118a:	71 91       	ld	r23, Z+
    118c:	af 01       	movw	r20, r30
    118e:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <__iob+0x2>
    1192:	90 91 70 08 	lds	r25, 0x0870	; 0x800870 <__iob+0x3>
    1196:	33 d0       	rcall	.+102    	; 0x11fe <vfprintf>
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <puts>:
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	e0 91 6f 08 	lds	r30, 0x086F	; 0x80086f <__iob+0x2>
    11aa:	f0 91 70 08 	lds	r31, 0x0870	; 0x800870 <__iob+0x3>
    11ae:	23 81       	ldd	r18, Z+3	; 0x03
    11b0:	21 ff       	sbrs	r18, 1
    11b2:	1b c0       	rjmp	.+54     	; 0x11ea <puts+0x4c>
    11b4:	8c 01       	movw	r16, r24
    11b6:	d0 e0       	ldi	r29, 0x00	; 0
    11b8:	c0 e0       	ldi	r28, 0x00	; 0
    11ba:	f8 01       	movw	r30, r16
    11bc:	81 91       	ld	r24, Z+
    11be:	8f 01       	movw	r16, r30
    11c0:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <__iob+0x2>
    11c4:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <__iob+0x3>
    11c8:	db 01       	movw	r26, r22
    11ca:	18 96       	adiw	r26, 0x08	; 8
    11cc:	ed 91       	ld	r30, X+
    11ce:	fc 91       	ld	r31, X
    11d0:	19 97       	sbiw	r26, 0x09	; 9
    11d2:	88 23       	and	r24, r24
    11d4:	31 f0       	breq	.+12     	; 0x11e2 <puts+0x44>
    11d6:	09 95       	icall
    11d8:	89 2b       	or	r24, r25
    11da:	79 f3       	breq	.-34     	; 0x11ba <puts+0x1c>
    11dc:	df ef       	ldi	r29, 0xFF	; 255
    11de:	cf ef       	ldi	r28, 0xFF	; 255
    11e0:	ec cf       	rjmp	.-40     	; 0x11ba <puts+0x1c>
    11e2:	8a e0       	ldi	r24, 0x0A	; 10
    11e4:	09 95       	icall
    11e6:	89 2b       	or	r24, r25
    11e8:	19 f0       	breq	.+6      	; 0x11f0 <puts+0x52>
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	9f ef       	ldi	r25, 0xFF	; 255
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <puts+0x56>
    11f0:	8d 2f       	mov	r24, r29
    11f2:	9c 2f       	mov	r25, r28
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <vfprintf>:
    11fe:	2f 92       	push	r2
    1200:	3f 92       	push	r3
    1202:	4f 92       	push	r4
    1204:	5f 92       	push	r5
    1206:	6f 92       	push	r6
    1208:	7f 92       	push	r7
    120a:	8f 92       	push	r8
    120c:	9f 92       	push	r9
    120e:	af 92       	push	r10
    1210:	bf 92       	push	r11
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	2b 97       	sbiw	r28, 0x0b	; 11
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	6c 01       	movw	r12, r24
    1234:	7b 01       	movw	r14, r22
    1236:	8a 01       	movw	r16, r20
    1238:	fc 01       	movw	r30, r24
    123a:	17 82       	std	Z+7, r1	; 0x07
    123c:	16 82       	std	Z+6, r1	; 0x06
    123e:	83 81       	ldd	r24, Z+3	; 0x03
    1240:	81 ff       	sbrs	r24, 1
    1242:	bf c1       	rjmp	.+894    	; 0x15c2 <vfprintf+0x3c4>
    1244:	ce 01       	movw	r24, r28
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	3c 01       	movw	r6, r24
    124a:	f6 01       	movw	r30, r12
    124c:	93 81       	ldd	r25, Z+3	; 0x03
    124e:	f7 01       	movw	r30, r14
    1250:	93 fd       	sbrc	r25, 3
    1252:	85 91       	lpm	r24, Z+
    1254:	93 ff       	sbrs	r25, 3
    1256:	81 91       	ld	r24, Z+
    1258:	7f 01       	movw	r14, r30
    125a:	88 23       	and	r24, r24
    125c:	09 f4       	brne	.+2      	; 0x1260 <vfprintf+0x62>
    125e:	ad c1       	rjmp	.+858    	; 0x15ba <vfprintf+0x3bc>
    1260:	85 32       	cpi	r24, 0x25	; 37
    1262:	39 f4       	brne	.+14     	; 0x1272 <vfprintf+0x74>
    1264:	93 fd       	sbrc	r25, 3
    1266:	85 91       	lpm	r24, Z+
    1268:	93 ff       	sbrs	r25, 3
    126a:	81 91       	ld	r24, Z+
    126c:	7f 01       	movw	r14, r30
    126e:	85 32       	cpi	r24, 0x25	; 37
    1270:	21 f4       	brne	.+8      	; 0x127a <vfprintf+0x7c>
    1272:	b6 01       	movw	r22, r12
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	44 df       	rcall	.-376    	; 0x1100 <fputc>
    1278:	e8 cf       	rjmp	.-48     	; 0x124a <vfprintf+0x4c>
    127a:	91 2c       	mov	r9, r1
    127c:	21 2c       	mov	r2, r1
    127e:	31 2c       	mov	r3, r1
    1280:	ff e1       	ldi	r31, 0x1F	; 31
    1282:	f3 15       	cp	r31, r3
    1284:	d8 f0       	brcs	.+54     	; 0x12bc <vfprintf+0xbe>
    1286:	8b 32       	cpi	r24, 0x2B	; 43
    1288:	79 f0       	breq	.+30     	; 0x12a8 <vfprintf+0xaa>
    128a:	38 f4       	brcc	.+14     	; 0x129a <vfprintf+0x9c>
    128c:	80 32       	cpi	r24, 0x20	; 32
    128e:	79 f0       	breq	.+30     	; 0x12ae <vfprintf+0xb0>
    1290:	83 32       	cpi	r24, 0x23	; 35
    1292:	a1 f4       	brne	.+40     	; 0x12bc <vfprintf+0xbe>
    1294:	23 2d       	mov	r18, r3
    1296:	20 61       	ori	r18, 0x10	; 16
    1298:	1d c0       	rjmp	.+58     	; 0x12d4 <vfprintf+0xd6>
    129a:	8d 32       	cpi	r24, 0x2D	; 45
    129c:	61 f0       	breq	.+24     	; 0x12b6 <vfprintf+0xb8>
    129e:	80 33       	cpi	r24, 0x30	; 48
    12a0:	69 f4       	brne	.+26     	; 0x12bc <vfprintf+0xbe>
    12a2:	23 2d       	mov	r18, r3
    12a4:	21 60       	ori	r18, 0x01	; 1
    12a6:	16 c0       	rjmp	.+44     	; 0x12d4 <vfprintf+0xd6>
    12a8:	83 2d       	mov	r24, r3
    12aa:	82 60       	ori	r24, 0x02	; 2
    12ac:	38 2e       	mov	r3, r24
    12ae:	e3 2d       	mov	r30, r3
    12b0:	e4 60       	ori	r30, 0x04	; 4
    12b2:	3e 2e       	mov	r3, r30
    12b4:	2a c0       	rjmp	.+84     	; 0x130a <vfprintf+0x10c>
    12b6:	f3 2d       	mov	r31, r3
    12b8:	f8 60       	ori	r31, 0x08	; 8
    12ba:	1d c0       	rjmp	.+58     	; 0x12f6 <vfprintf+0xf8>
    12bc:	37 fc       	sbrc	r3, 7
    12be:	2d c0       	rjmp	.+90     	; 0x131a <vfprintf+0x11c>
    12c0:	20 ed       	ldi	r18, 0xD0	; 208
    12c2:	28 0f       	add	r18, r24
    12c4:	2a 30       	cpi	r18, 0x0A	; 10
    12c6:	40 f0       	brcs	.+16     	; 0x12d8 <vfprintf+0xda>
    12c8:	8e 32       	cpi	r24, 0x2E	; 46
    12ca:	b9 f4       	brne	.+46     	; 0x12fa <vfprintf+0xfc>
    12cc:	36 fc       	sbrc	r3, 6
    12ce:	75 c1       	rjmp	.+746    	; 0x15ba <vfprintf+0x3bc>
    12d0:	23 2d       	mov	r18, r3
    12d2:	20 64       	ori	r18, 0x40	; 64
    12d4:	32 2e       	mov	r3, r18
    12d6:	19 c0       	rjmp	.+50     	; 0x130a <vfprintf+0x10c>
    12d8:	36 fe       	sbrs	r3, 6
    12da:	06 c0       	rjmp	.+12     	; 0x12e8 <vfprintf+0xea>
    12dc:	8a e0       	ldi	r24, 0x0A	; 10
    12de:	98 9e       	mul	r9, r24
    12e0:	20 0d       	add	r18, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	92 2e       	mov	r9, r18
    12e6:	11 c0       	rjmp	.+34     	; 0x130a <vfprintf+0x10c>
    12e8:	ea e0       	ldi	r30, 0x0A	; 10
    12ea:	2e 9e       	mul	r2, r30
    12ec:	20 0d       	add	r18, r0
    12ee:	11 24       	eor	r1, r1
    12f0:	22 2e       	mov	r2, r18
    12f2:	f3 2d       	mov	r31, r3
    12f4:	f0 62       	ori	r31, 0x20	; 32
    12f6:	3f 2e       	mov	r3, r31
    12f8:	08 c0       	rjmp	.+16     	; 0x130a <vfprintf+0x10c>
    12fa:	8c 36       	cpi	r24, 0x6C	; 108
    12fc:	21 f4       	brne	.+8      	; 0x1306 <vfprintf+0x108>
    12fe:	83 2d       	mov	r24, r3
    1300:	80 68       	ori	r24, 0x80	; 128
    1302:	38 2e       	mov	r3, r24
    1304:	02 c0       	rjmp	.+4      	; 0x130a <vfprintf+0x10c>
    1306:	88 36       	cpi	r24, 0x68	; 104
    1308:	41 f4       	brne	.+16     	; 0x131a <vfprintf+0x11c>
    130a:	f7 01       	movw	r30, r14
    130c:	93 fd       	sbrc	r25, 3
    130e:	85 91       	lpm	r24, Z+
    1310:	93 ff       	sbrs	r25, 3
    1312:	81 91       	ld	r24, Z+
    1314:	7f 01       	movw	r14, r30
    1316:	81 11       	cpse	r24, r1
    1318:	b3 cf       	rjmp	.-154    	; 0x1280 <vfprintf+0x82>
    131a:	98 2f       	mov	r25, r24
    131c:	9f 7d       	andi	r25, 0xDF	; 223
    131e:	95 54       	subi	r25, 0x45	; 69
    1320:	93 30       	cpi	r25, 0x03	; 3
    1322:	28 f4       	brcc	.+10     	; 0x132e <vfprintf+0x130>
    1324:	0c 5f       	subi	r16, 0xFC	; 252
    1326:	1f 4f       	sbci	r17, 0xFF	; 255
    1328:	9f e3       	ldi	r25, 0x3F	; 63
    132a:	99 83       	std	Y+1, r25	; 0x01
    132c:	0d c0       	rjmp	.+26     	; 0x1348 <vfprintf+0x14a>
    132e:	83 36       	cpi	r24, 0x63	; 99
    1330:	31 f0       	breq	.+12     	; 0x133e <vfprintf+0x140>
    1332:	83 37       	cpi	r24, 0x73	; 115
    1334:	71 f0       	breq	.+28     	; 0x1352 <vfprintf+0x154>
    1336:	83 35       	cpi	r24, 0x53	; 83
    1338:	09 f0       	breq	.+2      	; 0x133c <vfprintf+0x13e>
    133a:	55 c0       	rjmp	.+170    	; 0x13e6 <vfprintf+0x1e8>
    133c:	20 c0       	rjmp	.+64     	; 0x137e <vfprintf+0x180>
    133e:	f8 01       	movw	r30, r16
    1340:	80 81       	ld	r24, Z
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	0e 5f       	subi	r16, 0xFE	; 254
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	88 24       	eor	r8, r8
    134a:	83 94       	inc	r8
    134c:	91 2c       	mov	r9, r1
    134e:	53 01       	movw	r10, r6
    1350:	12 c0       	rjmp	.+36     	; 0x1376 <vfprintf+0x178>
    1352:	28 01       	movw	r4, r16
    1354:	f2 e0       	ldi	r31, 0x02	; 2
    1356:	4f 0e       	add	r4, r31
    1358:	51 1c       	adc	r5, r1
    135a:	f8 01       	movw	r30, r16
    135c:	a0 80       	ld	r10, Z
    135e:	b1 80       	ldd	r11, Z+1	; 0x01
    1360:	36 fe       	sbrs	r3, 6
    1362:	03 c0       	rjmp	.+6      	; 0x136a <vfprintf+0x16c>
    1364:	69 2d       	mov	r22, r9
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	02 c0       	rjmp	.+4      	; 0x136e <vfprintf+0x170>
    136a:	6f ef       	ldi	r22, 0xFF	; 255
    136c:	7f ef       	ldi	r23, 0xFF	; 255
    136e:	c5 01       	movw	r24, r10
    1370:	90 d2       	rcall	.+1312   	; 0x1892 <strnlen>
    1372:	4c 01       	movw	r8, r24
    1374:	82 01       	movw	r16, r4
    1376:	f3 2d       	mov	r31, r3
    1378:	ff 77       	andi	r31, 0x7F	; 127
    137a:	3f 2e       	mov	r3, r31
    137c:	15 c0       	rjmp	.+42     	; 0x13a8 <vfprintf+0x1aa>
    137e:	28 01       	movw	r4, r16
    1380:	22 e0       	ldi	r18, 0x02	; 2
    1382:	42 0e       	add	r4, r18
    1384:	51 1c       	adc	r5, r1
    1386:	f8 01       	movw	r30, r16
    1388:	a0 80       	ld	r10, Z
    138a:	b1 80       	ldd	r11, Z+1	; 0x01
    138c:	36 fe       	sbrs	r3, 6
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <vfprintf+0x198>
    1390:	69 2d       	mov	r22, r9
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	02 c0       	rjmp	.+4      	; 0x139a <vfprintf+0x19c>
    1396:	6f ef       	ldi	r22, 0xFF	; 255
    1398:	7f ef       	ldi	r23, 0xFF	; 255
    139a:	c5 01       	movw	r24, r10
    139c:	68 d2       	rcall	.+1232   	; 0x186e <strnlen_P>
    139e:	4c 01       	movw	r8, r24
    13a0:	f3 2d       	mov	r31, r3
    13a2:	f0 68       	ori	r31, 0x80	; 128
    13a4:	3f 2e       	mov	r3, r31
    13a6:	82 01       	movw	r16, r4
    13a8:	33 fc       	sbrc	r3, 3
    13aa:	19 c0       	rjmp	.+50     	; 0x13de <vfprintf+0x1e0>
    13ac:	82 2d       	mov	r24, r2
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	88 16       	cp	r8, r24
    13b2:	99 06       	cpc	r9, r25
    13b4:	a0 f4       	brcc	.+40     	; 0x13de <vfprintf+0x1e0>
    13b6:	b6 01       	movw	r22, r12
    13b8:	80 e2       	ldi	r24, 0x20	; 32
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a1 de       	rcall	.-702    	; 0x1100 <fputc>
    13be:	2a 94       	dec	r2
    13c0:	f5 cf       	rjmp	.-22     	; 0x13ac <vfprintf+0x1ae>
    13c2:	f5 01       	movw	r30, r10
    13c4:	37 fc       	sbrc	r3, 7
    13c6:	85 91       	lpm	r24, Z+
    13c8:	37 fe       	sbrs	r3, 7
    13ca:	81 91       	ld	r24, Z+
    13cc:	5f 01       	movw	r10, r30
    13ce:	b6 01       	movw	r22, r12
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	96 de       	rcall	.-724    	; 0x1100 <fputc>
    13d4:	21 10       	cpse	r2, r1
    13d6:	2a 94       	dec	r2
    13d8:	21 e0       	ldi	r18, 0x01	; 1
    13da:	82 1a       	sub	r8, r18
    13dc:	91 08       	sbc	r9, r1
    13de:	81 14       	cp	r8, r1
    13e0:	91 04       	cpc	r9, r1
    13e2:	79 f7       	brne	.-34     	; 0x13c2 <vfprintf+0x1c4>
    13e4:	e1 c0       	rjmp	.+450    	; 0x15a8 <vfprintf+0x3aa>
    13e6:	84 36       	cpi	r24, 0x64	; 100
    13e8:	11 f0       	breq	.+4      	; 0x13ee <vfprintf+0x1f0>
    13ea:	89 36       	cpi	r24, 0x69	; 105
    13ec:	39 f5       	brne	.+78     	; 0x143c <vfprintf+0x23e>
    13ee:	f8 01       	movw	r30, r16
    13f0:	37 fe       	sbrs	r3, 7
    13f2:	07 c0       	rjmp	.+14     	; 0x1402 <vfprintf+0x204>
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	0c 5f       	subi	r16, 0xFC	; 252
    13fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <vfprintf+0x214>
    1402:	60 81       	ld	r22, Z
    1404:	71 81       	ldd	r23, Z+1	; 0x01
    1406:	07 2e       	mov	r0, r23
    1408:	00 0c       	add	r0, r0
    140a:	88 0b       	sbc	r24, r24
    140c:	99 0b       	sbc	r25, r25
    140e:	0e 5f       	subi	r16, 0xFE	; 254
    1410:	1f 4f       	sbci	r17, 0xFF	; 255
    1412:	f3 2d       	mov	r31, r3
    1414:	ff 76       	andi	r31, 0x6F	; 111
    1416:	3f 2e       	mov	r3, r31
    1418:	97 ff       	sbrs	r25, 7
    141a:	09 c0       	rjmp	.+18     	; 0x142e <vfprintf+0x230>
    141c:	90 95       	com	r25
    141e:	80 95       	com	r24
    1420:	70 95       	com	r23
    1422:	61 95       	neg	r22
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	8f 4f       	sbci	r24, 0xFF	; 255
    1428:	9f 4f       	sbci	r25, 0xFF	; 255
    142a:	f0 68       	ori	r31, 0x80	; 128
    142c:	3f 2e       	mov	r3, r31
    142e:	2a e0       	ldi	r18, 0x0A	; 10
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	a3 01       	movw	r20, r6
    1434:	39 d2       	rcall	.+1138   	; 0x18a8 <__ultoa_invert>
    1436:	88 2e       	mov	r8, r24
    1438:	86 18       	sub	r8, r6
    143a:	44 c0       	rjmp	.+136    	; 0x14c4 <vfprintf+0x2c6>
    143c:	85 37       	cpi	r24, 0x75	; 117
    143e:	31 f4       	brne	.+12     	; 0x144c <vfprintf+0x24e>
    1440:	23 2d       	mov	r18, r3
    1442:	2f 7e       	andi	r18, 0xEF	; 239
    1444:	b2 2e       	mov	r11, r18
    1446:	2a e0       	ldi	r18, 0x0A	; 10
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	25 c0       	rjmp	.+74     	; 0x1496 <vfprintf+0x298>
    144c:	93 2d       	mov	r25, r3
    144e:	99 7f       	andi	r25, 0xF9	; 249
    1450:	b9 2e       	mov	r11, r25
    1452:	8f 36       	cpi	r24, 0x6F	; 111
    1454:	c1 f0       	breq	.+48     	; 0x1486 <vfprintf+0x288>
    1456:	18 f4       	brcc	.+6      	; 0x145e <vfprintf+0x260>
    1458:	88 35       	cpi	r24, 0x58	; 88
    145a:	79 f0       	breq	.+30     	; 0x147a <vfprintf+0x27c>
    145c:	ae c0       	rjmp	.+348    	; 0x15ba <vfprintf+0x3bc>
    145e:	80 37       	cpi	r24, 0x70	; 112
    1460:	19 f0       	breq	.+6      	; 0x1468 <vfprintf+0x26a>
    1462:	88 37       	cpi	r24, 0x78	; 120
    1464:	21 f0       	breq	.+8      	; 0x146e <vfprintf+0x270>
    1466:	a9 c0       	rjmp	.+338    	; 0x15ba <vfprintf+0x3bc>
    1468:	e9 2f       	mov	r30, r25
    146a:	e0 61       	ori	r30, 0x10	; 16
    146c:	be 2e       	mov	r11, r30
    146e:	b4 fe       	sbrs	r11, 4
    1470:	0d c0       	rjmp	.+26     	; 0x148c <vfprintf+0x28e>
    1472:	fb 2d       	mov	r31, r11
    1474:	f4 60       	ori	r31, 0x04	; 4
    1476:	bf 2e       	mov	r11, r31
    1478:	09 c0       	rjmp	.+18     	; 0x148c <vfprintf+0x28e>
    147a:	34 fe       	sbrs	r3, 4
    147c:	0a c0       	rjmp	.+20     	; 0x1492 <vfprintf+0x294>
    147e:	29 2f       	mov	r18, r25
    1480:	26 60       	ori	r18, 0x06	; 6
    1482:	b2 2e       	mov	r11, r18
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <vfprintf+0x294>
    1486:	28 e0       	ldi	r18, 0x08	; 8
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	05 c0       	rjmp	.+10     	; 0x1496 <vfprintf+0x298>
    148c:	20 e1       	ldi	r18, 0x10	; 16
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <vfprintf+0x298>
    1492:	20 e1       	ldi	r18, 0x10	; 16
    1494:	32 e0       	ldi	r19, 0x02	; 2
    1496:	f8 01       	movw	r30, r16
    1498:	b7 fe       	sbrs	r11, 7
    149a:	07 c0       	rjmp	.+14     	; 0x14aa <vfprintf+0x2ac>
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	0c 5f       	subi	r16, 0xFC	; 252
    14a6:	1f 4f       	sbci	r17, 0xFF	; 255
    14a8:	06 c0       	rjmp	.+12     	; 0x14b6 <vfprintf+0x2b8>
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 5f       	subi	r16, 0xFE	; 254
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	a3 01       	movw	r20, r6
    14b8:	f7 d1       	rcall	.+1006   	; 0x18a8 <__ultoa_invert>
    14ba:	88 2e       	mov	r8, r24
    14bc:	86 18       	sub	r8, r6
    14be:	fb 2d       	mov	r31, r11
    14c0:	ff 77       	andi	r31, 0x7F	; 127
    14c2:	3f 2e       	mov	r3, r31
    14c4:	36 fe       	sbrs	r3, 6
    14c6:	0d c0       	rjmp	.+26     	; 0x14e2 <vfprintf+0x2e4>
    14c8:	23 2d       	mov	r18, r3
    14ca:	2e 7f       	andi	r18, 0xFE	; 254
    14cc:	a2 2e       	mov	r10, r18
    14ce:	89 14       	cp	r8, r9
    14d0:	58 f4       	brcc	.+22     	; 0x14e8 <vfprintf+0x2ea>
    14d2:	34 fe       	sbrs	r3, 4
    14d4:	0b c0       	rjmp	.+22     	; 0x14ec <vfprintf+0x2ee>
    14d6:	32 fc       	sbrc	r3, 2
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <vfprintf+0x2ee>
    14da:	83 2d       	mov	r24, r3
    14dc:	8e 7e       	andi	r24, 0xEE	; 238
    14de:	a8 2e       	mov	r10, r24
    14e0:	05 c0       	rjmp	.+10     	; 0x14ec <vfprintf+0x2ee>
    14e2:	b8 2c       	mov	r11, r8
    14e4:	a3 2c       	mov	r10, r3
    14e6:	03 c0       	rjmp	.+6      	; 0x14ee <vfprintf+0x2f0>
    14e8:	b8 2c       	mov	r11, r8
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <vfprintf+0x2f0>
    14ec:	b9 2c       	mov	r11, r9
    14ee:	a4 fe       	sbrs	r10, 4
    14f0:	0f c0       	rjmp	.+30     	; 0x1510 <vfprintf+0x312>
    14f2:	fe 01       	movw	r30, r28
    14f4:	e8 0d       	add	r30, r8
    14f6:	f1 1d       	adc	r31, r1
    14f8:	80 81       	ld	r24, Z
    14fa:	80 33       	cpi	r24, 0x30	; 48
    14fc:	21 f4       	brne	.+8      	; 0x1506 <vfprintf+0x308>
    14fe:	9a 2d       	mov	r25, r10
    1500:	99 7e       	andi	r25, 0xE9	; 233
    1502:	a9 2e       	mov	r10, r25
    1504:	09 c0       	rjmp	.+18     	; 0x1518 <vfprintf+0x31a>
    1506:	a2 fe       	sbrs	r10, 2
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <vfprintf+0x318>
    150a:	b3 94       	inc	r11
    150c:	b3 94       	inc	r11
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <vfprintf+0x31a>
    1510:	8a 2d       	mov	r24, r10
    1512:	86 78       	andi	r24, 0x86	; 134
    1514:	09 f0       	breq	.+2      	; 0x1518 <vfprintf+0x31a>
    1516:	b3 94       	inc	r11
    1518:	a3 fc       	sbrc	r10, 3
    151a:	10 c0       	rjmp	.+32     	; 0x153c <vfprintf+0x33e>
    151c:	a0 fe       	sbrs	r10, 0
    151e:	06 c0       	rjmp	.+12     	; 0x152c <vfprintf+0x32e>
    1520:	b2 14       	cp	r11, r2
    1522:	80 f4       	brcc	.+32     	; 0x1544 <vfprintf+0x346>
    1524:	28 0c       	add	r2, r8
    1526:	92 2c       	mov	r9, r2
    1528:	9b 18       	sub	r9, r11
    152a:	0d c0       	rjmp	.+26     	; 0x1546 <vfprintf+0x348>
    152c:	b2 14       	cp	r11, r2
    152e:	58 f4       	brcc	.+22     	; 0x1546 <vfprintf+0x348>
    1530:	b6 01       	movw	r22, r12
    1532:	80 e2       	ldi	r24, 0x20	; 32
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	e4 dd       	rcall	.-1080   	; 0x1100 <fputc>
    1538:	b3 94       	inc	r11
    153a:	f8 cf       	rjmp	.-16     	; 0x152c <vfprintf+0x32e>
    153c:	b2 14       	cp	r11, r2
    153e:	18 f4       	brcc	.+6      	; 0x1546 <vfprintf+0x348>
    1540:	2b 18       	sub	r2, r11
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <vfprintf+0x34a>
    1544:	98 2c       	mov	r9, r8
    1546:	21 2c       	mov	r2, r1
    1548:	a4 fe       	sbrs	r10, 4
    154a:	0f c0       	rjmp	.+30     	; 0x156a <vfprintf+0x36c>
    154c:	b6 01       	movw	r22, r12
    154e:	80 e3       	ldi	r24, 0x30	; 48
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	d6 dd       	rcall	.-1108   	; 0x1100 <fputc>
    1554:	a2 fe       	sbrs	r10, 2
    1556:	16 c0       	rjmp	.+44     	; 0x1584 <vfprintf+0x386>
    1558:	a1 fc       	sbrc	r10, 1
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <vfprintf+0x364>
    155c:	88 e7       	ldi	r24, 0x78	; 120
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <vfprintf+0x368>
    1562:	88 e5       	ldi	r24, 0x58	; 88
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	b6 01       	movw	r22, r12
    1568:	0c c0       	rjmp	.+24     	; 0x1582 <vfprintf+0x384>
    156a:	8a 2d       	mov	r24, r10
    156c:	86 78       	andi	r24, 0x86	; 134
    156e:	51 f0       	breq	.+20     	; 0x1584 <vfprintf+0x386>
    1570:	a1 fe       	sbrs	r10, 1
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <vfprintf+0x37a>
    1574:	8b e2       	ldi	r24, 0x2B	; 43
    1576:	01 c0       	rjmp	.+2      	; 0x157a <vfprintf+0x37c>
    1578:	80 e2       	ldi	r24, 0x20	; 32
    157a:	a7 fc       	sbrc	r10, 7
    157c:	8d e2       	ldi	r24, 0x2D	; 45
    157e:	b6 01       	movw	r22, r12
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	be dd       	rcall	.-1156   	; 0x1100 <fputc>
    1584:	89 14       	cp	r8, r9
    1586:	30 f4       	brcc	.+12     	; 0x1594 <vfprintf+0x396>
    1588:	b6 01       	movw	r22, r12
    158a:	80 e3       	ldi	r24, 0x30	; 48
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	b8 dd       	rcall	.-1168   	; 0x1100 <fputc>
    1590:	9a 94       	dec	r9
    1592:	f8 cf       	rjmp	.-16     	; 0x1584 <vfprintf+0x386>
    1594:	8a 94       	dec	r8
    1596:	f3 01       	movw	r30, r6
    1598:	e8 0d       	add	r30, r8
    159a:	f1 1d       	adc	r31, r1
    159c:	80 81       	ld	r24, Z
    159e:	b6 01       	movw	r22, r12
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	ae dd       	rcall	.-1188   	; 0x1100 <fputc>
    15a4:	81 10       	cpse	r8, r1
    15a6:	f6 cf       	rjmp	.-20     	; 0x1594 <vfprintf+0x396>
    15a8:	22 20       	and	r2, r2
    15aa:	09 f4       	brne	.+2      	; 0x15ae <vfprintf+0x3b0>
    15ac:	4e ce       	rjmp	.-868    	; 0x124a <vfprintf+0x4c>
    15ae:	b6 01       	movw	r22, r12
    15b0:	80 e2       	ldi	r24, 0x20	; 32
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a5 dd       	rcall	.-1206   	; 0x1100 <fputc>
    15b6:	2a 94       	dec	r2
    15b8:	f7 cf       	rjmp	.-18     	; 0x15a8 <vfprintf+0x3aa>
    15ba:	f6 01       	movw	r30, r12
    15bc:	86 81       	ldd	r24, Z+6	; 0x06
    15be:	97 81       	ldd	r25, Z+7	; 0x07
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <vfprintf+0x3c8>
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	9f ef       	ldi	r25, 0xFF	; 255
    15c6:	2b 96       	adiw	r28, 0x0b	; 11
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	cf 90       	pop	r12
    15e2:	bf 90       	pop	r11
    15e4:	af 90       	pop	r10
    15e6:	9f 90       	pop	r9
    15e8:	8f 90       	pop	r8
    15ea:	7f 90       	pop	r7
    15ec:	6f 90       	pop	r6
    15ee:	5f 90       	pop	r5
    15f0:	4f 90       	pop	r4
    15f2:	3f 90       	pop	r3
    15f4:	2f 90       	pop	r2
    15f6:	08 95       	ret

000015f8 <calloc>:
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	86 9f       	mul	r24, r22
    1602:	80 01       	movw	r16, r0
    1604:	87 9f       	mul	r24, r23
    1606:	10 0d       	add	r17, r0
    1608:	96 9f       	mul	r25, r22
    160a:	10 0d       	add	r17, r0
    160c:	11 24       	eor	r1, r1
    160e:	c8 01       	movw	r24, r16
    1610:	0d d0       	rcall	.+26     	; 0x162c <malloc>
    1612:	ec 01       	movw	r28, r24
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	21 f0       	breq	.+8      	; 0x1620 <calloc+0x28>
    1618:	a8 01       	movw	r20, r16
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	32 d1       	rcall	.+612    	; 0x1884 <memset>
    1620:	ce 01       	movw	r24, r28
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	08 95       	ret

0000162c <malloc>:
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	82 30       	cpi	r24, 0x02	; 2
    1636:	91 05       	cpc	r25, r1
    1638:	10 f4       	brcc	.+4      	; 0x163e <malloc+0x12>
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	e0 91 75 08 	lds	r30, 0x0875	; 0x800875 <__flp>
    1642:	f0 91 76 08 	lds	r31, 0x0876	; 0x800876 <__flp+0x1>
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	a0 e0       	ldi	r26, 0x00	; 0
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	30 97       	sbiw	r30, 0x00	; 0
    1650:	19 f1       	breq	.+70     	; 0x1698 <malloc+0x6c>
    1652:	40 81       	ld	r20, Z
    1654:	51 81       	ldd	r21, Z+1	; 0x01
    1656:	02 81       	ldd	r16, Z+2	; 0x02
    1658:	13 81       	ldd	r17, Z+3	; 0x03
    165a:	48 17       	cp	r20, r24
    165c:	59 07       	cpc	r21, r25
    165e:	c8 f0       	brcs	.+50     	; 0x1692 <malloc+0x66>
    1660:	84 17       	cp	r24, r20
    1662:	95 07       	cpc	r25, r21
    1664:	69 f4       	brne	.+26     	; 0x1680 <malloc+0x54>
    1666:	10 97       	sbiw	r26, 0x00	; 0
    1668:	31 f0       	breq	.+12     	; 0x1676 <malloc+0x4a>
    166a:	12 96       	adiw	r26, 0x02	; 2
    166c:	0c 93       	st	X, r16
    166e:	12 97       	sbiw	r26, 0x02	; 2
    1670:	13 96       	adiw	r26, 0x03	; 3
    1672:	1c 93       	st	X, r17
    1674:	27 c0       	rjmp	.+78     	; 0x16c4 <malloc+0x98>
    1676:	00 93 75 08 	sts	0x0875, r16	; 0x800875 <__flp>
    167a:	10 93 76 08 	sts	0x0876, r17	; 0x800876 <__flp+0x1>
    167e:	22 c0       	rjmp	.+68     	; 0x16c4 <malloc+0x98>
    1680:	21 15       	cp	r18, r1
    1682:	31 05       	cpc	r19, r1
    1684:	19 f0       	breq	.+6      	; 0x168c <malloc+0x60>
    1686:	42 17       	cp	r20, r18
    1688:	53 07       	cpc	r21, r19
    168a:	18 f4       	brcc	.+6      	; 0x1692 <malloc+0x66>
    168c:	9a 01       	movw	r18, r20
    168e:	bd 01       	movw	r22, r26
    1690:	ef 01       	movw	r28, r30
    1692:	df 01       	movw	r26, r30
    1694:	f8 01       	movw	r30, r16
    1696:	db cf       	rjmp	.-74     	; 0x164e <malloc+0x22>
    1698:	21 15       	cp	r18, r1
    169a:	31 05       	cpc	r19, r1
    169c:	f9 f0       	breq	.+62     	; 0x16dc <malloc+0xb0>
    169e:	28 1b       	sub	r18, r24
    16a0:	39 0b       	sbc	r19, r25
    16a2:	24 30       	cpi	r18, 0x04	; 4
    16a4:	31 05       	cpc	r19, r1
    16a6:	80 f4       	brcc	.+32     	; 0x16c8 <malloc+0x9c>
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	9b 81       	ldd	r25, Y+3	; 0x03
    16ac:	61 15       	cp	r22, r1
    16ae:	71 05       	cpc	r23, r1
    16b0:	21 f0       	breq	.+8      	; 0x16ba <malloc+0x8e>
    16b2:	fb 01       	movw	r30, r22
    16b4:	93 83       	std	Z+3, r25	; 0x03
    16b6:	82 83       	std	Z+2, r24	; 0x02
    16b8:	04 c0       	rjmp	.+8      	; 0x16c2 <malloc+0x96>
    16ba:	90 93 76 08 	sts	0x0876, r25	; 0x800876 <__flp+0x1>
    16be:	80 93 75 08 	sts	0x0875, r24	; 0x800875 <__flp>
    16c2:	fe 01       	movw	r30, r28
    16c4:	32 96       	adiw	r30, 0x02	; 2
    16c6:	44 c0       	rjmp	.+136    	; 0x1750 <malloc+0x124>
    16c8:	fe 01       	movw	r30, r28
    16ca:	e2 0f       	add	r30, r18
    16cc:	f3 1f       	adc	r31, r19
    16ce:	81 93       	st	Z+, r24
    16d0:	91 93       	st	Z+, r25
    16d2:	22 50       	subi	r18, 0x02	; 2
    16d4:	31 09       	sbc	r19, r1
    16d6:	39 83       	std	Y+1, r19	; 0x01
    16d8:	28 83       	st	Y, r18
    16da:	3a c0       	rjmp	.+116    	; 0x1750 <malloc+0x124>
    16dc:	20 91 73 08 	lds	r18, 0x0873	; 0x800873 <__brkval>
    16e0:	30 91 74 08 	lds	r19, 0x0874	; 0x800874 <__brkval+0x1>
    16e4:	23 2b       	or	r18, r19
    16e6:	41 f4       	brne	.+16     	; 0x16f8 <malloc+0xcc>
    16e8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    16ec:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    16f0:	30 93 74 08 	sts	0x0874, r19	; 0x800874 <__brkval+0x1>
    16f4:	20 93 73 08 	sts	0x0873, r18	; 0x800873 <__brkval>
    16f8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    16fc:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1700:	21 15       	cp	r18, r1
    1702:	31 05       	cpc	r19, r1
    1704:	41 f4       	brne	.+16     	; 0x1716 <malloc+0xea>
    1706:	2d b7       	in	r18, 0x3d	; 61
    1708:	3e b7       	in	r19, 0x3e	; 62
    170a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    170e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1712:	24 1b       	sub	r18, r20
    1714:	35 0b       	sbc	r19, r21
    1716:	e0 91 73 08 	lds	r30, 0x0873	; 0x800873 <__brkval>
    171a:	f0 91 74 08 	lds	r31, 0x0874	; 0x800874 <__brkval+0x1>
    171e:	e2 17       	cp	r30, r18
    1720:	f3 07       	cpc	r31, r19
    1722:	a0 f4       	brcc	.+40     	; 0x174c <malloc+0x120>
    1724:	2e 1b       	sub	r18, r30
    1726:	3f 0b       	sbc	r19, r31
    1728:	28 17       	cp	r18, r24
    172a:	39 07       	cpc	r19, r25
    172c:	78 f0       	brcs	.+30     	; 0x174c <malloc+0x120>
    172e:	ac 01       	movw	r20, r24
    1730:	4e 5f       	subi	r20, 0xFE	; 254
    1732:	5f 4f       	sbci	r21, 0xFF	; 255
    1734:	24 17       	cp	r18, r20
    1736:	35 07       	cpc	r19, r21
    1738:	48 f0       	brcs	.+18     	; 0x174c <malloc+0x120>
    173a:	4e 0f       	add	r20, r30
    173c:	5f 1f       	adc	r21, r31
    173e:	50 93 74 08 	sts	0x0874, r21	; 0x800874 <__brkval+0x1>
    1742:	40 93 73 08 	sts	0x0873, r20	; 0x800873 <__brkval>
    1746:	81 93       	st	Z+, r24
    1748:	91 93       	st	Z+, r25
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <malloc+0x124>
    174c:	e0 e0       	ldi	r30, 0x00	; 0
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	cf 01       	movw	r24, r30
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	08 95       	ret

0000175c <free>:
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	09 f4       	brne	.+2      	; 0x1766 <free+0xa>
    1764:	81 c0       	rjmp	.+258    	; 0x1868 <free+0x10c>
    1766:	fc 01       	movw	r30, r24
    1768:	32 97       	sbiw	r30, 0x02	; 2
    176a:	13 82       	std	Z+3, r1	; 0x03
    176c:	12 82       	std	Z+2, r1	; 0x02
    176e:	a0 91 75 08 	lds	r26, 0x0875	; 0x800875 <__flp>
    1772:	b0 91 76 08 	lds	r27, 0x0876	; 0x800876 <__flp+0x1>
    1776:	10 97       	sbiw	r26, 0x00	; 0
    1778:	81 f4       	brne	.+32     	; 0x179a <free+0x3e>
    177a:	20 81       	ld	r18, Z
    177c:	31 81       	ldd	r19, Z+1	; 0x01
    177e:	82 0f       	add	r24, r18
    1780:	93 1f       	adc	r25, r19
    1782:	20 91 73 08 	lds	r18, 0x0873	; 0x800873 <__brkval>
    1786:	30 91 74 08 	lds	r19, 0x0874	; 0x800874 <__brkval+0x1>
    178a:	28 17       	cp	r18, r24
    178c:	39 07       	cpc	r19, r25
    178e:	51 f5       	brne	.+84     	; 0x17e4 <free+0x88>
    1790:	f0 93 74 08 	sts	0x0874, r31	; 0x800874 <__brkval+0x1>
    1794:	e0 93 73 08 	sts	0x0873, r30	; 0x800873 <__brkval>
    1798:	67 c0       	rjmp	.+206    	; 0x1868 <free+0x10c>
    179a:	ed 01       	movw	r28, r26
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	ce 17       	cp	r28, r30
    17a2:	df 07       	cpc	r29, r31
    17a4:	40 f4       	brcc	.+16     	; 0x17b6 <free+0x5a>
    17a6:	4a 81       	ldd	r20, Y+2	; 0x02
    17a8:	5b 81       	ldd	r21, Y+3	; 0x03
    17aa:	9e 01       	movw	r18, r28
    17ac:	41 15       	cp	r20, r1
    17ae:	51 05       	cpc	r21, r1
    17b0:	f1 f0       	breq	.+60     	; 0x17ee <free+0x92>
    17b2:	ea 01       	movw	r28, r20
    17b4:	f5 cf       	rjmp	.-22     	; 0x17a0 <free+0x44>
    17b6:	d3 83       	std	Z+3, r29	; 0x03
    17b8:	c2 83       	std	Z+2, r28	; 0x02
    17ba:	40 81       	ld	r20, Z
    17bc:	51 81       	ldd	r21, Z+1	; 0x01
    17be:	84 0f       	add	r24, r20
    17c0:	95 1f       	adc	r25, r21
    17c2:	c8 17       	cp	r28, r24
    17c4:	d9 07       	cpc	r29, r25
    17c6:	59 f4       	brne	.+22     	; 0x17de <free+0x82>
    17c8:	88 81       	ld	r24, Y
    17ca:	99 81       	ldd	r25, Y+1	; 0x01
    17cc:	84 0f       	add	r24, r20
    17ce:	95 1f       	adc	r25, r21
    17d0:	02 96       	adiw	r24, 0x02	; 2
    17d2:	91 83       	std	Z+1, r25	; 0x01
    17d4:	80 83       	st	Z, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	9b 81       	ldd	r25, Y+3	; 0x03
    17da:	93 83       	std	Z+3, r25	; 0x03
    17dc:	82 83       	std	Z+2, r24	; 0x02
    17de:	21 15       	cp	r18, r1
    17e0:	31 05       	cpc	r19, r1
    17e2:	29 f4       	brne	.+10     	; 0x17ee <free+0x92>
    17e4:	f0 93 76 08 	sts	0x0876, r31	; 0x800876 <__flp+0x1>
    17e8:	e0 93 75 08 	sts	0x0875, r30	; 0x800875 <__flp>
    17ec:	3d c0       	rjmp	.+122    	; 0x1868 <free+0x10c>
    17ee:	e9 01       	movw	r28, r18
    17f0:	fb 83       	std	Y+3, r31	; 0x03
    17f2:	ea 83       	std	Y+2, r30	; 0x02
    17f4:	49 91       	ld	r20, Y+
    17f6:	59 91       	ld	r21, Y+
    17f8:	c4 0f       	add	r28, r20
    17fa:	d5 1f       	adc	r29, r21
    17fc:	ec 17       	cp	r30, r28
    17fe:	fd 07       	cpc	r31, r29
    1800:	61 f4       	brne	.+24     	; 0x181a <free+0xbe>
    1802:	80 81       	ld	r24, Z
    1804:	91 81       	ldd	r25, Z+1	; 0x01
    1806:	84 0f       	add	r24, r20
    1808:	95 1f       	adc	r25, r21
    180a:	02 96       	adiw	r24, 0x02	; 2
    180c:	e9 01       	movw	r28, r18
    180e:	99 83       	std	Y+1, r25	; 0x01
    1810:	88 83       	st	Y, r24
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	9b 83       	std	Y+3, r25	; 0x03
    1818:	8a 83       	std	Y+2, r24	; 0x02
    181a:	e0 e0       	ldi	r30, 0x00	; 0
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	12 96       	adiw	r26, 0x02	; 2
    1820:	8d 91       	ld	r24, X+
    1822:	9c 91       	ld	r25, X
    1824:	13 97       	sbiw	r26, 0x03	; 3
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	19 f0       	breq	.+6      	; 0x1830 <free+0xd4>
    182a:	fd 01       	movw	r30, r26
    182c:	dc 01       	movw	r26, r24
    182e:	f7 cf       	rjmp	.-18     	; 0x181e <free+0xc2>
    1830:	8d 91       	ld	r24, X+
    1832:	9c 91       	ld	r25, X
    1834:	11 97       	sbiw	r26, 0x01	; 1
    1836:	9d 01       	movw	r18, r26
    1838:	2e 5f       	subi	r18, 0xFE	; 254
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	82 0f       	add	r24, r18
    183e:	93 1f       	adc	r25, r19
    1840:	20 91 73 08 	lds	r18, 0x0873	; 0x800873 <__brkval>
    1844:	30 91 74 08 	lds	r19, 0x0874	; 0x800874 <__brkval+0x1>
    1848:	28 17       	cp	r18, r24
    184a:	39 07       	cpc	r19, r25
    184c:	69 f4       	brne	.+26     	; 0x1868 <free+0x10c>
    184e:	30 97       	sbiw	r30, 0x00	; 0
    1850:	29 f4       	brne	.+10     	; 0x185c <free+0x100>
    1852:	10 92 76 08 	sts	0x0876, r1	; 0x800876 <__flp+0x1>
    1856:	10 92 75 08 	sts	0x0875, r1	; 0x800875 <__flp>
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <free+0x104>
    185c:	13 82       	std	Z+3, r1	; 0x03
    185e:	12 82       	std	Z+2, r1	; 0x02
    1860:	b0 93 74 08 	sts	0x0874, r27	; 0x800874 <__brkval+0x1>
    1864:	a0 93 73 08 	sts	0x0873, r26	; 0x800873 <__brkval>
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <strnlen_P>:
    186e:	fc 01       	movw	r30, r24
    1870:	05 90       	lpm	r0, Z+
    1872:	61 50       	subi	r22, 0x01	; 1
    1874:	70 40       	sbci	r23, 0x00	; 0
    1876:	01 10       	cpse	r0, r1
    1878:	d8 f7       	brcc	.-10     	; 0x1870 <strnlen_P+0x2>
    187a:	80 95       	com	r24
    187c:	90 95       	com	r25
    187e:	8e 0f       	add	r24, r30
    1880:	9f 1f       	adc	r25, r31
    1882:	08 95       	ret

00001884 <memset>:
    1884:	dc 01       	movw	r26, r24
    1886:	01 c0       	rjmp	.+2      	; 0x188a <memset+0x6>
    1888:	6d 93       	st	X+, r22
    188a:	41 50       	subi	r20, 0x01	; 1
    188c:	50 40       	sbci	r21, 0x00	; 0
    188e:	e0 f7       	brcc	.-8      	; 0x1888 <memset+0x4>
    1890:	08 95       	ret

00001892 <strnlen>:
    1892:	fc 01       	movw	r30, r24
    1894:	61 50       	subi	r22, 0x01	; 1
    1896:	70 40       	sbci	r23, 0x00	; 0
    1898:	01 90       	ld	r0, Z+
    189a:	01 10       	cpse	r0, r1
    189c:	d8 f7       	brcc	.-10     	; 0x1894 <strnlen+0x2>
    189e:	80 95       	com	r24
    18a0:	90 95       	com	r25
    18a2:	8e 0f       	add	r24, r30
    18a4:	9f 1f       	adc	r25, r31
    18a6:	08 95       	ret

000018a8 <__ultoa_invert>:
    18a8:	fa 01       	movw	r30, r20
    18aa:	aa 27       	eor	r26, r26
    18ac:	28 30       	cpi	r18, 0x08	; 8
    18ae:	51 f1       	breq	.+84     	; 0x1904 <__ultoa_invert+0x5c>
    18b0:	20 31       	cpi	r18, 0x10	; 16
    18b2:	81 f1       	breq	.+96     	; 0x1914 <__ultoa_invert+0x6c>
    18b4:	e8 94       	clt
    18b6:	6f 93       	push	r22
    18b8:	6e 7f       	andi	r22, 0xFE	; 254
    18ba:	6e 5f       	subi	r22, 0xFE	; 254
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8f 4f       	sbci	r24, 0xFF	; 255
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	af 4f       	sbci	r26, 0xFF	; 255
    18c4:	b1 e0       	ldi	r27, 0x01	; 1
    18c6:	3e d0       	rcall	.+124    	; 0x1944 <__ultoa_invert+0x9c>
    18c8:	b4 e0       	ldi	r27, 0x04	; 4
    18ca:	3c d0       	rcall	.+120    	; 0x1944 <__ultoa_invert+0x9c>
    18cc:	67 0f       	add	r22, r23
    18ce:	78 1f       	adc	r23, r24
    18d0:	89 1f       	adc	r24, r25
    18d2:	9a 1f       	adc	r25, r26
    18d4:	a1 1d       	adc	r26, r1
    18d6:	68 0f       	add	r22, r24
    18d8:	79 1f       	adc	r23, r25
    18da:	8a 1f       	adc	r24, r26
    18dc:	91 1d       	adc	r25, r1
    18de:	a1 1d       	adc	r26, r1
    18e0:	6a 0f       	add	r22, r26
    18e2:	71 1d       	adc	r23, r1
    18e4:	81 1d       	adc	r24, r1
    18e6:	91 1d       	adc	r25, r1
    18e8:	a1 1d       	adc	r26, r1
    18ea:	20 d0       	rcall	.+64     	; 0x192c <__ultoa_invert+0x84>
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <__ultoa_invert+0x48>
    18ee:	68 94       	set
    18f0:	3f 91       	pop	r19
    18f2:	2a e0       	ldi	r18, 0x0A	; 10
    18f4:	26 9f       	mul	r18, r22
    18f6:	11 24       	eor	r1, r1
    18f8:	30 19       	sub	r19, r0
    18fa:	30 5d       	subi	r19, 0xD0	; 208
    18fc:	31 93       	st	Z+, r19
    18fe:	de f6       	brtc	.-74     	; 0x18b6 <__ultoa_invert+0xe>
    1900:	cf 01       	movw	r24, r30
    1902:	08 95       	ret
    1904:	46 2f       	mov	r20, r22
    1906:	47 70       	andi	r20, 0x07	; 7
    1908:	40 5d       	subi	r20, 0xD0	; 208
    190a:	41 93       	st	Z+, r20
    190c:	b3 e0       	ldi	r27, 0x03	; 3
    190e:	0f d0       	rcall	.+30     	; 0x192e <__ultoa_invert+0x86>
    1910:	c9 f7       	brne	.-14     	; 0x1904 <__ultoa_invert+0x5c>
    1912:	f6 cf       	rjmp	.-20     	; 0x1900 <__ultoa_invert+0x58>
    1914:	46 2f       	mov	r20, r22
    1916:	4f 70       	andi	r20, 0x0F	; 15
    1918:	40 5d       	subi	r20, 0xD0	; 208
    191a:	4a 33       	cpi	r20, 0x3A	; 58
    191c:	18 f0       	brcs	.+6      	; 0x1924 <__ultoa_invert+0x7c>
    191e:	49 5d       	subi	r20, 0xD9	; 217
    1920:	31 fd       	sbrc	r19, 1
    1922:	40 52       	subi	r20, 0x20	; 32
    1924:	41 93       	st	Z+, r20
    1926:	02 d0       	rcall	.+4      	; 0x192c <__ultoa_invert+0x84>
    1928:	a9 f7       	brne	.-22     	; 0x1914 <__ultoa_invert+0x6c>
    192a:	ea cf       	rjmp	.-44     	; 0x1900 <__ultoa_invert+0x58>
    192c:	b4 e0       	ldi	r27, 0x04	; 4
    192e:	a6 95       	lsr	r26
    1930:	97 95       	ror	r25
    1932:	87 95       	ror	r24
    1934:	77 95       	ror	r23
    1936:	67 95       	ror	r22
    1938:	ba 95       	dec	r27
    193a:	c9 f7       	brne	.-14     	; 0x192e <__ultoa_invert+0x86>
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	61 05       	cpc	r22, r1
    1940:	71 05       	cpc	r23, r1
    1942:	08 95       	ret
    1944:	9b 01       	movw	r18, r22
    1946:	ac 01       	movw	r20, r24
    1948:	0a 2e       	mov	r0, r26
    194a:	06 94       	lsr	r0
    194c:	57 95       	ror	r21
    194e:	47 95       	ror	r20
    1950:	37 95       	ror	r19
    1952:	27 95       	ror	r18
    1954:	ba 95       	dec	r27
    1956:	c9 f7       	brne	.-14     	; 0x194a <__ultoa_invert+0xa2>
    1958:	62 0f       	add	r22, r18
    195a:	73 1f       	adc	r23, r19
    195c:	84 1f       	adc	r24, r20
    195e:	95 1f       	adc	r25, r21
    1960:	a0 1d       	adc	r26, r0
    1962:	08 95       	ret

00001964 <_exit>:
    1964:	f8 94       	cli

00001966 <__stop_program>:
    1966:	ff cf       	rjmp	.-2      	; 0x1966 <__stop_program>
