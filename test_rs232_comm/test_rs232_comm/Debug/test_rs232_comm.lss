
test_rs232_comm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ec  00800100  000001b2  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000836  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000705  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d1  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b9  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3e       	cpi	r26, 0xEC	; 236
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac ee       	ldi	r26, 0xEC	; 236
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3e       	cpi	r26, 0xEC	; 236
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "uart.h"
#include "space_invaders.h"



int main(void) {
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29

void inline uart_init(void) {
	//baud_rate 9600
	//ubrr_set = F_CPU/16/baud_rate-1
	
	UCSR0A = UCSR0A_INIT;
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	Bit 3 DOR0: Data OverRun
	Bit 2 UPE0: USART Parity Error
	Bit 1 U2X0: Double the USART Transmission Speed
	Bit 0 MPCM0: Multi-processor Communication Mode
	*/
	UCSR0B = UCSR0B_INIT;
  b4:	88 ed       	ldi	r24, 0xD8	; 216
  b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	Bit 3 TXEN0: Transmitter Enable 0
	Bit 2 UCSZ02: Character Size 0
	Bit 1 RXB80: Receive Data Bit 8 0
	Bit 0 TXB80: Transmit Data Bit 8 0
	*/
	UCSR0C = UCSR0C_INIT;
  ba:	8e e0       	ldi	r24, 0x0E	; 14
  bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	Bit 2 UCSZ01 / UDORD0: USART Character Size / Data Order
	Bit 1 UCSZ00 / UCPHA0: USART Character Size / Clock Phase
	Bit 0 UCPOL0: Clock Polarity 0
	*/
	//UBRR0L = 0b00000001;
	UBRR0L = BAUD_9600_8MHZ;
  c0:	83 e3       	ldi	r24, 0x33	; 51
  c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//UBRR0L = 3;
	/*
	Bits 7:0 UBRR0[7:0]: USART Baud Rate 0
	*/
	//UBRR0H = 0b00000000;
	UBRR0H = 0;
  c6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	
	uart_init();
	
	sei();
  ca:	78 94       	sei
	
	for(int k; k < 200; k++) {
		uart_send('\n');
	}*/
	
	int i = strlen(screen);
  cc:	e0 e0       	ldi	r30, 0x00	; 0
  ce:	f1 e0       	ldi	r31, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	00 20       	and	r0, r0
  d4:	e9 f7       	brne	.-6      	; 0xd0 <main+0x2a>
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	9f 01       	movw	r18, r30
  da:	20 50       	subi	r18, 0x00	; 0
  dc:	31 40       	sbci	r19, 0x01	; 1
	int j;
	for(; i > 0; i--) {
  de:	12 16       	cp	r1, r18
  e0:	13 06       	cpc	r1, r19
  e2:	bc f4       	brge	.+46     	; 0x112 <main+0x6c>
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	20 50       	subi	r18, 0x00	; 0
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
	Bits 7:0 TXB / RXB[7:0]: USART Transmit / Receive Data Buffer
	*/
}

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
  ec:	01 ec       	ldi	r16, 0xC1	; 193
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	68 e5       	ldi	r22, 0x58	; 88
	while (UCSR0B&(1>>TXCIE0)) {}
	while (!(UCSR0A & (1<<UDRE0))) {}
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data_buffer;
  f6:	46 ec       	ldi	r20, 0xC6	; 198
  f8:	50 e0       	ldi	r21, 0x00	; 0
		
		uart_send(screen[j]);
  fa:	9d 91       	ld	r25, X+
	Bits 7:0 TXB / RXB[7:0]: USART Transmit / Receive Data Buffer
	*/
}

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
  fc:	e8 01       	movw	r28, r16
  fe:	68 83       	st	Y, r22
	while (UCSR0B&(1>>TXCIE0)) {}
 100:	88 81       	ld	r24, Y
	while (!(UCSR0A & (1<<UDRE0))) {}
 102:	80 81       	ld	r24, Z
 104:	85 ff       	sbrs	r24, 5
 106:	fd cf       	rjmp	.-6      	; 0x102 <main+0x5c>
	UDR0 = data_buffer;
 108:	ea 01       	movw	r28, r20
 10a:	98 83       	st	Y, r25
		uart_send('\n');
	}*/
	
	int i = strlen(screen);
	int j;
	for(; i > 0; i--) {
 10c:	a2 17       	cp	r26, r18
 10e:	b3 07       	cpc	r27, r19
 110:	a1 f7       	brne	.-24     	; 0xfa <main+0x54>
	test_1();
	/*
    while (1) {
    }*/
	return 0;
}
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <__vector_20>:

ISR(USART_TX_vect, ISR_BLOCK) {
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	return value;
}

//interrupts routines
void inline transmission_complete() {
	UCSR0B = ~(1<<TXCIE0);
 130:	8f eb       	ldi	r24, 0xBF	; 191
 132:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (UCSR0B&(1<<TXCIE0));
 136:	e1 ec       	ldi	r30, 0xC1	; 193
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	86 fd       	sbrc	r24, 6
 13e:	fd cf       	rjmp	.-6      	; 0x13a <__vector_20+0x1a>
	transmission_complete();
	//reti();
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_18>:

ISR(USART_RX_vect, ISR_BLOCK) {
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	return value;
}

//interrupts routines
void inline transmission_complete() {
	UCSR0B = ~(1<<TXCIE0);
 164:	8f eb       	ldi	r24, 0xBF	; 191
 166:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while (UCSR0B&(1<<TXCIE0));
 16a:	e1 ec       	ldi	r30, 0xC1	; 193
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	86 fd       	sbrc	r24, 6
 172:	fd cf       	rjmp	.-6      	; 0x16e <__vector_18+0x1e>
	//keyboard_mode();
	transmission_complete();
	char r = UDR0;
 174:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(r == "a") {
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	8a 5e       	subi	r24, 0xEA	; 234
 17c:	92 40       	sbci	r25, 0x02	; 2
 17e:	69 f4       	brne	.+26     	; 0x19a <__vector_18+0x4a>
	Bits 7:0 TXB / RXB[7:0]: USART Transmit / Receive Data Buffer
	*/
}

void inline uart_send(char data_buffer) {
	UCSR0B = UCSR0B_SEND;
 180:	e1 ec       	ldi	r30, 0xC1	; 193
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	88 e5       	ldi	r24, 0x58	; 88
 186:	80 83       	st	Z, r24
	while (UCSR0B&(1>>TXCIE0)) {}
 188:	80 81       	ld	r24, Z
	while (!(UCSR0A & (1<<UDRE0))) {}
 18a:	e0 ec       	ldi	r30, 0xC0	; 192
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	85 ff       	sbrs	r24, 5
 192:	fd cf       	rjmp	.-6      	; 0x18e <__vector_18+0x3e>
	UDR0 = data_buffer;
 194:	8a e0       	ldi	r24, 0x0A	; 10
 196:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		uart_send(0x0A);
	}
	//reti();
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
