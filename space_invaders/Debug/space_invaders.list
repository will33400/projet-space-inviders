
space_invaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004394  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  0800455c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          00009b90  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20009c04  20009c04  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008372  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000017cc  00000000  00000000  00028416  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000998  00000000  00000000  00029be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000980  00000000  00000000  0002a580  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003ecd  00000000  00000000  0002af00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003243  00000000  00000000  0002edcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00032010  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000026ac  00000000  00000000  0003208c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00034738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004504 	.word	0x08004504

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08004504 	.word	0x08004504

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <DAC_SetChannel1Data+0x34>)
 800029e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	3308      	adds	r3, #8
 80002a8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	461a      	mov	r2, r3
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	6013      	str	r3, [r2, #0]
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40007400 	.word	0x40007400

080002c4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <DMA_Init+0xac>)
 80002dc:	4013      	ands	r3, r2
 80002de:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002fa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000306:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800030c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000312:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000318:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4313      	orrs	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 0307 	bic.w	r3, r3, #7
 8000332:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4313      	orrs	r3, r2
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	691a      	ldr	r2, [r3, #16]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	60da      	str	r2, [r3, #12]
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	f01c803f 	.word	0xf01c803f

08000374 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f043 0201 	orr.w	r2, r3, #1
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000392:	e005      	b.n	80003a0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f023 0201 	bic.w	r2, r3, #1
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	601a      	str	r2, [r3, #0]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e001      	b.n	80003ce <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003dc:	b480      	push	{r7}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003e6:	2300      	movs	r3, #0
 80003e8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a15      	ldr	r2, [pc, #84]	; (8000448 <DMA_GetFlagStatus+0x6c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d802      	bhi.n	80003fc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <DMA_GetFlagStatus+0x70>)
 80003f8:	613b      	str	r3, [r7, #16]
 80003fa:	e001      	b.n	8000400 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <DMA_GetFlagStatus+0x74>)
 80003fe:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000406:	2b00      	cmp	r3, #0
 8000408:	d003      	beq.n	8000412 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	e002      	b.n	8000418 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800041e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000422:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	4013      	ands	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800042e:	2301      	movs	r3, #1
 8000430:	75fb      	strb	r3, [r7, #23]
 8000432:	e001      	b.n	8000438 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000438:	7dfb      	ldrb	r3, [r7, #23]
}
 800043a:	4618      	mov	r0, r3
 800043c:	371c      	adds	r7, #28
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	4002640f 	.word	0x4002640f
 800044c:	40026000 	.word	0x40026000
 8000450:	40026400 	.word	0x40026400

08000454 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <DMA_ClearFlag+0x50>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d802      	bhi.n	800046c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <DMA_ClearFlag+0x54>)
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e001      	b.n	8000470 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <DMA_ClearFlag+0x58>)
 800046e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d007      	beq.n	800048a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000480:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000488:	e006      	b.n	8000498 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000490:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	6093      	str	r3, [r2, #8]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	4002640f 	.word	0x4002640f
 80004a8:	40026000 	.word	0x40026000
 80004ac:	40026400 	.word	0x40026400

080004b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	e076      	b.n	80005ba <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004cc:	2201      	movs	r2, #1
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d165      	bne.n	80005b4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2103      	movs	r1, #3
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	401a      	ands	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	4619      	mov	r1, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d003      	beq.n	8000526 <GPIO_Init+0x76>
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d12e      	bne.n	8000584 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2103      	movs	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	401a      	ands	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	4619      	mov	r1, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	b29b      	uxth	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	2301      	movs	r3, #1
 8000560:	408b      	lsls	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	401a      	ands	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	7992      	ldrb	r2, [r2, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	b292      	uxth	r2, r2
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	b292      	uxth	r2, r2
 800057e:	431a      	orrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68da      	ldr	r2, [r3, #12]
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	b29b      	uxth	r3, r3
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	401a      	ands	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	79db      	ldrb	r3, [r3, #7]
 80005a4:	4619      	mov	r1, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d985      	bls.n	80004cc <GPIO_Init+0x1c>
    }
  }
}
 80005c0:	bf00      	nop
 80005c2:	371c      	adds	r7, #28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
 80005d8:	4613      	mov	r3, r2
 80005da:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005e4:	787a      	ldrb	r2, [r7, #1]
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	f003 0307 	and.w	r3, r3, #7
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	08db      	lsrs	r3, r3, #3
 8000600:	b29b      	uxth	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3208      	adds	r2, #8
 8000608:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	210f      	movs	r1, #15
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43db      	mvns	r3, r3
 800061c:	ea02 0103 	and.w	r1, r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f100 0208 	add.w	r2, r0, #8
 8000626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	08db      	lsrs	r3, r3, #3
 800062e:	b29b      	uxth	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3208      	adds	r2, #8
 8000636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4313      	orrs	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000640:	887b      	ldrh	r3, [r7, #2]
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	b29b      	uxth	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3208      	adds	r2, #8
 800064c:	68b9      	ldr	r1, [r7, #8]
 800064e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000660:	b480      	push	{r7}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	2302      	movs	r3, #2
 800067e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000680:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f003 030c 	and.w	r3, r3, #12
 8000688:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d007      	beq.n	80006a0 <RCC_GetClocksFreq+0x40>
 8000690:	2b08      	cmp	r3, #8
 8000692:	d009      	beq.n	80006a8 <RCC_GetClocksFreq+0x48>
 8000694:	2b00      	cmp	r3, #0
 8000696:	d13d      	bne.n	8000714 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a42      	ldr	r2, [pc, #264]	; (80007a4 <RCC_GetClocksFreq+0x144>)
 800069c:	601a      	str	r2, [r3, #0]
      break;
 800069e:	e03d      	b.n	800071c <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a41      	ldr	r2, [pc, #260]	; (80007a8 <RCC_GetClocksFreq+0x148>)
 80006a4:	601a      	str	r2, [r3, #0]
      break;
 80006a6:	e039      	b.n	800071c <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006a8:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	0d9b      	lsrs	r3, r3, #22
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006b4:	4b3a      	ldr	r3, [pc, #232]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006bc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00c      	beq.n	80006de <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006c4:	4a38      	ldr	r2, [pc, #224]	; (80007a8 <RCC_GetClocksFreq+0x148>)
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	4a34      	ldr	r2, [pc, #208]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006ce:	6852      	ldr	r2, [r2, #4]
 80006d0:	0992      	lsrs	r2, r2, #6
 80006d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006d6:	fb02 f303 	mul.w	r3, r2, r3
 80006da:	61fb      	str	r3, [r7, #28]
 80006dc:	e00b      	b.n	80006f6 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006de:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <RCC_GetClocksFreq+0x144>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e6:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006e8:	6852      	ldr	r2, [r2, #4]
 80006ea:	0992      	lsrs	r2, r2, #6
 80006ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006f0:	fb02 f303 	mul.w	r3, r2, r3
 80006f4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	0c1b      	lsrs	r3, r3, #16
 80006fc:	f003 0303 	and.w	r3, r3, #3
 8000700:	3301      	adds	r3, #1
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	fbb2 f2f3 	udiv	r2, r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
      break;
 8000712:	e003      	b.n	800071c <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <RCC_GetClocksFreq+0x144>)
 8000718:	601a      	str	r2, [r3, #0]
      break;
 800071a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000724:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	091b      	lsrs	r3, r3, #4
 800072a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800072c:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <RCC_GetClocksFreq+0x14c>)
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	40da      	lsrs	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800074c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	0a9b      	lsrs	r3, r3, #10
 8000752:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000754:	4a15      	ldr	r2, [pc, #84]	; (80007ac <RCC_GetClocksFreq+0x14c>)
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	40da      	lsrs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000774:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	0b5b      	lsrs	r3, r3, #13
 800077a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800077c:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <RCC_GetClocksFreq+0x14c>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	40da      	lsrs	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	60da      	str	r2, [r3, #12]
}
 8000794:	bf00      	nop
 8000796:	3724      	adds	r7, #36	; 0x24
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40023800 	.word	0x40023800
 80007a4:	00f42400 	.word	0x00f42400
 80007a8:	007a1200 	.word	0x007a1200
 80007ac:	20000000 	.word	0x20000000

080007b0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d006      	beq.n	80007d0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007c2:	490a      	ldr	r1, [pc, #40]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007ce:	e006      	b.n	80007de <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	43db      	mvns	r3, r3
 80007da:	4013      	ands	r3, r2
 80007dc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000802:	490a      	ldr	r1, [pc, #40]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800080e:	e006      	b.n	800081e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000810:	4906      	ldr	r1, [pc, #24]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	43db      	mvns	r3, r3
 800081a:	4013      	ands	r3, r2
 800081c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	887a      	ldrh	r2, [r7, #2]
 8000840:	819a      	strh	r2, [r3, #12]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800084e:	b480      	push	{r7}
 8000850:	b085      	sub	sp, #20
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	460b      	mov	r3, r1
 8000858:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	891b      	ldrh	r3, [r3, #8]
 8000862:	b29a      	uxth	r2, r3
 8000864:	887b      	ldrh	r3, [r7, #2]
 8000866:	4013      	ands	r3, r2
 8000868:	b29b      	uxth	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e001      	b.n	8000878 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	8a1b      	ldrh	r3, [r3, #16]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	88db      	ldrh	r3, [r3, #6]
 80008b6:	461a      	mov	r2, r3
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	4313      	orrs	r3, r2
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	899b      	ldrh	r3, [r3, #12]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80008d4:	f023 030c 	bic.w	r3, r3, #12
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	889a      	ldrh	r2, [r3, #4]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	891b      	ldrh	r3, [r3, #8]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f2:	4313      	orrs	r3, r2
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	8a9b      	ldrh	r3, [r3, #20]
 8000902:	b29b      	uxth	r3, r3
 8000904:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800090c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	899b      	ldrh	r3, [r3, #12]
 8000912:	461a      	mov	r2, r3
 8000914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000916:	4313      	orrs	r3, r2
 8000918:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	b29a      	uxth	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe9a 	bl	8000660 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a30      	ldr	r2, [pc, #192]	; (80009f0 <USART_Init+0x168>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d003      	beq.n	800093c <USART_Init+0xb4>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <USART_Init+0x16c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d102      	bne.n	8000942 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	623b      	str	r3, [r7, #32]
 8000940:	e001      	b.n	8000946 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	899b      	ldrh	r3, [r3, #12]
 800094a:	b29b      	uxth	r3, r3
 800094c:	b21b      	sxth	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	da0c      	bge.n	800096c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000952:	6a3a      	ldr	r2, [r7, #32]
 8000954:	4613      	mov	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	009a      	lsls	r2, r3, #2
 800095c:	441a      	add	r2, r3
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fbb2 f3f3 	udiv	r3, r2, r3
 8000968:	61fb      	str	r3, [r7, #28]
 800096a:	e00b      	b.n	8000984 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800096c:	6a3a      	ldr	r2, [r7, #32]
 800096e:	4613      	mov	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	009a      	lsls	r2, r3, #2
 8000976:	441a      	add	r2, r3
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <USART_Init+0x170>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	095b      	lsrs	r3, r3, #5
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	091b      	lsrs	r3, r3, #4
 8000996:	2264      	movs	r2, #100	; 0x64
 8000998:	fb02 f303 	mul.w	r3, r2, r3
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	899b      	ldrh	r3, [r3, #12]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da0c      	bge.n	80009c8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	3332      	adds	r3, #50	; 0x32
 80009b4:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <USART_Init+0x170>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	f003 0307 	and.w	r3, r3, #7
 80009c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c2:	4313      	orrs	r3, r2
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
 80009c6:	e00b      	b.n	80009e0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	3332      	adds	r3, #50	; 0x32
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <USART_Init+0x170>)
 80009d0:	fba2 2303 	umull	r2, r3, r2, r3
 80009d4:	095b      	lsrs	r3, r3, #5
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009dc:	4313      	orrs	r3, r2
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	811a      	strh	r2, [r3, #8]
}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40011000 	.word	0x40011000
 80009f4:	40011400 	.word	0x40011400
 80009f8:	51eb851f 	.word	0x51eb851f

080009fc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d008      	beq.n	8000a20 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	899b      	ldrh	r3, [r3, #12]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a1e:	e007      	b.n	8000a30 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	899b      	ldrh	r3, [r3, #12]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	819a      	strh	r2, [r3, #12]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	095b      	lsrs	r3, r3, #5
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	f003 031f 	and.w	r3, r3, #31
 8000a70:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000a72:	2201      	movs	r2, #1
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d103      	bne.n	8000a8a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	330c      	adds	r3, #12
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e009      	b.n	8000a9e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d103      	bne.n	8000a98 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3310      	adds	r3, #16
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	e002      	b.n	8000a9e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3314      	adds	r3, #20
 8000a9c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000a9e:	787b      	ldrb	r3, [r7, #1]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	6811      	ldr	r1, [r2, #0]
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000ab0:	e006      	b.n	8000ac0 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	6811      	ldr	r1, [r2, #0]
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	43d2      	mvns	r2, r2
 8000abc:	400a      	ands	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ae8:	887b      	ldrh	r3, [r7, #2]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	095b      	lsrs	r3, r3, #5
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	f003 031f 	and.w	r3, r3, #31
 8000af8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000afa:	2201      	movs	r2, #1
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d107      	bne.n	8000b1a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	899b      	ldrh	r3, [r3, #12]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4013      	ands	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e011      	b.n	8000b3e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d107      	bne.n	8000b30 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	8a1b      	ldrh	r3, [r3, #16]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	e006      	b.n	8000b3e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	8a9b      	ldrh	r3, [r3, #20]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000b46:	2201      	movs	r2, #1
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d005      	beq.n	8000b70 <USART_GetITStatus+0xa4>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	74fb      	strb	r3, [r7, #19]
 8000b6e:	e001      	b.n	8000b74 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000b74:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	371c      	adds	r7, #28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */

#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000b88:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <Audio_MAL_IRQHandler+0xec>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4610      	mov	r0, r2
 8000b94:	f7ff fc22 	bl	80003dc <DMA_GetFlagStatus>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d064      	beq.n	8000c68 <Audio_MAL_IRQHandler+0xe4>
  {
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000b9e:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d04c      	beq.n	8000c40 <Audio_MAL_IRQHandler+0xbc>
    {
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000ba6:	bf00      	nop
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fbfd 	bl	80003ac <DMA_GetCmdStatus>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f7      	bne.n	8000ba8 <Audio_MAL_IRQHandler+0x24>
      {}

      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 8000bb8:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <Audio_MAL_IRQHandler+0xec>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	f7ff fc46 	bl	8000454 <DMA_ClearFlag>

      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <Audio_MAL_IRQHandler+0xf4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <Audio_MAL_IRQHandler+0xf8>)
 8000bd0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	bf28      	it	cs
 8000bde:	4613      	movcs	r3, r2
 8000be0:	4a26      	ldr	r2, [pc, #152]	; (8000c7c <Audio_MAL_IRQHandler+0xf8>)
 8000be2:	6113      	str	r3, [r2, #16]

      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4924      	ldr	r1, [pc, #144]	; (8000c7c <Audio_MAL_IRQHandler+0xf8>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fb6a 	bl	80002c4 <DMA_Init>

      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fbbc 	bl	8000374 <DMA_Cmd>

      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <Audio_MAL_IRQHandler+0xf4>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c08:	d203      	bcs.n	8000c12 <Audio_MAL_IRQHandler+0x8e>
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	e000      	b.n	8000c14 <Audio_MAL_IRQHandler+0x90>
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <Audio_MAL_IRQHandler+0xfc>)
 8000c14:	4413      	add	r3, r2
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <Audio_MAL_IRQHandler+0xf4>)
 8000c18:	6013      	str	r3, [r2, #0]

      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c26:	428b      	cmp	r3, r1
 8000c28:	bf28      	it	cs
 8000c2a:	460b      	movcs	r3, r1
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000c30:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2101      	movs	r1, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fb9b 	bl	8000374 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000c3e:	e013      	b.n	8000c68 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fb94 	bl	8000374 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <Audio_MAL_IRQHandler+0xec>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	4610      	mov	r0, r2
 8000c58:	f7ff fbfc 	bl	8000454 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <Audio_MAL_IRQHandler+0xf4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f81a 	bl	8000c9c <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000018 	.word	0x20000018
 8000c70:	2000001c 	.word	0x2000001c
 8000c74:	20000010 	.word	0x20000010
 8000c78:	20009b7c 	.word	0x20009b7c
 8000c7c:	20009bbc 	.word	0x20009bbc
 8000c80:	0001fffe 	.word	0x0001fffe

08000c84 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000c88:	f7ff ff7c 	bl	8000b84 <Audio_MAL_IRQHandler>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000c94:	f7ff ff76 	bl	8000b84 <Audio_MAL_IRQHandler>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 8000ca6:	bf00      	nop
}
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void) {
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 8000cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000cc8:	2102      	movs	r1, #2
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <SPI3_IRQHandler+0x3c>)
 8000ccc:	f7ff fdbf 	bl	800084e <SPI_I2S_GetFlagStatus>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d011      	beq.n	8000cfa <SPI3_IRQHandler+0x36>
  {
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <SPI3_IRQHandler+0x40>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d106      	bne.n	8000cec <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack());
 8000cde:	f7ff ffe8 	bl	8000cb2 <EVAL_AUDIO_GetSampleCallBack>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2004      	movs	r0, #4
 8000ce8:	f7ff fad0 	bl	800028c <DAC_SetChannel1Data>
    }

    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack());
 8000cec:	f7ff ffe1 	bl	8000cb2 <EVAL_AUDIO_GetSampleCallBack>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <SPI3_IRQHandler+0x3c>)
 8000cf6:	f7ff fd9b 	bl	8000830 <SPI_I2S_SendData>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40003c00 	.word	0x40003c00
 8000d04:	20000014 	.word	0x20000014

08000d08 <LFSR_set>:
 *      Author: lucasadam33400
 */

#include "alea.h"

void LFSR_set(uint8_t val) {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	LFSR = val;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <LFSR_set+0x1c>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	7013      	strb	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	20009bf8 	.word	0x20009bf8

08000d28 <LFSR_get>:

uint8_t LFSR_get(void) {
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
	return LFSR;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <LFSR_get+0x14>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20009bf8 	.word	0x20009bf8

08000d40 <LFSR_update>:

void LFSR_update(void) {
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
	LFSR >>= 1;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <LFSR_update+0x50>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	085b      	lsrs	r3, r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <LFSR_update+0x50>)
 8000d4e:	701a      	strb	r2, [r3, #0]
	LFSR |= (((LFSR >> 1) & 1) ^ ((LFSR >> 3) & 1) ^ ((LFSR >> 5) & 1)) << 7;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <LFSR_update+0x50>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	085b      	lsrs	r3, r3, #1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <LFSR_update+0x50>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	4053      	eors	r3, r2
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <LFSR_update+0x50>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	095b      	lsrs	r3, r3, #5
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	4053      	eors	r3, r2
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	01db      	lsls	r3, r3, #7
 8000d72:	b25a      	sxtb	r2, r3
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <LFSR_update+0x50>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <LFSR_update+0x50>)
 8000d82:	701a      	strb	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20009bf8 	.word	0x20009bf8

08000d94 <delay_>:
 *      Author: lucasadam33400
 */

#include <stdint.h>

void delay_(uint32_t val) {
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = val * 10000; i > 0; i--)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	e002      	b.n	8000db0 <delay_+0x1c>
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f9      	bne.n	8000daa <delay_+0x16>
		;
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <main>:
#include "space_invaders.h"
#include "timer.h"
#include "delay.h"
#include "alea.h"

int main(void) {
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
	LFSR_set(128);
 8000dc6:	2080      	movs	r0, #128	; 0x80
 8000dc8:	f7ff ff9e 	bl	8000d08 <LFSR_set>
	init_screen();
 8000dcc:	f001 f844 	bl	8001e58 <init_screen>
	charge_level(MENU);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f002 f877 	bl	8002ec4 <charge_level>

	while (1) {
		charge_levels_events();
 8000dd6:	f003 f97f 	bl	80040d8 <charge_levels_events>
 8000dda:	e7fc      	b.n	8000dd6 <main+0x14>

08000ddc <serial_init>:

static volatile unsigned char last_char_read = 1;
static volatile char last_char;

void serial_init(const uint32_t baudrate)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Use USART2 with PA2 and PA3 */

	/* Enable clock for GPIOA and USART */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000de4:	2101      	movs	r1, #1
 8000de6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000dea:	f7ff fd01 	bl	80007f0 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000dee:	2101      	movs	r1, #1
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff fcdd 	bl	80007b0 <RCC_AHB1PeriphClockCmd>

	/* Init GPIOA 2 and 3 as alternate functions */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000df6:	230c      	movs	r3, #12
 8000df8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	4619      	mov	r1, r3
 8000e18:	481c      	ldr	r0, [pc, #112]	; (8000e8c <serial_init+0xb0>)
 8000e1a:	f7ff fb49 	bl	80004b0 <GPIO_Init>

	/* Connect TX and RX pints to their alternate function pins */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8000e1e:	2207      	movs	r2, #7
 8000e20:	2102      	movs	r1, #2
 8000e22:	481a      	ldr	r0, [pc, #104]	; (8000e8c <serial_init+0xb0>)
 8000e24:	f7ff fbd2 	bl	80005cc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000e28:	2207      	movs	r2, #7
 8000e2a:	2103      	movs	r1, #3
 8000e2c:	4817      	ldr	r0, [pc, #92]	; (8000e8c <serial_init+0xb0>)
 8000e2e:	f7ff fbcd 	bl	80005cc <GPIO_PinAFConfig>

	/* Configure USART parameters */
	USART_InitStruct.USART_BaudRate = baudrate;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000e36:	2300      	movs	r3, #0
 8000e38:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	837b      	strh	r3, [r7, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000e46:	2300      	movs	r3, #0
 8000e48:	82bb      	strh	r3, [r7, #20]
	USART_Init(USART2, &USART_InitStruct);
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <serial_init+0xb4>)
 8000e52:	f7ff fd19 	bl	8000888 <USART_Init>

	/* Configure interruption */
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f240 5125 	movw	r1, #1317	; 0x525
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <serial_init+0xb4>)
 8000e5e:	f7ff fded 	bl	8000a3c <USART_ITConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000e62:	2326      	movs	r3, #38	; 0x26
 8000e64:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff f9a6 	bl	80001c8 <NVIC_Init>

	USART_Cmd(USART2, ENABLE);
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <serial_init+0xb4>)
 8000e80:	f7ff fdbc 	bl	80009fc <USART_Cmd>
}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40004400 	.word	0x40004400

08000e94 <serial_putchar>:

void serial_putchar(const volatile char c)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	/* Check USART */
	if ((USART2->CR1 & USART_CR1_UE))
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <serial_putchar+0x50>)
 8000ea0:	899b      	ldrh	r3, [r3, #12]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d014      	beq.n	8000ed6 <serial_putchar+0x42>
	{
		/* Wait to be ready, buffer empty */
		while (!(USART2->SR & USART_FLAG_TXE))
 8000eac:	bf00      	nop
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <serial_putchar+0x50>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f8      	beq.n	8000eae <serial_putchar+0x1a>
			;
		/* Send data */
		USART2->DR = (uint16_t) (c & 0x01FF);
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <serial_putchar+0x50>)
 8000ebe:	79fa      	ldrb	r2, [r7, #7]
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	809a      	strh	r2, [r3, #4]
		/* Wait to be ready, buffer empty */
		while (!(USART2->SR & USART_FLAG_TXE))
 8000ec6:	bf00      	nop
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <serial_putchar+0x50>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f8      	beq.n	8000ec8 <serial_putchar+0x34>
			;
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <serial_get_last_char>:
	while (*s)
		serial_putchar(*s++);
}

signed char serial_get_last_char(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	if (last_char_read)
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <serial_get_last_char+0x2c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <serial_get_last_char+0x14>
		return -1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e006      	b.n	8000f0a <serial_get_last_char+0x22>
	else
	{
		last_char_read = 1;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <serial_get_last_char+0x2c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
		return last_char;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <serial_get_last_char+0x30>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	b25b      	sxtb	r3, r3
	}
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000020 	.word	0x20000020
 8000f18:	20000090 	.word	0x20000090

08000f1c <serial_input_not_empty>:

/* interruption management */

static int32_t serial_input_not_empty(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	return USART_GetITStatus(USART2, USART_IT_RXNE);
 8000f20:	f240 5125 	movw	r1, #1317	; 0x525
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <serial_input_not_empty+0x14>)
 8000f26:	f7ff fdd1 	bl	8000acc <USART_GetITStatus>
 8000f2a:	4603      	mov	r3, r0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40004400 	.word	0x40004400

08000f34 <serial_input_character>:

static char serial_input_character(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	return USART2->DR;
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <serial_input_character+0x18>)
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40004400 	.word	0x40004400

08000f50 <USART2_IRQHandler>:

#define serial_it_handler USART2_IRQHandler
void serial_it_handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	if (serial_input_not_empty())
 8000f54:	f7ff ffe2 	bl	8000f1c <serial_input_not_empty>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d008      	beq.n	8000f70 <USART2_IRQHandler+0x20>
	{
		last_char = serial_input_character();
 8000f5e:	f7ff ffe9 	bl	8000f34 <serial_input_character>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <USART2_IRQHandler+0x24>)
 8000f68:	701a      	strb	r2, [r3, #0]
		last_char_read = 0;
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <USART2_IRQHandler+0x28>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	}
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000090 	.word	0x20000090
 8000f78:	20000020 	.word	0x20000020

08000f7c <destroy_hitbox>:
static flying_object_s temp_down;

uint32_t highscore;
uint32_t highscore_temp;

void destroy_hitbox(object_hitbox *object) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	vt100_move(object->x, object->y);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	789a      	ldrb	r2, [r3, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	78db      	ldrb	r3, [r3, #3]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f003 f9ea 	bl	8004368 <vt100_move>
	serial_putchar(' ');
 8000f94:	2020      	movs	r0, #32
 8000f96:	f7ff ff7d 	bl	8000e94 <serial_putchar>
	object->exist = FALSE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	711a      	strb	r2, [r3, #4]
	object->x = 0;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	709a      	strb	r2, [r3, #2]
	object->y = 0;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	70da      	strb	r2, [r3, #3]
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <init_flying_object>:

void init_flying_object(flying_object_s *object_struct, object_size size,
		object _object, char sprites[OBJECT_HEIGHT_L][OBJECT_WIDTH_L],
		uint8_t life) {
 8000fb4:	b490      	push	{r4, r7}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	72fb      	strb	r3, [r7, #11]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	72bb      	strb	r3, [r7, #10]

	switch (size) {
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d04e      	beq.n	800106a <init_flying_object+0xb6>
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	f000 809b 	beq.w	8001108 <init_flying_object+0x154>
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f040 80e7 	bne.w	80011a6 <init_flying_object+0x1f2>
	case SMALL:
		object_struct->size = SMALL;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	709a      	strb	r2, [r3, #2]
		for (int i = 0; i < OBJECT_HEIGHT_S; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe2:	e03e      	b.n	8001062 <init_flying_object+0xae>
			for (int j = 0; j < OBJECT_WIDTH_S; j++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
 8000fe8:	e035      	b.n	8001056 <init_flying_object+0xa2>
				object_struct->_hitbox_array.hitbox_s[i][j].appearance =
						sprites[i][j];
 8000fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fec:	4613      	mov	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	441a      	add	r2, r3
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781c      	ldrb	r4, [r3, #0]
				object_struct->_hitbox_array.hitbox_s[i][j].appearance =
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001002:	461a      	mov	r2, r3
 8001004:	0092      	lsls	r2, r2, #2
 8001006:	441a      	add	r2, r3
 8001008:	460b      	mov	r3, r1
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	1a5b      	subs	r3, r3, r1
 800100e:	4413      	add	r3, r2
 8001010:	4403      	add	r3, r0
 8001012:	3303      	adds	r3, #3
 8001014:	4622      	mov	r2, r4
 8001016:	701a      	strb	r2, [r3, #0]
				object_struct->_hitbox_array.hitbox_s[i][j]._object = _object;
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800101e:	461a      	mov	r2, r3
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	441a      	add	r2, r3
 8001024:	460b      	mov	r3, r1
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	1a5b      	subs	r3, r3, r1
 800102a:	4413      	add	r3, r2
 800102c:	4403      	add	r3, r0
 800102e:	3304      	adds	r3, #4
 8001030:	7aba      	ldrb	r2, [r7, #10]
 8001032:	701a      	strb	r2, [r3, #0]
				object_struct->_hitbox_array.hitbox_s[i][j].exist = TRUE;
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800103a:	461a      	mov	r2, r3
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	441a      	add	r2, r3
 8001040:	460b      	mov	r3, r1
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	4413      	add	r3, r2
 8001048:	4403      	add	r3, r0
 800104a:	3307      	adds	r3, #7
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < OBJECT_WIDTH_S; j++) {
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	3301      	adds	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	2b02      	cmp	r3, #2
 800105a:	ddc6      	ble.n	8000fea <init_flying_object+0x36>
		for (int i = 0; i < OBJECT_HEIGHT_S; i++) {
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	3301      	adds	r3, #1
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	2b00      	cmp	r3, #0
 8001066:	ddbd      	ble.n	8000fe4 <init_flying_object+0x30>
			}
		}
		break;
 8001068:	e09d      	b.n	80011a6 <init_flying_object+0x1f2>
	case MEDIUM:
		object_struct->size = MEDIUM;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2201      	movs	r2, #1
 800106e:	709a      	strb	r2, [r3, #2]
		for (int i = 0; i < OBJECT_HEIGHT_M; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	e044      	b.n	8001100 <init_flying_object+0x14c>
			for (int j = 0; j < OBJECT_WIDTH_M; j++) {
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	e03b      	b.n	80010f4 <init_flying_object+0x140>
				object_struct->_hitbox_array.hitbox_m[i][j].appearance =
						sprites[i][j];
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	4613      	mov	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	1a9b      	subs	r3, r3, r2
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	441a      	add	r2, r3
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	4413      	add	r3, r2
 800108c:	781c      	ldrb	r4, [r3, #0]
				object_struct->_hitbox_array.hitbox_m[i][j].appearance =
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	69f9      	ldr	r1, [r7, #28]
 8001094:	461a      	mov	r2, r3
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	441a      	add	r2, r3
 800109a:	460b      	mov	r3, r1
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	0099      	lsls	r1, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	4413      	add	r3, r2
 80010a6:	4403      	add	r3, r0
 80010a8:	3303      	adds	r3, #3
 80010aa:	4622      	mov	r2, r4
 80010ac:	701a      	strb	r2, [r3, #0]
				object_struct->_hitbox_array.hitbox_m[i][j]._object = _object;
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	69f9      	ldr	r1, [r7, #28]
 80010b4:	461a      	mov	r2, r3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	441a      	add	r2, r3
 80010ba:	460b      	mov	r3, r1
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	0099      	lsls	r1, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	4413      	add	r3, r2
 80010c6:	4403      	add	r3, r0
 80010c8:	3304      	adds	r3, #4
 80010ca:	7aba      	ldrb	r2, [r7, #10]
 80010cc:	701a      	strb	r2, [r3, #0]
				object_struct->_hitbox_array.hitbox_m[i][j].exist = TRUE;
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	69f9      	ldr	r1, [r7, #28]
 80010d4:	461a      	mov	r2, r3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	441a      	add	r2, r3
 80010da:	460b      	mov	r3, r1
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	0099      	lsls	r1, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	4413      	add	r3, r2
 80010e6:	4403      	add	r3, r0
 80010e8:	3307      	adds	r3, #7
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < OBJECT_WIDTH_M; j++) {
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	3301      	adds	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	ddc0      	ble.n	800107c <init_flying_object+0xc8>
		for (int i = 0; i < OBJECT_HEIGHT_M; i++) {
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b01      	cmp	r3, #1
 8001104:	ddb7      	ble.n	8001076 <init_flying_object+0xc2>
			}
		}
		break;
 8001106:	e04e      	b.n	80011a6 <init_flying_object+0x1f2>
	case LARGE:
		object_struct->size = LARGE;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2202      	movs	r2, #2
 800110c:	709a      	strb	r2, [r3, #2]
		for (int i = 0; i < OBJECT_HEIGHT_L; i++) {
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e044      	b.n	800119e <init_flying_object+0x1ea>
			for (int j = 0; j < OBJECT_WIDTH_L; j++) {
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	e03b      	b.n	8001192 <init_flying_object+0x1de>
				object_struct->_hitbox_array.hitbox_l[i][j].appearance =
						sprites[i][j];
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	441a      	add	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4413      	add	r3, r2
 800112a:	781c      	ldrb	r4, [r3, #0]
				object_struct->_hitbox_array.hitbox_l[i][j].appearance =
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6979      	ldr	r1, [r7, #20]
 8001132:	461a      	mov	r2, r3
 8001134:	0092      	lsls	r2, r2, #2
 8001136:	441a      	add	r2, r3
 8001138:	460b      	mov	r3, r1
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	00d9      	lsls	r1, r3, #3
 8001140:	1ac9      	subs	r1, r1, r3
 8001142:	1853      	adds	r3, r2, r1
 8001144:	4403      	add	r3, r0
 8001146:	3303      	adds	r3, #3
 8001148:	4622      	mov	r2, r4
 800114a:	701a      	strb	r2, [r3, #0]
				object_struct->_hitbox_array.hitbox_l[i][j]._object = _object;
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6979      	ldr	r1, [r7, #20]
 8001152:	461a      	mov	r2, r3
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	441a      	add	r2, r3
 8001158:	460b      	mov	r3, r1
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	00d9      	lsls	r1, r3, #3
 8001160:	1ac9      	subs	r1, r1, r3
 8001162:	1853      	adds	r3, r2, r1
 8001164:	4403      	add	r3, r0
 8001166:	3304      	adds	r3, #4
 8001168:	7aba      	ldrb	r2, [r7, #10]
 800116a:	701a      	strb	r2, [r3, #0]
				object_struct->_hitbox_array.hitbox_l[i][j].exist = TRUE;
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	6979      	ldr	r1, [r7, #20]
 8001172:	461a      	mov	r2, r3
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	441a      	add	r2, r3
 8001178:	460b      	mov	r3, r1
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	00d9      	lsls	r1, r3, #3
 8001180:	1ac9      	subs	r1, r1, r3
 8001182:	1853      	adds	r3, r2, r1
 8001184:	4403      	add	r3, r0
 8001186:	3307      	adds	r3, #7
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < OBJECT_WIDTH_L; j++) {
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	3301      	adds	r3, #1
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	2b06      	cmp	r3, #6
 8001196:	ddc0      	ble.n	800111a <init_flying_object+0x166>
		for (int i = 0; i < OBJECT_HEIGHT_L; i++) {
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	ddb7      	ble.n	8001114 <init_flying_object+0x160>
			}
		}
		break;
 80011a4:	bf00      	nop
	}

	object_struct->exist = TRUE;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2201      	movs	r2, #1
 80011aa:	705a      	strb	r2, [r3, #1]
	object_struct->life = life;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80011b2:	701a      	strb	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc90      	pop	{r4, r7}
 80011bc:	4770      	bx	lr

080011be <destroy_flying_object>:

void destroy_flying_object(flying_object_s *object_struct) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b088      	sub	sp, #32
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]

	switch (object_struct->size) {
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	789b      	ldrb	r3, [r3, #2]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d025      	beq.n	800121a <destroy_flying_object+0x5c>
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d047      	beq.n	8001262 <destroy_flying_object+0xa4>
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d169      	bne.n	80012aa <destroy_flying_object+0xec>
	case SMALL:
		for (int i = 0; i < OBJECT_HEIGHT_S; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	e01a      	b.n	8001212 <destroy_flying_object+0x54>
			for (int j = 0; j < OBJECT_WIDTH_S; j++) {
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	e011      	b.n	8001206 <destroy_flying_object+0x48>
				destroy_hitbox(&object_struct->_hitbox_array.hitbox_s[i][j]);
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	461a      	mov	r2, r3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	441a      	add	r2, r3
 80011ea:	69f9      	ldr	r1, [r7, #28]
 80011ec:	460b      	mov	r3, r1
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	1a5b      	subs	r3, r3, r1
 80011f2:	4413      	add	r3, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	3303      	adds	r3, #3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff febe 	bl	8000f7c <destroy_hitbox>
			for (int j = 0; j < OBJECT_WIDTH_S; j++) {
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	3301      	adds	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b02      	cmp	r3, #2
 800120a:	ddea      	ble.n	80011e2 <destroy_flying_object+0x24>
		for (int i = 0; i < OBJECT_HEIGHT_S; i++) {
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	3301      	adds	r3, #1
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	2b00      	cmp	r3, #0
 8001216:	dde1      	ble.n	80011dc <destroy_flying_object+0x1e>
			}
		}
		break;
 8001218:	e047      	b.n	80012aa <destroy_flying_object+0xec>
	case MEDIUM:
		for (int i = 0; i < OBJECT_HEIGHT_M; i++) {
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	e01c      	b.n	800125a <destroy_flying_object+0x9c>
			for (int j = 0; j < OBJECT_WIDTH_M; j++) {
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	e013      	b.n	800124e <destroy_flying_object+0x90>
				destroy_hitbox(&object_struct->_hitbox_array.hitbox_m[i][j]);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	461a      	mov	r2, r3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	441a      	add	r2, r3
 800122e:	6979      	ldr	r1, [r7, #20]
 8001230:	460b      	mov	r3, r1
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	0099      	lsls	r1, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	4413      	add	r3, r2
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	3303      	adds	r3, #3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe9a 	bl	8000f7c <destroy_hitbox>
			for (int j = 0; j < OBJECT_WIDTH_M; j++) {
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	3301      	adds	r3, #1
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2b04      	cmp	r3, #4
 8001252:	dde8      	ble.n	8001226 <destroy_flying_object+0x68>
		for (int i = 0; i < OBJECT_HEIGHT_M; i++) {
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b01      	cmp	r3, #1
 800125e:	dddf      	ble.n	8001220 <destroy_flying_object+0x62>
			}
		}
		break;
 8001260:	e023      	b.n	80012aa <destroy_flying_object+0xec>
	case LARGE:
		for (int i = 0; i < OBJECT_HEIGHT_L; i++) {
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e01c      	b.n	80012a2 <destroy_flying_object+0xe4>
			for (int j = 0; j < OBJECT_WIDTH_L; j++) {
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	e013      	b.n	8001296 <destroy_flying_object+0xd8>
				destroy_hitbox(&object_struct->_hitbox_array.hitbox_l[i][j]);
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	461a      	mov	r2, r3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	441a      	add	r2, r3
 8001276:	68f9      	ldr	r1, [r7, #12]
 8001278:	460b      	mov	r3, r1
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	00d9      	lsls	r1, r3, #3
 8001280:	1ac9      	subs	r1, r1, r3
 8001282:	1853      	adds	r3, r2, r1
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	3303      	adds	r3, #3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fe76 	bl	8000f7c <destroy_hitbox>
			for (int j = 0; j < OBJECT_WIDTH_L; j++) {
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3301      	adds	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b06      	cmp	r3, #6
 800129a:	dde8      	ble.n	800126e <destroy_flying_object+0xb0>
		for (int i = 0; i < OBJECT_HEIGHT_L; i++) {
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3301      	adds	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	dddf      	ble.n	8001268 <destroy_flying_object+0xaa>
			}
		}
		break;
 80012a8:	bf00      	nop
	}
	object_struct->exist = FALSE;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	705a      	strb	r2, [r3, #1]
	erase_flying_object(object_struct);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f9c1 	bl	8001638 <erase_flying_object>
}
 80012b6:	bf00      	nop
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <update_coordinates>:

void update_coordinates(flying_object_s *object_struct, uint8_t x, uint8_t y) {
 80012be:	b490      	push	{r4, r7}
 80012c0:	b088      	sub	sp, #32
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	70fb      	strb	r3, [r7, #3]
 80012ca:	4613      	mov	r3, r2
 80012cc:	70bb      	strb	r3, [r7, #2]

	switch (object_struct->size) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d03d      	beq.n	8001352 <update_coordinates+0x94>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d078      	beq.n	80013cc <update_coordinates+0x10e>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d000      	beq.n	80012e0 <update_coordinates+0x22>
				object_struct->_hitbox_array.hitbox_l[i][j].y = i + y;
			}
		}
		break;
	}
}
 80012de:	e0b2      	b.n	8001446 <update_coordinates+0x188>
		for (int i = 0; i < OBJECT_HEIGHT_S; i++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	e031      	b.n	800134a <update_coordinates+0x8c>
			for (int j = 0; j < OBJECT_WIDTH_S; j++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	e028      	b.n	800133e <update_coordinates+0x80>
				object_struct->_hitbox_array.hitbox_s[i][j].x = j + x;
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	4413      	add	r3, r2
 80012f4:	b2dc      	uxtb	r4, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	69f9      	ldr	r1, [r7, #28]
 80012fc:	461a      	mov	r2, r3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	441a      	add	r2, r3
 8001302:	460b      	mov	r3, r1
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	1a5b      	subs	r3, r3, r1
 8001308:	4413      	add	r3, r2
 800130a:	4403      	add	r3, r0
 800130c:	3305      	adds	r3, #5
 800130e:	4622      	mov	r2, r4
 8001310:	701a      	strb	r2, [r3, #0]
				object_struct->_hitbox_array.hitbox_s[i][j].y = i + y;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	78bb      	ldrb	r3, [r7, #2]
 8001318:	4413      	add	r3, r2
 800131a:	b2dc      	uxtb	r4, r3
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	69f9      	ldr	r1, [r7, #28]
 8001322:	461a      	mov	r2, r3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	441a      	add	r2, r3
 8001328:	460b      	mov	r3, r1
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	1a5b      	subs	r3, r3, r1
 800132e:	4413      	add	r3, r2
 8001330:	4403      	add	r3, r0
 8001332:	3306      	adds	r3, #6
 8001334:	4622      	mov	r2, r4
 8001336:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < OBJECT_WIDTH_S; j++) {
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	3301      	adds	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b02      	cmp	r3, #2
 8001342:	ddd3      	ble.n	80012ec <update_coordinates+0x2e>
		for (int i = 0; i < OBJECT_HEIGHT_S; i++) {
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	3301      	adds	r3, #1
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	2b00      	cmp	r3, #0
 800134e:	ddca      	ble.n	80012e6 <update_coordinates+0x28>
		break;
 8001350:	e079      	b.n	8001446 <update_coordinates+0x188>
		for (int i = 0; i < OBJECT_HEIGHT_M; i++) {
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	e035      	b.n	80013c4 <update_coordinates+0x106>
			for (int j = 0; j < OBJECT_WIDTH_M; j++) {
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	e02c      	b.n	80013b8 <update_coordinates+0xfa>
				object_struct->_hitbox_array.hitbox_m[i][j].x = j + x;
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	4413      	add	r3, r2
 8001366:	b2dc      	uxtb	r4, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6979      	ldr	r1, [r7, #20]
 800136e:	461a      	mov	r2, r3
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	441a      	add	r2, r3
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	0099      	lsls	r1, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	4413      	add	r3, r2
 8001380:	4403      	add	r3, r0
 8001382:	3305      	adds	r3, #5
 8001384:	4622      	mov	r2, r4
 8001386:	701a      	strb	r2, [r3, #0]
				object_struct->_hitbox_array.hitbox_m[i][j].y = i + y;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	78bb      	ldrb	r3, [r7, #2]
 800138e:	4413      	add	r3, r2
 8001390:	b2dc      	uxtb	r4, r3
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	6979      	ldr	r1, [r7, #20]
 8001398:	461a      	mov	r2, r3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	441a      	add	r2, r3
 800139e:	460b      	mov	r3, r1
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	0099      	lsls	r1, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	4413      	add	r3, r2
 80013aa:	4403      	add	r3, r0
 80013ac:	3306      	adds	r3, #6
 80013ae:	4622      	mov	r2, r4
 80013b0:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < OBJECT_WIDTH_M; j++) {
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	3301      	adds	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	ddcf      	ble.n	800135e <update_coordinates+0xa0>
		for (int i = 0; i < OBJECT_HEIGHT_M; i++) {
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	ddc6      	ble.n	8001358 <update_coordinates+0x9a>
		break;
 80013ca:	e03c      	b.n	8001446 <update_coordinates+0x188>
		for (int i = 0; i < OBJECT_HEIGHT_L; i++) {
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e035      	b.n	800143e <update_coordinates+0x180>
			for (int j = 0; j < OBJECT_WIDTH_L; j++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	e02c      	b.n	8001432 <update_coordinates+0x174>
				object_struct->_hitbox_array.hitbox_l[i][j].x = j + x;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	4413      	add	r3, r2
 80013e0:	b2dc      	uxtb	r4, r3
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	68f9      	ldr	r1, [r7, #12]
 80013e8:	461a      	mov	r2, r3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	441a      	add	r2, r3
 80013ee:	460b      	mov	r3, r1
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	00d9      	lsls	r1, r3, #3
 80013f6:	1ac9      	subs	r1, r1, r3
 80013f8:	1853      	adds	r3, r2, r1
 80013fa:	4403      	add	r3, r0
 80013fc:	3305      	adds	r3, #5
 80013fe:	4622      	mov	r2, r4
 8001400:	701a      	strb	r2, [r3, #0]
				object_struct->_hitbox_array.hitbox_l[i][j].y = i + y;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	78bb      	ldrb	r3, [r7, #2]
 8001408:	4413      	add	r3, r2
 800140a:	b2dc      	uxtb	r4, r3
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	68f9      	ldr	r1, [r7, #12]
 8001412:	461a      	mov	r2, r3
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	441a      	add	r2, r3
 8001418:	460b      	mov	r3, r1
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	00d9      	lsls	r1, r3, #3
 8001420:	1ac9      	subs	r1, r1, r3
 8001422:	1853      	adds	r3, r2, r1
 8001424:	4403      	add	r3, r0
 8001426:	3306      	adds	r3, #6
 8001428:	4622      	mov	r2, r4
 800142a:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < OBJECT_WIDTH_L; j++) {
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	3301      	adds	r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	2b06      	cmp	r3, #6
 8001436:	ddcf      	ble.n	80013d8 <update_coordinates+0x11a>
		for (int i = 0; i < OBJECT_HEIGHT_L; i++) {
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	3301      	adds	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2b03      	cmp	r3, #3
 8001442:	ddc6      	ble.n	80013d2 <update_coordinates+0x114>
		break;
 8001444:	bf00      	nop
}
 8001446:	bf00      	nop
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bc90      	pop	{r4, r7}
 800144e:	4770      	bx	lr

08001450 <display_flying_object>:

void display_flying_object(flying_object_s *object_struct) {
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

	switch (object_struct->size) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	789b      	ldrb	r3, [r3, #2]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d04b      	beq.n	80014f8 <display_flying_object+0xa8>
 8001460:	2b02      	cmp	r3, #2
 8001462:	f000 8095 	beq.w	8001590 <display_flying_object+0x140>
 8001466:	2b00      	cmp	r3, #0
 8001468:	d000      	beq.n	800146c <display_flying_object+0x1c>
				}
			}
		}
		break;
	}
}
 800146a:	e0e1      	b.n	8001630 <display_flying_object+0x1e0>
		if (object_struct->exist == TRUE) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	785b      	ldrb	r3, [r3, #1]
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 80d8 	bne.w	8001626 <display_flying_object+0x1d6>
			for (int i = 0; i < OBJECT_HEIGHT_S; i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	e039      	b.n	80014f0 <display_flying_object+0xa0>
				for (int j = 0; j < OBJECT_WIDTH_S; j++) {
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	e030      	b.n	80014e4 <display_flying_object+0x94>
					vt100_move(object_struct->_hitbox_array.hitbox_s[i][j].x,
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	69f9      	ldr	r1, [r7, #28]
 8001488:	461a      	mov	r2, r3
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	441a      	add	r2, r3
 800148e:	460b      	mov	r3, r1
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	1a5b      	subs	r3, r3, r1
 8001494:	4413      	add	r3, r2
 8001496:	4403      	add	r3, r0
 8001498:	3305      	adds	r3, #5
 800149a:	781c      	ldrb	r4, [r3, #0]
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	69f9      	ldr	r1, [r7, #28]
 80014a2:	461a      	mov	r2, r3
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	441a      	add	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	1a5b      	subs	r3, r3, r1
 80014ae:	4413      	add	r3, r2
 80014b0:	4403      	add	r3, r0
 80014b2:	3306      	adds	r3, #6
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4619      	mov	r1, r3
 80014b8:	4620      	mov	r0, r4
 80014ba:	f002 ff55 	bl	8004368 <vt100_move>
							object_struct->_hitbox_array.hitbox_s[i][j].appearance);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	69f9      	ldr	r1, [r7, #28]
 80014c4:	461a      	mov	r2, r3
 80014c6:	0092      	lsls	r2, r2, #2
 80014c8:	441a      	add	r2, r3
 80014ca:	460b      	mov	r3, r1
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	1a5b      	subs	r3, r3, r1
 80014d0:	4413      	add	r3, r2
 80014d2:	4403      	add	r3, r0
 80014d4:	3303      	adds	r3, #3
 80014d6:	781b      	ldrb	r3, [r3, #0]
					serial_putchar(
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fcdb 	bl	8000e94 <serial_putchar>
				for (int j = 0; j < OBJECT_WIDTH_S; j++) {
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	ddcb      	ble.n	8001482 <display_flying_object+0x32>
			for (int i = 0; i < OBJECT_HEIGHT_S; i++) {
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	ddc2      	ble.n	800147c <display_flying_object+0x2c>
		break;
 80014f6:	e096      	b.n	8001626 <display_flying_object+0x1d6>
		if (object_struct->exist == TRUE) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	f040 8094 	bne.w	800162a <display_flying_object+0x1da>
			for (int i = 0; i < OBJECT_HEIGHT_M; i++) {
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e03f      	b.n	8001588 <display_flying_object+0x138>
				for (int j = 0; j < OBJECT_WIDTH_M; j++) {
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	e036      	b.n	800157c <display_flying_object+0x12c>
					vt100_move(object_struct->_hitbox_array.hitbox_m[i][j].x,
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	6979      	ldr	r1, [r7, #20]
 8001514:	461a      	mov	r2, r3
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	441a      	add	r2, r3
 800151a:	460b      	mov	r3, r1
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	0099      	lsls	r1, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	4413      	add	r3, r2
 8001526:	4403      	add	r3, r0
 8001528:	3305      	adds	r3, #5
 800152a:	781c      	ldrb	r4, [r3, #0]
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	6979      	ldr	r1, [r7, #20]
 8001532:	461a      	mov	r2, r3
 8001534:	0092      	lsls	r2, r2, #2
 8001536:	441a      	add	r2, r3
 8001538:	460b      	mov	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	0099      	lsls	r1, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	4413      	add	r3, r2
 8001544:	4403      	add	r3, r0
 8001546:	3306      	adds	r3, #6
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4619      	mov	r1, r3
 800154c:	4620      	mov	r0, r4
 800154e:	f002 ff0b 	bl	8004368 <vt100_move>
							object_struct->_hitbox_array.hitbox_m[i][j].appearance);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	6979      	ldr	r1, [r7, #20]
 8001558:	461a      	mov	r2, r3
 800155a:	0092      	lsls	r2, r2, #2
 800155c:	441a      	add	r2, r3
 800155e:	460b      	mov	r3, r1
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	0099      	lsls	r1, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	4413      	add	r3, r2
 800156a:	4403      	add	r3, r0
 800156c:	3303      	adds	r3, #3
 800156e:	781b      	ldrb	r3, [r3, #0]
					serial_putchar(
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fc8f 	bl	8000e94 <serial_putchar>
				for (int j = 0; j < OBJECT_WIDTH_M; j++) {
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3301      	adds	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	2b04      	cmp	r3, #4
 8001580:	ddc5      	ble.n	800150e <display_flying_object+0xbe>
			for (int i = 0; i < OBJECT_HEIGHT_M; i++) {
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2b01      	cmp	r3, #1
 800158c:	ddbc      	ble.n	8001508 <display_flying_object+0xb8>
		break;
 800158e:	e04c      	b.n	800162a <display_flying_object+0x1da>
		if (object_struct->exist == TRUE) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d14a      	bne.n	800162e <display_flying_object+0x1de>
			for (int i = 0; i < OBJECT_HEIGHT_L; i++) {
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	e03f      	b.n	800161e <display_flying_object+0x1ce>
				for (int j = 0; j < OBJECT_WIDTH_L; j++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	e036      	b.n	8001612 <display_flying_object+0x1c2>
					vt100_move(object_struct->_hitbox_array.hitbox_l[i][j].x,
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	68f9      	ldr	r1, [r7, #12]
 80015aa:	461a      	mov	r2, r3
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	441a      	add	r2, r3
 80015b0:	460b      	mov	r3, r1
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	00d9      	lsls	r1, r3, #3
 80015b8:	1ac9      	subs	r1, r1, r3
 80015ba:	1853      	adds	r3, r2, r1
 80015bc:	4403      	add	r3, r0
 80015be:	3305      	adds	r3, #5
 80015c0:	781c      	ldrb	r4, [r3, #0]
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	68f9      	ldr	r1, [r7, #12]
 80015c8:	461a      	mov	r2, r3
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	441a      	add	r2, r3
 80015ce:	460b      	mov	r3, r1
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	00d9      	lsls	r1, r3, #3
 80015d6:	1ac9      	subs	r1, r1, r3
 80015d8:	1853      	adds	r3, r2, r1
 80015da:	4403      	add	r3, r0
 80015dc:	3306      	adds	r3, #6
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	4620      	mov	r0, r4
 80015e4:	f002 fec0 	bl	8004368 <vt100_move>
							object_struct->_hitbox_array.hitbox_l[i][j].appearance);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	461a      	mov	r2, r3
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	441a      	add	r2, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	00d9      	lsls	r1, r3, #3
 80015fc:	1ac9      	subs	r1, r1, r3
 80015fe:	1853      	adds	r3, r2, r1
 8001600:	4403      	add	r3, r0
 8001602:	3303      	adds	r3, #3
 8001604:	781b      	ldrb	r3, [r3, #0]
					serial_putchar(
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fc44 	bl	8000e94 <serial_putchar>
				for (int j = 0; j < OBJECT_WIDTH_L; j++) {
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	3301      	adds	r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2b06      	cmp	r3, #6
 8001616:	ddc5      	ble.n	80015a4 <display_flying_object+0x154>
			for (int i = 0; i < OBJECT_HEIGHT_L; i++) {
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b03      	cmp	r3, #3
 8001622:	ddbc      	ble.n	800159e <display_flying_object+0x14e>
		break;
 8001624:	e003      	b.n	800162e <display_flying_object+0x1de>
		break;
 8001626:	bf00      	nop
 8001628:	e002      	b.n	8001630 <display_flying_object+0x1e0>
		break;
 800162a:	bf00      	nop
 800162c:	e000      	b.n	8001630 <display_flying_object+0x1e0>
		break;
 800162e:	bf00      	nop
}
 8001630:	bf00      	nop
 8001632:	3724      	adds	r7, #36	; 0x24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}

08001638 <erase_flying_object>:

void erase_flying_object(flying_object_s *object_struct) {
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

	switch (object_struct->size) {
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	789b      	ldrb	r3, [r3, #2]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d038      	beq.n	80016ba <erase_flying_object+0x82>
 8001648:	2b02      	cmp	r3, #2
 800164a:	d06e      	beq.n	800172a <erase_flying_object+0xf2>
 800164c:	2b00      	cmp	r3, #0
 800164e:	d000      	beq.n	8001652 <erase_flying_object+0x1a>
			}
		}
		break;
	}

}
 8001650:	e0a3      	b.n	800179a <erase_flying_object+0x162>
		for (int i = 0; i < OBJECT_HEIGHT_S; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	e02c      	b.n	80016b2 <erase_flying_object+0x7a>
			for (int j = 0; j < OBJECT_WIDTH_S; j++) {
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	e023      	b.n	80016a6 <erase_flying_object+0x6e>
				vt100_move(object_struct->_hitbox_array.hitbox_s[i][j].x,
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	69f9      	ldr	r1, [r7, #28]
 8001664:	461a      	mov	r2, r3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	441a      	add	r2, r3
 800166a:	460b      	mov	r3, r1
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	1a5b      	subs	r3, r3, r1
 8001670:	4413      	add	r3, r2
 8001672:	4403      	add	r3, r0
 8001674:	3305      	adds	r3, #5
 8001676:	781c      	ldrb	r4, [r3, #0]
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	69f9      	ldr	r1, [r7, #28]
 800167e:	461a      	mov	r2, r3
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	441a      	add	r2, r3
 8001684:	460b      	mov	r3, r1
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	1a5b      	subs	r3, r3, r1
 800168a:	4413      	add	r3, r2
 800168c:	4403      	add	r3, r0
 800168e:	3306      	adds	r3, #6
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	4620      	mov	r0, r4
 8001696:	f002 fe67 	bl	8004368 <vt100_move>
				serial_putchar(' ');
 800169a:	2020      	movs	r0, #32
 800169c:	f7ff fbfa 	bl	8000e94 <serial_putchar>
			for (int j = 0; j < OBJECT_WIDTH_S; j++) {
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	3301      	adds	r3, #1
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	ddd8      	ble.n	800165e <erase_flying_object+0x26>
		for (int i = 0; i < OBJECT_HEIGHT_S; i++) {
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3301      	adds	r3, #1
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	ddcf      	ble.n	8001658 <erase_flying_object+0x20>
		break;
 80016b8:	e06f      	b.n	800179a <erase_flying_object+0x162>
		for (int i = 0; i < OBJECT_HEIGHT_M; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e030      	b.n	8001722 <erase_flying_object+0xea>
			for (int j = 0; j < OBJECT_WIDTH_M; j++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	e027      	b.n	8001716 <erase_flying_object+0xde>
				vt100_move(object_struct->_hitbox_array.hitbox_m[i][j].x,
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	6979      	ldr	r1, [r7, #20]
 80016cc:	461a      	mov	r2, r3
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	441a      	add	r2, r3
 80016d2:	460b      	mov	r3, r1
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	0099      	lsls	r1, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	4413      	add	r3, r2
 80016de:	4403      	add	r3, r0
 80016e0:	3305      	adds	r3, #5
 80016e2:	781c      	ldrb	r4, [r3, #0]
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	6979      	ldr	r1, [r7, #20]
 80016ea:	461a      	mov	r2, r3
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	441a      	add	r2, r3
 80016f0:	460b      	mov	r3, r1
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	0099      	lsls	r1, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	4413      	add	r3, r2
 80016fc:	4403      	add	r3, r0
 80016fe:	3306      	adds	r3, #6
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	4619      	mov	r1, r3
 8001704:	4620      	mov	r0, r4
 8001706:	f002 fe2f 	bl	8004368 <vt100_move>
				serial_putchar(' ');
 800170a:	2020      	movs	r0, #32
 800170c:	f7ff fbc2 	bl	8000e94 <serial_putchar>
			for (int j = 0; j < OBJECT_WIDTH_M; j++) {
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	3301      	adds	r3, #1
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	2b04      	cmp	r3, #4
 800171a:	ddd4      	ble.n	80016c6 <erase_flying_object+0x8e>
		for (int i = 0; i < OBJECT_HEIGHT_M; i++) {
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b01      	cmp	r3, #1
 8001726:	ddcb      	ble.n	80016c0 <erase_flying_object+0x88>
		break;
 8001728:	e037      	b.n	800179a <erase_flying_object+0x162>
		for (int i = 0; i < OBJECT_HEIGHT_L; i++) {
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e030      	b.n	8001792 <erase_flying_object+0x15a>
			for (int j = 0; j < OBJECT_WIDTH_L; j++) {
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	e027      	b.n	8001786 <erase_flying_object+0x14e>
				vt100_move(object_struct->_hitbox_array.hitbox_l[i][j].x,
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	461a      	mov	r2, r3
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	441a      	add	r2, r3
 8001742:	460b      	mov	r3, r1
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	00d9      	lsls	r1, r3, #3
 800174a:	1ac9      	subs	r1, r1, r3
 800174c:	1853      	adds	r3, r2, r1
 800174e:	4403      	add	r3, r0
 8001750:	3305      	adds	r3, #5
 8001752:	781c      	ldrb	r4, [r3, #0]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	461a      	mov	r2, r3
 800175c:	0092      	lsls	r2, r2, #2
 800175e:	441a      	add	r2, r3
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	00d9      	lsls	r1, r3, #3
 8001768:	1ac9      	subs	r1, r1, r3
 800176a:	1853      	adds	r3, r2, r1
 800176c:	4403      	add	r3, r0
 800176e:	3306      	adds	r3, #6
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	4620      	mov	r0, r4
 8001776:	f002 fdf7 	bl	8004368 <vt100_move>
				serial_putchar(' ');
 800177a:	2020      	movs	r0, #32
 800177c:	f7ff fb8a 	bl	8000e94 <serial_putchar>
			for (int j = 0; j < OBJECT_WIDTH_L; j++) {
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3301      	adds	r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b06      	cmp	r3, #6
 800178a:	ddd4      	ble.n	8001736 <erase_flying_object+0xfe>
		for (int i = 0; i < OBJECT_HEIGHT_L; i++) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b03      	cmp	r3, #3
 8001796:	ddcb      	ble.n	8001730 <erase_flying_object+0xf8>
		break;
 8001798:	bf00      	nop
}
 800179a:	bf00      	nop
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd90      	pop	{r4, r7, pc}
	...

080017a4 <scroll_flying_object>:

void scroll_flying_object(flying_object_s *object_struct, side _side,
		int8_t offset) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
 80017b0:	4613      	mov	r3, r2
 80017b2:	70bb      	strb	r3, [r7, #2]

	int8_t x = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
	int8_t y = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73bb      	strb	r3, [r7, #14]

	if (object_struct->exist == FALSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 8088 	beq.w	80018d6 <scroll_flying_object+0x132>
		return;

	if (flying_object_move_limit(object_struct, _side, offset) == TRUE) {
 80017c6:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f886 	bl	80018e0 <flying_object_move_limit>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d17e      	bne.n	80018d8 <scroll_flying_object+0x134>

		erase_flying_object(object_struct);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ff2c 	bl	8001638 <erase_flying_object>

		switch (_side) {
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d83e      	bhi.n	8001864 <scroll_flying_object+0xc0>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <scroll_flying_object+0x48>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	080017fd 	.word	0x080017fd
 80017f0:	08001817 	.word	0x08001817
 80017f4:	08001831 	.word	0x08001831
 80017f8:	0800184b 	.word	0x0800184b
		case LEFT:
			x--;
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	3b01      	subs	r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	73fb      	strb	r3, [r7, #15]
			x *= offset;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	78bb      	ldrb	r3, [r7, #2]
 800180c:	fb12 f303 	smulbb	r3, r2, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	73fb      	strb	r3, [r7, #15]
			break;
 8001814:	e026      	b.n	8001864 <scroll_flying_object+0xc0>
		case RIGHT:
			x++;
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	3301      	adds	r3, #1
 800181e:	b2db      	uxtb	r3, r3
 8001820:	73fb      	strb	r3, [r7, #15]
			x *= offset;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	78bb      	ldrb	r3, [r7, #2]
 8001826:	fb12 f303 	smulbb	r3, r2, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	73fb      	strb	r3, [r7, #15]
			break;
 800182e:	e019      	b.n	8001864 <scroll_flying_object+0xc0>
		case UP:
			y--;
 8001830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	3b01      	subs	r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	73bb      	strb	r3, [r7, #14]
			y *= offset;
 800183c:	7bba      	ldrb	r2, [r7, #14]
 800183e:	78bb      	ldrb	r3, [r7, #2]
 8001840:	fb12 f303 	smulbb	r3, r2, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	73bb      	strb	r3, [r7, #14]
			break;
 8001848:	e00c      	b.n	8001864 <scroll_flying_object+0xc0>
		case DOWN:
			y++;
 800184a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3301      	adds	r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	73bb      	strb	r3, [r7, #14]
			y *= offset;
 8001856:	7bba      	ldrb	r2, [r7, #14]
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	fb12 f303 	smulbb	r3, r2, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	73bb      	strb	r3, [r7, #14]
			break;
 8001862:	bf00      	nop
		}

		switch (object_struct->size) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	789b      	ldrb	r3, [r3, #2]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d012      	beq.n	8001892 <scroll_flying_object+0xee>
 800186c:	2b02      	cmp	r3, #2
 800186e:	d01f      	beq.n	80018b0 <scroll_flying_object+0x10c>
 8001870:	2b00      	cmp	r3, #0
 8001872:	d12c      	bne.n	80018ce <scroll_flying_object+0x12a>
		case SMALL:
			update_coordinates(object_struct,
					object_struct->_hitbox_array.hitbox_s[0][0].x + x,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	795a      	ldrb	r2, [r3, #5]
			update_coordinates(object_struct,
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	4413      	add	r3, r2
 800187c:	b2d9      	uxtb	r1, r3
					object_struct->_hitbox_array.hitbox_s[0][0].y + y);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	799a      	ldrb	r2, [r3, #6]
			update_coordinates(object_struct,
 8001882:	7bbb      	ldrb	r3, [r7, #14]
 8001884:	4413      	add	r3, r2
 8001886:	b2db      	uxtb	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fd17 	bl	80012be <update_coordinates>
			break;
 8001890:	e01d      	b.n	80018ce <scroll_flying_object+0x12a>
		case MEDIUM:
			update_coordinates(object_struct,
					object_struct->_hitbox_array.hitbox_m[0][0].x + x,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	795a      	ldrb	r2, [r3, #5]
			update_coordinates(object_struct,
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	4413      	add	r3, r2
 800189a:	b2d9      	uxtb	r1, r3
					object_struct->_hitbox_array.hitbox_m[0][0].y + y);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	799a      	ldrb	r2, [r3, #6]
			update_coordinates(object_struct,
 80018a0:	7bbb      	ldrb	r3, [r7, #14]
 80018a2:	4413      	add	r3, r2
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fd08 	bl	80012be <update_coordinates>
			break;
 80018ae:	e00e      	b.n	80018ce <scroll_flying_object+0x12a>
		case LARGE:
			update_coordinates(object_struct,
					object_struct->_hitbox_array.hitbox_l[0][0].x + x,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	795a      	ldrb	r2, [r3, #5]
			update_coordinates(object_struct,
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	4413      	add	r3, r2
 80018b8:	b2d9      	uxtb	r1, r3
					object_struct->_hitbox_array.hitbox_l[0][0].y + y);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	799a      	ldrb	r2, [r3, #6]
			update_coordinates(object_struct,
 80018be:	7bbb      	ldrb	r3, [r7, #14]
 80018c0:	4413      	add	r3, r2
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fcf9 	bl	80012be <update_coordinates>
			break;
 80018cc:	bf00      	nop
		}
		display_flying_object(object_struct);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fdbe 	bl	8001450 <display_flying_object>
 80018d4:	e000      	b.n	80018d8 <scroll_flying_object+0x134>
		return;
 80018d6:	bf00      	nop
	}

}
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop

080018e0 <flying_object_move_limit>:

_bool flying_object_move_limit(flying_object_s *object_struct, side _side,
		int8_t offset) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
 80018ec:	4613      	mov	r3, r2
 80018ee:	70bb      	strb	r3, [r7, #2]
	switch (object_struct->size) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	789b      	ldrb	r3, [r3, #2]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d046      	beq.n	8001986 <flying_object_move_limit+0xa6>
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	f000 8086 	beq.w	8001a0a <flying_object_move_limit+0x12a>
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 80c5 	bne.w	8001a8e <flying_object_move_limit+0x1ae>
	case SMALL:
		switch (_side) {
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d83b      	bhi.n	8001982 <flying_object_move_limit+0xa2>
 800190a:	a201      	add	r2, pc, #4	; (adr r2, 8001910 <flying_object_move_limit+0x30>)
 800190c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001910:	08001921 	.word	0x08001921
 8001914:	08001935 	.word	0x08001935
 8001918:	0800194b 	.word	0x0800194b
 800191c:	0800195f 	.word	0x0800195f
		case LEFT:
			if (object_struct->_hitbox_array.hitbox_s[0][0].x
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	795b      	ldrb	r3, [r3, #5]
 8001924:	461a      	mov	r2, r3
					< VT100_SCREEN_XMIN + offset)
 8001926:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800192a:	3301      	adds	r3, #1
			if (object_struct->_hitbox_array.hitbox_s[0][0].x
 800192c:	429a      	cmp	r2, r3
 800192e:	da21      	bge.n	8001974 <flying_object_move_limit+0x94>
				return FALSE;
 8001930:	2300      	movs	r3, #0
 8001932:	e0ad      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
		case RIGHT:
			if (object_struct->_hitbox_array.hitbox_s[0][0].x + OBJECT_WIDTH_S
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	795b      	ldrb	r3, [r3, #5]
					- 1 > VT100_SCREEN_XMAX - offset)
 8001938:	1c9a      	adds	r2, r3, #2
 800193a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800193e:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
			if (object_struct->_hitbox_array.hitbox_s[0][0].x + OBJECT_WIDTH_S
 8001942:	429a      	cmp	r2, r3
 8001944:	dd18      	ble.n	8001978 <flying_object_move_limit+0x98>
				return FALSE;
 8001946:	2300      	movs	r3, #0
 8001948:	e0a2      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
		case UP:
			if (object_struct->_hitbox_array.hitbox_s[0][0].y
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	799b      	ldrb	r3, [r3, #6]
 800194e:	461a      	mov	r2, r3
					< VT100_SCREEN_YMIN + offset)
 8001950:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001954:	3301      	adds	r3, #1
			if (object_struct->_hitbox_array.hitbox_s[0][0].y
 8001956:	429a      	cmp	r2, r3
 8001958:	da10      	bge.n	800197c <flying_object_move_limit+0x9c>
				return FALSE;
 800195a:	2300      	movs	r3, #0
 800195c:	e098      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
		case DOWN:
			if (object_struct->_hitbox_array.hitbox_s[0][0].y + OBJECT_HEIGHT_S
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	799b      	ldrb	r3, [r3, #6]
					- 1 > VT100_SCREEN_YMAX - offset)
 8001962:	461a      	mov	r2, r3
 8001964:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001968:	f1c3 0318 	rsb	r3, r3, #24
			if (object_struct->_hitbox_array.hitbox_s[0][0].y + OBJECT_HEIGHT_S
 800196c:	429a      	cmp	r2, r3
 800196e:	dd07      	ble.n	8001980 <flying_object_move_limit+0xa0>
				return FALSE;
 8001970:	2300      	movs	r3, #0
 8001972:	e08d      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
 8001974:	bf00      	nop
 8001976:	e004      	b.n	8001982 <flying_object_move_limit+0xa2>
			break;
 8001978:	bf00      	nop
 800197a:	e002      	b.n	8001982 <flying_object_move_limit+0xa2>
			break;
 800197c:	bf00      	nop
 800197e:	e000      	b.n	8001982 <flying_object_move_limit+0xa2>
			break;
 8001980:	bf00      	nop
		}
		return TRUE;
 8001982:	2301      	movs	r3, #1
 8001984:	e084      	b.n	8001a90 <flying_object_move_limit+0x1b0>
		break;
	case MEDIUM:
		switch (_side) {
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d83c      	bhi.n	8001a06 <flying_object_move_limit+0x126>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <flying_object_move_limit+0xb4>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019a5 	.word	0x080019a5
 8001998:	080019b9 	.word	0x080019b9
 800199c:	080019cf 	.word	0x080019cf
 80019a0:	080019e3 	.word	0x080019e3
		case LEFT:
			if (object_struct->_hitbox_array.hitbox_m[0][0].x
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	795b      	ldrb	r3, [r3, #5]
 80019a8:	461a      	mov	r2, r3
					< VT100_SCREEN_XMIN + offset)
 80019aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019ae:	3301      	adds	r3, #1
			if (object_struct->_hitbox_array.hitbox_m[0][0].x
 80019b0:	429a      	cmp	r2, r3
 80019b2:	da21      	bge.n	80019f8 <flying_object_move_limit+0x118>
				return FALSE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e06b      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
		case RIGHT:
			if (object_struct->_hitbox_array.hitbox_m[0][0].x + OBJECT_WIDTH_M
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	795b      	ldrb	r3, [r3, #5]
					- 1 > VT100_SCREEN_XMAX - offset)
 80019bc:	1d1a      	adds	r2, r3, #4
 80019be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019c2:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
			if (object_struct->_hitbox_array.hitbox_m[0][0].x + OBJECT_WIDTH_M
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dd18      	ble.n	80019fc <flying_object_move_limit+0x11c>
				return FALSE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e060      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
		case UP:
			if (object_struct->_hitbox_array.hitbox_m[0][0].y
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	799b      	ldrb	r3, [r3, #6]
 80019d2:	461a      	mov	r2, r3
					< VT100_SCREEN_YMIN + offset)
 80019d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019d8:	3301      	adds	r3, #1
			if (object_struct->_hitbox_array.hitbox_m[0][0].y
 80019da:	429a      	cmp	r2, r3
 80019dc:	da10      	bge.n	8001a00 <flying_object_move_limit+0x120>
				return FALSE;
 80019de:	2300      	movs	r3, #0
 80019e0:	e056      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
		case DOWN:
			if (object_struct->_hitbox_array.hitbox_m[0][0].y + OBJECT_HEIGHT_M
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	799b      	ldrb	r3, [r3, #6]
					- 1 > VT100_SCREEN_YMAX - offset)
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019ec:	f1c3 0318 	rsb	r3, r3, #24
			if (object_struct->_hitbox_array.hitbox_m[0][0].y + OBJECT_HEIGHT_M
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dd07      	ble.n	8001a04 <flying_object_move_limit+0x124>
				return FALSE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e04b      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
 80019f8:	bf00      	nop
 80019fa:	e004      	b.n	8001a06 <flying_object_move_limit+0x126>
			break;
 80019fc:	bf00      	nop
 80019fe:	e002      	b.n	8001a06 <flying_object_move_limit+0x126>
			break;
 8001a00:	bf00      	nop
 8001a02:	e000      	b.n	8001a06 <flying_object_move_limit+0x126>
			break;
 8001a04:	bf00      	nop
		}
		return TRUE;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e042      	b.n	8001a90 <flying_object_move_limit+0x1b0>
		break;
	case LARGE:
		switch (_side) {
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d83c      	bhi.n	8001a8a <flying_object_move_limit+0x1aa>
 8001a10:	a201      	add	r2, pc, #4	; (adr r2, 8001a18 <flying_object_move_limit+0x138>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001a3d 	.word	0x08001a3d
 8001a20:	08001a53 	.word	0x08001a53
 8001a24:	08001a67 	.word	0x08001a67
		case LEFT:
			if (object_struct->_hitbox_array.hitbox_l[0][0].x
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	795b      	ldrb	r3, [r3, #5]
 8001a2c:	461a      	mov	r2, r3
					< VT100_SCREEN_XMIN + offset)
 8001a2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a32:	3301      	adds	r3, #1
			if (object_struct->_hitbox_array.hitbox_l[0][0].x
 8001a34:	429a      	cmp	r2, r3
 8001a36:	da21      	bge.n	8001a7c <flying_object_move_limit+0x19c>
				return FALSE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e029      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
		case RIGHT:
			if (object_struct->_hitbox_array.hitbox_l[0][0].x + OBJECT_WIDTH_L
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	795b      	ldrb	r3, [r3, #5]
					- 1 > VT100_SCREEN_XMAX - offset)
 8001a40:	1d9a      	adds	r2, r3, #6
 8001a42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a46:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
			if (object_struct->_hitbox_array.hitbox_l[0][0].x + OBJECT_WIDTH_L
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dd18      	ble.n	8001a80 <flying_object_move_limit+0x1a0>
				return FALSE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e01e      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
		case UP:
			if (object_struct->_hitbox_array.hitbox_l[0][0].y
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	799b      	ldrb	r3, [r3, #6]
 8001a56:	461a      	mov	r2, r3
					< VT100_SCREEN_YMIN + offset)
 8001a58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a5c:	3301      	adds	r3, #1
			if (object_struct->_hitbox_array.hitbox_l[0][0].y
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da10      	bge.n	8001a84 <flying_object_move_limit+0x1a4>
				return FALSE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e014      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
		case DOWN:
			if (object_struct->_hitbox_array.hitbox_l[0][0].y + OBJECT_HEIGHT_L
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	799b      	ldrb	r3, [r3, #6]
					- 1 > VT100_SCREEN_YMAX - offset)
 8001a6a:	1cda      	adds	r2, r3, #3
 8001a6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a70:	f1c3 0318 	rsb	r3, r3, #24
			if (object_struct->_hitbox_array.hitbox_l[0][0].y + OBJECT_HEIGHT_L
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dd07      	ble.n	8001a88 <flying_object_move_limit+0x1a8>
				return FALSE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e009      	b.n	8001a90 <flying_object_move_limit+0x1b0>
			break;
 8001a7c:	bf00      	nop
 8001a7e:	e004      	b.n	8001a8a <flying_object_move_limit+0x1aa>
			break;
 8001a80:	bf00      	nop
 8001a82:	e002      	b.n	8001a8a <flying_object_move_limit+0x1aa>
			break;
 8001a84:	bf00      	nop
 8001a86:	e000      	b.n	8001a8a <flying_object_move_limit+0x1aa>
			break;
 8001a88:	bf00      	nop
		}
		return TRUE;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <flying_object_move_limit+0x1b0>
		break;
	}
	return FALSE;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <object_hitbox_collision>:

_bool object_hitbox_collision(object_hitbox *object_1, object_hitbox *object_2) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	if ((object_1->exist) && (object_2->exist) && (object_1->x == object_2->x)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	791b      	ldrb	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d011      	beq.n	8001ad2 <object_hitbox_collision+0x36>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	791b      	ldrb	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00d      	beq.n	8001ad2 <object_hitbox_collision+0x36>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	789a      	ldrb	r2, [r3, #2]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	789b      	ldrb	r3, [r3, #2]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d107      	bne.n	8001ad2 <object_hitbox_collision+0x36>
			&& (object_1->y == object_2->y))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	78da      	ldrb	r2, [r3, #3]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	78db      	ldrb	r3, [r3, #3]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d101      	bne.n	8001ad2 <object_hitbox_collision+0x36>
		return TRUE;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <object_hitbox_collision+0x38>
	return FALSE;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <object_list_append>:

void object_list_append(flying_object_s *object_struct,
		flying_object_s *flying_object_array, uint8_t index) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	4613      	mov	r3, r2
 8001aec:	71fb      	strb	r3, [r7, #7]

	*(flying_object_array + index) = *object_struct;
 8001aee:	79fa      	ldrb	r2, [r7, #7]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	441a      	add	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	238f      	movs	r3, #143	; 0x8f
 8001b06:	461a      	mov	r2, r3
 8001b08:	f002 fcf0 	bl	80044ec <memcpy>

}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <object_list_display>:
		destroy_flying_object(flying_object_array + i);
	}
}

void object_list_display(flying_object_s *flying_object_array,
		uint8_t array_size) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]

	for (int i = 0; i < array_size; i++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e00d      	b.n	8001b42 <object_list_display+0x2e>
		display_flying_object(flying_object_array + i);
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fc8a 	bl	8001450 <display_flying_object>
	for (int i = 0; i < array_size; i++)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	dced      	bgt.n	8001b26 <object_list_display+0x12>

}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <object_list_scroll>:
	}

}

void object_list_scroll(flying_object_s *flying_object_array,
		uint8_t array_size, side _side, int8_t offset) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	4608      	mov	r0, r1
 8001b5e:	4611      	mov	r1, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	4603      	mov	r3, r0
 8001b64:	70fb      	strb	r3, [r7, #3]
 8001b66:	460b      	mov	r3, r1
 8001b68:	70bb      	strb	r3, [r7, #2]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	707b      	strb	r3, [r7, #1]
	switch (_side) {
 8001b6e:	78bb      	ldrb	r3, [r7, #2]
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d86f      	bhi.n	8001c54 <object_list_scroll+0x100>
 8001b74:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <object_list_scroll+0x28>)
 8001b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7a:	bf00      	nop
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001bbf 	.word	0x08001bbf
 8001b84:	08001bf1 	.word	0x08001bf1
 8001b88:	08001c23 	.word	0x08001c23
	case LEFT:
		for (int i = 0; i < array_size; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e010      	b.n	8001bb4 <object_list_scroll+0x60>
			scroll_flying_object((flying_object_array + i), _side, offset);
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001ba6:	78b9      	ldrb	r1, [r7, #2]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fdfb 	bl	80017a4 <scroll_flying_object>
		for (int i = 0; i < array_size; i++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dcea      	bgt.n	8001b92 <object_list_scroll+0x3e>
		break;
 8001bbc:	e04a      	b.n	8001c54 <object_list_scroll+0x100>
	case RIGHT:
		for (int i = array_size - 1; i >= 0; i--)
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	e010      	b.n	8001be8 <object_list_scroll+0x94>
			scroll_flying_object((flying_object_array + i), _side, offset);
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001bda:	78b9      	ldrb	r1, [r7, #2]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fde1 	bl	80017a4 <scroll_flying_object>
		for (int i = array_size - 1; i >= 0; i--)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	daeb      	bge.n	8001bc6 <object_list_scroll+0x72>
		break;
 8001bee:	e031      	b.n	8001c54 <object_list_scroll+0x100>
	case UP:
		for (int i = 0; i < array_size; i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e010      	b.n	8001c18 <object_list_scroll+0xc4>
			scroll_flying_object((flying_object_array + i), _side, offset);
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001c0a:	78b9      	ldrb	r1, [r7, #2]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fdc9 	bl	80017a4 <scroll_flying_object>
		for (int i = 0; i < array_size; i++)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3301      	adds	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dcea      	bgt.n	8001bf6 <object_list_scroll+0xa2>
		break;
 8001c20:	e018      	b.n	8001c54 <object_list_scroll+0x100>
	case DOWN:
		for (int i = array_size - 1; i >= 0; i--)
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	e010      	b.n	8001c4c <object_list_scroll+0xf8>
			scroll_flying_object((flying_object_array + i), _side, offset);
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001c3e:	78b9      	ldrb	r1, [r7, #2]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fdaf 	bl	80017a4 <scroll_flying_object>
		for (int i = array_size - 1; i >= 0; i--)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	daeb      	bge.n	8001c2a <object_list_scroll+0xd6>
		break;
 8001c52:	bf00      	nop
	}
}
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <init_objects>:

void init_objects(void) {
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b091      	sub	sp, #68	; 0x44
 8001c60:	af02      	add	r7, sp, #8

	char sprite_temp[OBJECT_HEIGHT_L][OBJECT_WIDTH_L];

	for (int i = 0; i < OBJECT_WIDTH_S; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
 8001c66:	e00b      	b.n	8001c80 <init_objects+0x24>
		sprite_temp[OBJECT_HEIGHT_S - 1][i] =
				spaceship_appearance[OBJECT_HEIGHT_S - 1][i];
 8001c68:	4a6d      	ldr	r2, [pc, #436]	; (8001e20 <init_objects+0x1c4>)
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6c:	4413      	add	r3, r2
 8001c6e:	7819      	ldrb	r1, [r3, #0]
		sprite_temp[OBJECT_HEIGHT_S - 1][i] =
 8001c70:	1d3a      	adds	r2, r7, #4
 8001c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c74:	4413      	add	r3, r2
 8001c76:	460a      	mov	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < OBJECT_WIDTH_S; i++)
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	ddf0      	ble.n	8001c68 <init_objects+0xc>

	init_flying_object(&spaceship, SMALL, SPACESHIP, sprite_temp,
 8001c86:	1d3a      	adds	r2, r7, #4
 8001c88:	2305      	movs	r3, #5
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	4864      	ldr	r0, [pc, #400]	; (8001e24 <init_objects+0x1c8>)
 8001c94:	f7ff f98e 	bl	8000fb4 <init_flying_object>
	SPACESHIP_LIFE_MAX);
	update_coordinates(&spaceship,
 8001c98:	2217      	movs	r2, #23
 8001c9a:	2127      	movs	r1, #39	; 0x27
 8001c9c:	4861      	ldr	r0, [pc, #388]	; (8001e24 <init_objects+0x1c8>)
 8001c9e:	f7ff fb0e 	bl	80012be <update_coordinates>
			((VT100_SCREEN_XMAX / 2) - (OBJECT_WIDTH_S / 2)),
			VT100_SCREEN_YMAX - 1);

	for (int i = 0; i < OBJECT_WIDTH_S; i++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca6:	e00b      	b.n	8001cc0 <init_objects+0x64>
		sprite_temp[OBJECT_HEIGHT_S - 1][i] = ennemy_appearances[0][i];
 8001ca8:	4a5f      	ldr	r2, [pc, #380]	; (8001e28 <init_objects+0x1cc>)
 8001caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cac:	4413      	add	r3, r2
 8001cae:	7819      	ldrb	r1, [r3, #0]
 8001cb0:	1d3a      	adds	r2, r7, #4
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb4:	4413      	add	r3, r2
 8001cb6:	460a      	mov	r2, r1
 8001cb8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < OBJECT_WIDTH_S; i++)
 8001cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8001cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	ddf0      	ble.n	8001ca8 <init_objects+0x4c>

	init_flying_object(&ennemy_s_1, SMALL, ENNEMY_TYPE_1, sprite_temp,
 8001cc6:	1d3a      	adds	r2, r7, #4
 8001cc8:	2301      	movs	r3, #1
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4856      	ldr	r0, [pc, #344]	; (8001e2c <init_objects+0x1d0>)
 8001cd4:	f7ff f96e 	bl	8000fb4 <init_flying_object>
	ENNEMY_LIFE_MIN);

	for (int i = 0; i < OBJECT_WIDTH_S; i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cdc:	e00c      	b.n	8001cf8 <init_objects+0x9c>
		sprite_temp[OBJECT_HEIGHT_S - 1][i] = ennemy_appearances[1][i];
 8001cde:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <init_objects+0x1cc>)
 8001ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	7819      	ldrb	r1, [r3, #0]
 8001ce8:	1d3a      	adds	r2, r7, #4
 8001cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cec:	4413      	add	r3, r2
 8001cee:	460a      	mov	r2, r1
 8001cf0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < OBJECT_WIDTH_S; i++)
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	ddef      	ble.n	8001cde <init_objects+0x82>

	init_flying_object(&ennemy_s_2, SMALL, ENNEMY_TYPE_2, sprite_temp,
 8001cfe:	1d3a      	adds	r2, r7, #4
 8001d00:	2301      	movs	r3, #1
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	2202      	movs	r2, #2
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4849      	ldr	r0, [pc, #292]	; (8001e30 <init_objects+0x1d4>)
 8001d0c:	f7ff f952 	bl	8000fb4 <init_flying_object>
	ENNEMY_LIFE_MIN);

	for (int i = 0; i < OBJECT_WIDTH_S; i++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d14:	e00c      	b.n	8001d30 <init_objects+0xd4>
		sprite_temp[OBJECT_HEIGHT_S - 1][i] = ennemy_appearances[2][i];
 8001d16:	4a44      	ldr	r2, [pc, #272]	; (8001e28 <init_objects+0x1cc>)
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3306      	adds	r3, #6
 8001d1e:	7819      	ldrb	r1, [r3, #0]
 8001d20:	1d3a      	adds	r2, r7, #4
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	4413      	add	r3, r2
 8001d26:	460a      	mov	r2, r1
 8001d28:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < OBJECT_WIDTH_S; i++)
 8001d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	ddef      	ble.n	8001d16 <init_objects+0xba>

	init_flying_object(&ennemy_s_3, SMALL, ENNEMY_TYPE_3, sprite_temp,
 8001d36:	1d3a      	adds	r2, r7, #4
 8001d38:	2301      	movs	r3, #1
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	2203      	movs	r2, #3
 8001d40:	2100      	movs	r1, #0
 8001d42:	483c      	ldr	r0, [pc, #240]	; (8001e34 <init_objects+0x1d8>)
 8001d44:	f7ff f936 	bl	8000fb4 <init_flying_object>
	ENNEMY_LIFE_MIN);

	spaceship_shoot.appearance = SPACESHIP_SHOOT;
 8001d48:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <init_objects+0x1dc>)
 8001d4a:	227c      	movs	r2, #124	; 0x7c
 8001d4c:	701a      	strb	r2, [r3, #0]
	spaceship_shoot.exist = TRUE;
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <init_objects+0x1dc>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	711a      	strb	r2, [r3, #4]

	ennemy_1_shoot.appearance = ENNEMY_SHOOT_TYPE_1;
 8001d54:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <init_objects+0x1e0>)
 8001d56:	2223      	movs	r2, #35	; 0x23
 8001d58:	701a      	strb	r2, [r3, #0]
	ennemy_1_shoot.exist = TRUE;
 8001d5a:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <init_objects+0x1e0>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	711a      	strb	r2, [r3, #4]

	ennemy_2_shoot.appearance = ENNEMY_SHOOT_TYPE_2;
 8001d60:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <init_objects+0x1e4>)
 8001d62:	222a      	movs	r2, #42	; 0x2a
 8001d64:	701a      	strb	r2, [r3, #0]
	ennemy_2_shoot.exist = TRUE;
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <init_objects+0x1e4>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	711a      	strb	r2, [r3, #4]

	ennemy_3_shoot.appearance = ENNEMY_SHOOT_TYPE_3;
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <init_objects+0x1e8>)
 8001d6e:	222d      	movs	r2, #45	; 0x2d
 8001d70:	701a      	strb	r2, [r3, #0]
	ennemy_3_shoot.exist = TRUE;
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <init_objects+0x1e8>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	711a      	strb	r2, [r3, #4]

	shield_part._object = SHIELD;
 8001d78:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <init_objects+0x1ec>)
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	705a      	strb	r2, [r3, #1]
	shield_part.exist = TRUE;
 8001d7e:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <init_objects+0x1ec>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	711a      	strb	r2, [r3, #4]

	shield_index = 0;
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <init_objects+0x1f0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < SHIELD_HEIGHT; i++) {
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8e:	e040      	b.n	8001e12 <init_objects+0x1b6>
		for (int j = 0; j < SHIELD_WIDTH; j++) {
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
 8001d94:	e037      	b.n	8001e06 <init_objects+0x1aa>
			if (shield_appearance[i][j] != ' ') {
 8001d96:	492e      	ldr	r1, [pc, #184]	; (8001e50 <init_objects+0x1f4>)
 8001d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	18ca      	adds	r2, r1, r3
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d029      	beq.n	8001e00 <init_objects+0x1a4>
				shield[i][j] = shield_part;
 8001dac:	4829      	ldr	r0, [pc, #164]	; (8001e54 <init_objects+0x1f8>)
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db2:	461a      	mov	r2, r3
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	441a      	add	r2, r3
 8001db8:	460b      	mov	r3, r1
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	00d9      	lsls	r1, r3, #3
 8001dc0:	1ac9      	subs	r1, r1, r3
 8001dc2:	1853      	adds	r3, r2, r1
 8001dc4:	4403      	add	r3, r0
 8001dc6:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <init_objects+0x1ec>)
 8001dc8:	6810      	ldr	r0, [r2, #0]
 8001dca:	6018      	str	r0, [r3, #0]
 8001dcc:	7912      	ldrb	r2, [r2, #4]
 8001dce:	711a      	strb	r2, [r3, #4]
				shield[i][j].appearance = shield_appearance[i][j];
 8001dd0:	491f      	ldr	r1, [pc, #124]	; (8001e50 <init_objects+0x1f4>)
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	18ca      	adds	r2, r1, r3
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	4413      	add	r3, r2
 8001de0:	781c      	ldrb	r4, [r3, #0]
 8001de2:	481c      	ldr	r0, [pc, #112]	; (8001e54 <init_objects+0x1f8>)
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de8:	461a      	mov	r2, r3
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	441a      	add	r2, r3
 8001dee:	460b      	mov	r3, r1
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	00d9      	lsls	r1, r3, #3
 8001df6:	1ac9      	subs	r1, r1, r3
 8001df8:	1853      	adds	r3, r2, r1
 8001dfa:	4403      	add	r3, r0
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < SHIELD_WIDTH; j++) {
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	3301      	adds	r3, #1
 8001e04:	623b      	str	r3, [r7, #32]
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	2b06      	cmp	r3, #6
 8001e0a:	ddc4      	ble.n	8001d96 <init_objects+0x13a>
	for (int i = 0; i < SHIELD_HEIGHT; i++) {
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	3301      	adds	r3, #1
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	ddbb      	ble.n	8001d90 <init_objects+0x134>
			}
		}
	}

}
 8001e18:	bf00      	nop
 8001e1a:	373c      	adds	r7, #60	; 0x3c
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	20000024 	.word	0x20000024
 8001e24:	200002ec 	.word	0x200002ec
 8001e28:	20000028 	.word	0x20000028
 8001e2c:	2000037c 	.word	0x2000037c
 8001e30:	2000040c 	.word	0x2000040c
 8001e34:	2000049c 	.word	0x2000049c
 8001e38:	200002cc 	.word	0x200002cc
 8001e3c:	200002d4 	.word	0x200002d4
 8001e40:	200002dc 	.word	0x200002dc
 8001e44:	200002e4 	.word	0x200002e4
 8001e48:	200002c4 	.word	0x200002c4
 8001e4c:	20000092 	.word	0x20000092
 8001e50:	20000034 	.word	0x20000034
 8001e54:	20000238 	.word	0x20000238

08001e58 <init_screen>:

	/**/

}

void init_screen(void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	serial_init(SERIAL_BAUD);
 8001e5c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001e60:	f7fe ffbc 	bl	8000ddc <serial_init>

	vt100_move(0, 0);
 8001e64:	2100      	movs	r1, #0
 8001e66:	2000      	movs	r0, #0
 8001e68:	f002 fa7e 	bl	8004368 <vt100_move>
	vt100_clear_screen();
 8001e6c:	f002 faf8 	bl	8004460 <vt100_clear_screen>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <compute_keyboard>:

void compute_keyboard(void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
	uint8_t _char = serial_get_last_char();
 8001e7a:	f7ff f835 	bl	8000ee8 <serial_get_last_char>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	if (_char == 'p') {
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b70      	cmp	r3, #112	; 0x70
 8001e86:	d101      	bne.n	8001e8c <compute_keyboard+0x18>
		toggle_pause();
 8001e88:	f001 f9fc 	bl	8003284 <toggle_pause>
	}
	if (!(keyboard_flags & KFPAUS)) {
 8001e8c:	4b62      	ldr	r3, [pc, #392]	; (8002018 <compute_keyboard+0x1a4>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f040 80bb 	bne.w	8002010 <compute_keyboard+0x19c>
		switch (_char) {
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b64      	cmp	r3, #100	; 0x64
 8001e9e:	d035      	beq.n	8001f0c <compute_keyboard+0x98>
 8001ea0:	2b64      	cmp	r3, #100	; 0x64
 8001ea2:	dc02      	bgt.n	8001eaa <compute_keyboard+0x36>
 8001ea4:	2b0d      	cmp	r3, #13
 8001ea6:	d057      	beq.n	8001f58 <compute_keyboard+0xe4>
			 charge_level(LEVEL_1);

			 break;*/
		}
	}
}
 8001ea8:	e0b2      	b.n	8002010 <compute_keyboard+0x19c>
		switch (_char) {
 8001eaa:	2b71      	cmp	r3, #113	; 0x71
 8001eac:	d003      	beq.n	8001eb6 <compute_keyboard+0x42>
 8001eae:	2b73      	cmp	r3, #115	; 0x73
 8001eb0:	f000 809f 	beq.w	8001ff2 <compute_keyboard+0x17e>
}
 8001eb4:	e0ac      	b.n	8002010 <compute_keyboard+0x19c>
			if (lev_num_flag != MENU) {
 8001eb6:	4b59      	ldr	r3, [pc, #356]	; (800201c <compute_keyboard+0x1a8>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80a1 	beq.w	8002002 <compute_keyboard+0x18e>
				switch (lev_num_flag) {
 8001ec0:	4b56      	ldr	r3, [pc, #344]	; (800201c <compute_keyboard+0x1a8>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	f200 809c 	bhi.w	8002002 <compute_keyboard+0x18e>
 8001eca:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <compute_keyboard+0x5c>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001f09 	.word	0x08001f09
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001efd 	.word	0x08001efd
 8001ee0:	08001f09 	.word	0x08001f09
					scroll_flying_object(&level_1.spaceship, LEFT, 1);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	484d      	ldr	r0, [pc, #308]	; (8002020 <compute_keyboard+0x1ac>)
 8001eea:	f7ff fc5b 	bl	80017a4 <scroll_flying_object>
					break;
 8001eee:	e00c      	b.n	8001f0a <compute_keyboard+0x96>
					scroll_flying_object(&level_2.spaceship, LEFT, 1);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	484b      	ldr	r0, [pc, #300]	; (8002024 <compute_keyboard+0x1b0>)
 8001ef6:	f7ff fc55 	bl	80017a4 <scroll_flying_object>
					break;
 8001efa:	e006      	b.n	8001f0a <compute_keyboard+0x96>
					scroll_flying_object(&level_3.spaceship, LEFT, 1);
 8001efc:	2201      	movs	r2, #1
 8001efe:	2100      	movs	r1, #0
 8001f00:	4849      	ldr	r0, [pc, #292]	; (8002028 <compute_keyboard+0x1b4>)
 8001f02:	f7ff fc4f 	bl	80017a4 <scroll_flying_object>
					break;
 8001f06:	e000      	b.n	8001f0a <compute_keyboard+0x96>
					break;
 8001f08:	bf00      	nop
			break;
 8001f0a:	e07a      	b.n	8002002 <compute_keyboard+0x18e>
			switch (lev_num_flag) {
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <compute_keyboard+0x1a8>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d878      	bhi.n	8002006 <compute_keyboard+0x192>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <compute_keyboard+0xa8>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f55 	.word	0x08001f55
 8001f20:	08001f31 	.word	0x08001f31
 8001f24:	08001f3d 	.word	0x08001f3d
 8001f28:	08001f49 	.word	0x08001f49
 8001f2c:	08001f55 	.word	0x08001f55
				scroll_flying_object(&level_1.spaceship, RIGHT, 1);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2101      	movs	r1, #1
 8001f34:	483a      	ldr	r0, [pc, #232]	; (8002020 <compute_keyboard+0x1ac>)
 8001f36:	f7ff fc35 	bl	80017a4 <scroll_flying_object>
				break;
 8001f3a:	e00c      	b.n	8001f56 <compute_keyboard+0xe2>
				scroll_flying_object(&level_2.spaceship, RIGHT, 1);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4838      	ldr	r0, [pc, #224]	; (8002024 <compute_keyboard+0x1b0>)
 8001f42:	f7ff fc2f 	bl	80017a4 <scroll_flying_object>
				break;
 8001f46:	e006      	b.n	8001f56 <compute_keyboard+0xe2>
				scroll_flying_object(&level_3.spaceship, RIGHT, 1);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4836      	ldr	r0, [pc, #216]	; (8002028 <compute_keyboard+0x1b4>)
 8001f4e:	f7ff fc29 	bl	80017a4 <scroll_flying_object>
				break;
 8001f52:	e000      	b.n	8001f56 <compute_keyboard+0xe2>
				break;
 8001f54:	bf00      	nop
			break;
 8001f56:	e056      	b.n	8002006 <compute_keyboard+0x192>
			switch (lev_num_flag) {
 8001f58:	4b30      	ldr	r3, [pc, #192]	; (800201c <compute_keyboard+0x1a8>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d854      	bhi.n	800200a <compute_keyboard+0x196>
 8001f60:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <compute_keyboard+0xf4>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001fef 	.word	0x08001fef
 8001f6c:	08001f7d 	.word	0x08001f7d
 8001f70:	08001fa3 	.word	0x08001fa3
 8001f74:	08001fc9 	.word	0x08001fc9
 8001f78:	08001fef 	.word	0x08001fef
						level_1.spaceship._hitbox_array.hitbox_s[0][0].x
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <compute_keyboard+0x1b8>)
 8001f7e:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8001f82:	3308      	adds	r3, #8
 8001f84:	781b      	ldrb	r3, [r3, #0]
				init_shoot(SPACESHIP, &level_1,
 8001f86:	3301      	adds	r3, #1
 8001f88:	b2da      	uxtb	r2, r3
						level_1.spaceship._hitbox_array.hitbox_s[0][0].y - 1);
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <compute_keyboard+0x1b8>)
 8001f8c:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8001f90:	3309      	adds	r3, #9
 8001f92:	781b      	ldrb	r3, [r3, #0]
				init_shoot(SPACESHIP, &level_1,
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4924      	ldr	r1, [pc, #144]	; (800202c <compute_keyboard+0x1b8>)
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f000 f84c 	bl	8002038 <init_shoot>
				break;
 8001fa0:	e026      	b.n	8001ff0 <compute_keyboard+0x17c>
						level_2.spaceship._hitbox_array.hitbox_s[0][0].x
 8001fa2:	4b23      	ldr	r3, [pc, #140]	; (8002030 <compute_keyboard+0x1bc>)
 8001fa4:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8001fa8:	3308      	adds	r3, #8
 8001faa:	781b      	ldrb	r3, [r3, #0]
				init_shoot(SPACESHIP, &level_2,
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
						level_2.spaceship._hitbox_array.hitbox_s[0][0].y - 1);
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <compute_keyboard+0x1bc>)
 8001fb2:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8001fb6:	3309      	adds	r3, #9
 8001fb8:	781b      	ldrb	r3, [r3, #0]
				init_shoot(SPACESHIP, &level_2,
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	491c      	ldr	r1, [pc, #112]	; (8002030 <compute_keyboard+0x1bc>)
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f000 f839 	bl	8002038 <init_shoot>
				break;
 8001fc6:	e013      	b.n	8001ff0 <compute_keyboard+0x17c>
						level_3.spaceship._hitbox_array.hitbox_s[0][0].x
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <compute_keyboard+0x1c0>)
 8001fca:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8001fce:	3308      	adds	r3, #8
 8001fd0:	781b      	ldrb	r3, [r3, #0]
				init_shoot(SPACESHIP, &level_3,
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
						level_3.spaceship._hitbox_array.hitbox_s[0][0].y - 1);
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <compute_keyboard+0x1c0>)
 8001fd8:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8001fdc:	3309      	adds	r3, #9
 8001fde:	781b      	ldrb	r3, [r3, #0]
				init_shoot(SPACESHIP, &level_3,
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	4913      	ldr	r1, [pc, #76]	; (8002034 <compute_keyboard+0x1c0>)
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f000 f826 	bl	8002038 <init_shoot>
				break;
 8001fec:	e000      	b.n	8001ff0 <compute_keyboard+0x17c>
				break;
 8001fee:	bf00      	nop
			break;
 8001ff0:	e00b      	b.n	800200a <compute_keyboard+0x196>
			if (lev_num_flag == MENU)
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <compute_keyboard+0x1a8>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <compute_keyboard+0x19a>
				charge_level(LEVEL_1);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f000 ff62 	bl	8002ec4 <charge_level>
			break;
 8002000:	e005      	b.n	800200e <compute_keyboard+0x19a>
			break;
 8002002:	bf00      	nop
 8002004:	e004      	b.n	8002010 <compute_keyboard+0x19c>
			break;
 8002006:	bf00      	nop
 8002008:	e002      	b.n	8002010 <compute_keyboard+0x19c>
			break;
 800200a:	bf00      	nop
 800200c:	e000      	b.n	8002010 <compute_keyboard+0x19c>
			break;
 800200e:	bf00      	nop
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000091 	.word	0x20000091
 800201c:	20000093 	.word	0x20000093
 8002020:	200028ef 	.word	0x200028ef
 8002024:	20004df3 	.word	0x20004df3
 8002028:	200072f7 	.word	0x200072f7
 800202c:	2000052c 	.word	0x2000052c
 8002030:	20002a30 	.word	0x20002a30
 8002034:	20004f34 	.word	0x20004f34

08002038 <init_shoot>:

void init_shoot(object _object, level_s *level, uint8_t x, uint8_t y) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6039      	str	r1, [r7, #0]
 8002040:	4611      	mov	r1, r2
 8002042:	461a      	mov	r2, r3
 8002044:	4603      	mov	r3, r0
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	460b      	mov	r3, r1
 800204a:	71bb      	strb	r3, [r7, #6]
 800204c:	4613      	mov	r3, r2
 800204e:	717b      	strb	r3, [r7, #5]

	switch (_object) {
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b04      	cmp	r3, #4
 8002054:	f200 80a2 	bhi.w	800219c <init_shoot+0x164>
 8002058:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <init_shoot+0x28>)
 800205a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205e:	bf00      	nop
 8002060:	08002075 	.word	0x08002075
 8002064:	080020bf 	.word	0x080020bf
 8002068:	08002109 	.word	0x08002109
 800206c:	08002153 	.word	0x08002153
 8002070:	0800219d 	.word	0x0800219d
	case SPACESHIP:
		level->shoot_list[level->shoot_index] = spaceship_shoot;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800207a:	3332      	adds	r3, #50	; 0x32
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4619      	mov	r1, r3
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	460b      	mov	r3, r1
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	4413      	add	r3, r2
 800208a:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800208e:	3310      	adds	r3, #16
 8002090:	4a7a      	ldr	r2, [pc, #488]	; (800227c <init_shoot+0x244>)
 8002092:	3302      	adds	r3, #2
 8002094:	6810      	ldr	r0, [r2, #0]
 8002096:	6018      	str	r0, [r3, #0]
 8002098:	7912      	ldrb	r2, [r2, #4]
 800209a:	711a      	strb	r2, [r3, #4]
		level->shoot_list[level->shoot_index]._object = SPACESHIP;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80020a2:	3332      	adds	r3, #50	; 0x32
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4619      	mov	r1, r3
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	460b      	mov	r3, r1
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80020b6:	3313      	adds	r3, #19
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
		break;
 80020bc:	e06e      	b.n	800219c <init_shoot+0x164>
	case ENNEMY_TYPE_1:
		level->shoot_list[level->shoot_index] = ennemy_1_shoot;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80020c4:	3332      	adds	r3, #50	; 0x32
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	460b      	mov	r3, r1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80020d8:	3310      	adds	r3, #16
 80020da:	4a69      	ldr	r2, [pc, #420]	; (8002280 <init_shoot+0x248>)
 80020dc:	3302      	adds	r3, #2
 80020de:	6810      	ldr	r0, [r2, #0]
 80020e0:	6018      	str	r0, [r3, #0]
 80020e2:	7912      	ldrb	r2, [r2, #4]
 80020e4:	711a      	strb	r2, [r3, #4]
		level->shoot_list[level->shoot_index]._object = ENNEMY_TYPE_1;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80020ec:	3332      	adds	r3, #50	; 0x32
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	460b      	mov	r3, r1
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002100:	3313      	adds	r3, #19
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
		break;
 8002106:	e049      	b.n	800219c <init_shoot+0x164>
	case ENNEMY_TYPE_2:
		level->shoot_list[level->shoot_index] = ennemy_2_shoot;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800210e:	3332      	adds	r3, #50	; 0x32
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	4619      	mov	r1, r3
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	460b      	mov	r3, r1
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	4413      	add	r3, r2
 800211e:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002122:	3310      	adds	r3, #16
 8002124:	4a57      	ldr	r2, [pc, #348]	; (8002284 <init_shoot+0x24c>)
 8002126:	3302      	adds	r3, #2
 8002128:	6810      	ldr	r0, [r2, #0]
 800212a:	6018      	str	r0, [r3, #0]
 800212c:	7912      	ldrb	r2, [r2, #4]
 800212e:	711a      	strb	r2, [r3, #4]
		level->shoot_list[level->shoot_index]._object = ENNEMY_TYPE_2;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002136:	3332      	adds	r3, #50	; 0x32
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4619      	mov	r1, r3
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	460b      	mov	r3, r1
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	4413      	add	r3, r2
 8002146:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800214a:	3313      	adds	r3, #19
 800214c:	2202      	movs	r2, #2
 800214e:	701a      	strb	r2, [r3, #0]
		break;
 8002150:	e024      	b.n	800219c <init_shoot+0x164>
	case ENNEMY_TYPE_3:
		level->shoot_list[level->shoot_index] = ennemy_3_shoot;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002158:	3332      	adds	r3, #50	; 0x32
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	460b      	mov	r3, r1
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	4413      	add	r3, r2
 8002168:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800216c:	3310      	adds	r3, #16
 800216e:	4a46      	ldr	r2, [pc, #280]	; (8002288 <init_shoot+0x250>)
 8002170:	3302      	adds	r3, #2
 8002172:	6810      	ldr	r0, [r2, #0]
 8002174:	6018      	str	r0, [r3, #0]
 8002176:	7912      	ldrb	r2, [r2, #4]
 8002178:	711a      	strb	r2, [r3, #4]
		level->shoot_list[level->shoot_index]._object = ENNEMY_TYPE_3;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002180:	3332      	adds	r3, #50	; 0x32
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	460b      	mov	r3, r1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	4413      	add	r3, r2
 8002190:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002194:	3313      	adds	r3, #19
 8002196:	2203      	movs	r2, #3
 8002198:	701a      	strb	r2, [r3, #0]
		break;
 800219a:	bf00      	nop
	case SHIELD:
		/* nothing to do */
		break;
	}

	level->shoot_list[level->shoot_index].x = x;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80021a2:	3332      	adds	r3, #50	; 0x32
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	460b      	mov	r3, r1
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80021b6:	3314      	adds	r3, #20
 80021b8:	79ba      	ldrb	r2, [r7, #6]
 80021ba:	701a      	strb	r2, [r3, #0]
	level->shoot_list[level->shoot_index].y = y;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80021c2:	3332      	adds	r3, #50	; 0x32
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	460b      	mov	r3, r1
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80021d6:	3315      	adds	r3, #21
 80021d8:	797a      	ldrb	r2, [r7, #5]
 80021da:	701a      	strb	r2, [r3, #0]

	vt100_move(level->shoot_list[level->shoot_index].x,
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80021e2:	3332      	adds	r3, #50	; 0x32
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4619      	mov	r1, r3
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	460b      	mov	r3, r1
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80021f6:	3314      	adds	r3, #20
 80021f8:	7818      	ldrb	r0, [r3, #0]
			level->shoot_list[level->shoot_index].y);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002200:	3332      	adds	r3, #50	; 0x32
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
	vt100_move(level->shoot_list[level->shoot_index].x,
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	460b      	mov	r3, r1
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	4413      	add	r3, r2
 8002210:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002214:	3315      	adds	r3, #21
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	f002 f8a5 	bl	8004368 <vt100_move>
	serial_putchar(level->shoot_list[level->shoot_index].appearance);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002224:	3332      	adds	r3, #50	; 0x32
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	460b      	mov	r3, r1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	4413      	add	r3, r2
 8002234:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002238:	3312      	adds	r3, #18
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fe29 	bl	8000e94 <serial_putchar>

	level->shoot_index++;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002248:	3332      	adds	r3, #50	; 0x32
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	b2da      	uxtb	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002256:	3332      	adds	r3, #50	; 0x32
 8002258:	701a      	strb	r2, [r3, #0]
	level->shoot_index %= SHOOT_AMOUNT;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002260:	3332      	adds	r3, #50	; 0x32
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	b2da      	uxtb	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002270:	3332      	adds	r3, #50	; 0x32
 8002272:	701a      	strb	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200002cc 	.word	0x200002cc
 8002280:	200002d4 	.word	0x200002d4
 8002284:	200002dc 	.word	0x200002dc
 8002288:	200002e4 	.word	0x200002e4

0800228c <erase_shoot>:

void erase_shoot(object_hitbox *_shoot) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	vt100_move(_shoot->x, _shoot->y);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	789a      	ldrb	r2, [r3, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	78db      	ldrb	r3, [r3, #3]
 800229c:	4619      	mov	r1, r3
 800229e:	4610      	mov	r0, r2
 80022a0:	f002 f862 	bl	8004368 <vt100_move>
	serial_putchar(' ');
 80022a4:	2020      	movs	r0, #32
 80022a6:	f7fe fdf5 	bl	8000e94 <serial_putchar>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <shoot_events>:

void shoot_events(level_s *level) {
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b0bb      	sub	sp, #236	; 0xec
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

	object_hitbox temp_1;
	object_hitbox temp_2;
	flying_object_s temp_3;

	for (int i = 0; i < SHOOT_AMOUNT; i++) {
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022c2:	f000 bd3f 	b.w	8002d44 <shoot_events+0xa90>
		if (level->shoot_list[i].exist == TRUE) {
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80022d8:	3316      	adds	r3, #22
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	f040 852c 	bne.w	8002d3a <shoot_events+0xa86>

			erase_shoot(&level->shoot_list[i]);
 80022e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80022f0:	3310      	adds	r3, #16
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	3302      	adds	r3, #2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ffc7 	bl	800228c <erase_shoot>

			if (level->shoot_list[i]._object == ENNEMY_TYPE_1
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	440b      	add	r3, r1
 800230c:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002310:	3313      	adds	r3, #19
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d01a      	beq.n	800234e <shoot_events+0x9a>
					|| level->shoot_list[i]._object == ENNEMY_TYPE_2
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	440b      	add	r3, r1
 8002326:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800232a:	3313      	adds	r3, #19
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d00d      	beq.n	800234e <shoot_events+0x9a>
					|| level->shoot_list[i]._object == ENNEMY_TYPE_3) {
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	440b      	add	r3, r1
 8002340:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002344:	3313      	adds	r3, #19
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b03      	cmp	r3, #3
 800234a:	f040 80fd 	bne.w	8002548 <shoot_events+0x294>
				level->shoot_list[i].y++;
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	440b      	add	r3, r1
 800235c:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002360:	3315      	adds	r3, #21
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	b2d8      	uxtb	r0, r3
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	440b      	add	r3, r1
 8002376:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800237a:	3315      	adds	r3, #21
 800237c:	4602      	mov	r2, r0
 800237e:	701a      	strb	r2, [r3, #0]

				for (int k = 0; k < OBJECT_WIDTH_S; k++) { //collision ennemy shoot/spaceship
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002386:	e063      	b.n	8002450 <shoot_events+0x19c>
					temp_1 =
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	440b      	add	r3, r1
 8002396:	f503 520f 	add.w	r2, r3, #9152	; 0x23c0
 800239a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800239e:	3206      	adds	r2, #6
 80023a0:	6810      	ldr	r0, [r2, #0]
 80023a2:	6018      	str	r0, [r3, #0]
 80023a4:	7912      	ldrb	r2, [r2, #4]
 80023a6:	711a      	strb	r2, [r3, #4]
							level->spaceship._hitbox_array.hitbox_s[OBJECT_HEIGHT_S
									- 1][k];
					temp_2 = level->shoot_list[i];
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80023ba:	3310      	adds	r3, #16
 80023bc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80023c0:	3302      	adds	r3, #2
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	6010      	str	r0, [r2, #0]
 80023c6:	791b      	ldrb	r3, [r3, #4]
 80023c8:	7113      	strb	r3, [r2, #4]
					if (object_hitbox_collision(&temp_1, &temp_2)) {
 80023ca:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80023ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fb61 	bl	8001a9c <object_hitbox_collision>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d032      	beq.n	8002446 <shoot_events+0x192>
						level->spaceship.life--;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 80023e6:	3303      	adds	r3, #3
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 80023f4:	3303      	adds	r3, #3
 80023f6:	701a      	strb	r2, [r3, #0]
						if (level->spaceship.life == 0) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 80023fe:	3303      	adds	r3, #3
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f040 84a4 	bne.w	8002d50 <shoot_events+0xa9c>
							destroy_flying_object(&level->spaceship);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 800240e:	3303      	adds	r3, #3
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fed4 	bl	80011be <destroy_flying_object>
							destroy_hitbox(&temp_2);
 8002416:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fdae 	bl	8000f7c <destroy_hitbox>
							level->shoot_list[i] = temp_2;
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	440b      	add	r3, r1
 800242e:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002432:	3310      	adds	r3, #16
 8002434:	3302      	adds	r3, #2
 8002436:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800243a:	6810      	ldr	r0, [r2, #0]
 800243c:	6018      	str	r0, [r3, #0]
 800243e:	7912      	ldrb	r2, [r2, #4]
 8002440:	711a      	strb	r2, [r3, #4]
						}
						return;
 8002442:	f000 bc85 	b.w	8002d50 <shoot_events+0xa9c>
				for (int k = 0; k < OBJECT_WIDTH_S; k++) { //collision ennemy shoot/spaceship
 8002446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244a:	3301      	adds	r3, #1
 800244c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002454:	2b02      	cmp	r3, #2
 8002456:	dd97      	ble.n	8002388 <shoot_events+0xd4>
					}
				}

				for (int j = 0; j < SHOOT_AMOUNT; j++) { //collision ennemy shoot/spaceship shoot
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800245e:	e06f      	b.n	8002540 <shoot_events+0x28c>
					temp_1 = level->shoot_list[i];
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	440b      	add	r3, r1
 800246e:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002472:	3310      	adds	r3, #16
 8002474:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002478:	3302      	adds	r3, #2
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	6010      	str	r0, [r2, #0]
 800247e:	791b      	ldrb	r3, [r3, #4]
 8002480:	7113      	strb	r3, [r2, #4]
					temp_2 = level->shoot_list[j];
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	440b      	add	r3, r1
 8002490:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002494:	3310      	adds	r3, #16
 8002496:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800249a:	3302      	adds	r3, #2
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	6010      	str	r0, [r2, #0]
 80024a0:	791b      	ldrb	r3, [r3, #4]
 80024a2:	7113      	strb	r3, [r2, #4]
					if (object_hitbox_collision(&temp_1, &temp_2)
 80024a4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80024a8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff faf4 	bl	8001a9c <object_hitbox_collision>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d03d      	beq.n	8002536 <shoot_events+0x282>
							&& temp_2._object == SPACESHIP) {
 80024ba:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d139      	bne.n	8002536 <shoot_events+0x282>
						destroy_hitbox(&temp_1);
 80024c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fd58 	bl	8000f7c <destroy_hitbox>
						destroy_hitbox(&temp_2);
 80024cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fd53 	bl	8000f7c <destroy_hitbox>
						level->shoot_list[i] = temp_1;
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80024e8:	3310      	adds	r3, #16
 80024ea:	3302      	adds	r3, #2
 80024ec:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024f0:	6810      	ldr	r0, [r2, #0]
 80024f2:	6018      	str	r0, [r3, #0]
 80024f4:	7912      	ldrb	r2, [r2, #4]
 80024f6:	711a      	strb	r2, [r3, #4]
						level->shoot_list[j] = temp_2;
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	440b      	add	r3, r1
 8002506:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800250a:	3310      	adds	r3, #16
 800250c:	3302      	adds	r3, #2
 800250e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002512:	6810      	ldr	r0, [r2, #0]
 8002514:	6018      	str	r0, [r3, #0]
 8002516:	7912      	ldrb	r2, [r2, #4]
 8002518:	711a      	strb	r2, [r3, #4]
						level->score += SHOOT_COLLISION_SCORE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002520:	3334      	adds	r3, #52	; 0x34
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f103 020a 	add.w	r2, r3, #10
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800252e:	3334      	adds	r3, #52	; 0x34
 8002530:	601a      	str	r2, [r3, #0]
						return;
 8002532:	f000 bc16 	b.w	8002d62 <shoot_events+0xaae>
				for (int j = 0; j < SHOOT_AMOUNT; j++) { //collision ennemy shoot/spaceship shoot
 8002536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800253a:	3301      	adds	r3, #1
 800253c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002544:	2b1f      	cmp	r3, #31
 8002546:	dd8b      	ble.n	8002460 <shoot_events+0x1ac>
					}
				}
			}

			if (level->shoot_list[i]._object == SPACESHIP) {
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	440b      	add	r3, r1
 8002556:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800255a:	3313      	adds	r3, #19
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 82ec 	bne.w	8002b3c <shoot_events+0x888>
				level->shoot_list[i].y--;
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	440b      	add	r3, r1
 8002572:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002576:	3315      	adds	r3, #21
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	3b01      	subs	r3, #1
 800257c:	b2d8      	uxtb	r0, r3
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	440b      	add	r3, r1
 800258c:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002590:	3315      	adds	r3, #21
 8002592:	4602      	mov	r2, r0
 8002594:	701a      	strb	r2, [r3, #0]

				switch (level->ennemy_size) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800259c:	333d      	adds	r3, #61	; 0x3d
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	f000 80bf 	beq.w	8002724 <shoot_events+0x470>
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	f000 8177 	beq.w	800289a <shoot_events+0x5e6>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f040 822f 	bne.w	8002a10 <shoot_events+0x75c>
				case SMALL:
					for (int j = 0; j < ENNEMY_AMOUNT; j++) { //collision spaceship shoot/ennemy
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025b8:	e0ae      	b.n	8002718 <shoot_events+0x464>
						for (int k = 0; k < OBJECT_HEIGHT_S; k++) {
 80025ba:	2300      	movs	r3, #0
 80025bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025c0:	e0a0      	b.n	8002704 <shoot_events+0x450>
							for (int l = 0; l < OBJECT_WIDTH_S; l++) {
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025c8:	e092      	b.n	80026f0 <shoot_events+0x43c>
								temp_1 =
 80025ca:	687c      	ldr	r4, [r7, #4]
 80025cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025d0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80025d4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80025d8:	461a      	mov	r2, r3
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	441a      	add	r2, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a1b      	subs	r3, r3, r0
 80025e4:	441a      	add	r2, r3
 80025e6:	460b      	mov	r3, r1
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a5b      	subs	r3, r3, r1
 80025f0:	4413      	add	r3, r2
 80025f2:	18e2      	adds	r2, r4, r3
 80025f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80025f8:	3206      	adds	r2, #6
 80025fa:	6810      	ldr	r0, [r2, #0]
 80025fc:	6018      	str	r0, [r3, #0]
 80025fe:	7912      	ldrb	r2, [r2, #4]
 8002600:	711a      	strb	r2, [r3, #4]
										level->ennemy_array[j]._hitbox_array.hitbox_s[k][l];
								temp_2 = level->shoot_list[i];
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	440b      	add	r3, r1
 8002610:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002614:	3310      	adds	r3, #16
 8002616:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800261a:	3302      	adds	r3, #2
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	6010      	str	r0, [r2, #0]
 8002620:	791b      	ldrb	r3, [r3, #4]
 8002622:	7113      	strb	r3, [r2, #4]
								temp_3 = level->ennemy_array[j];
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	440b      	add	r3, r1
 8002636:	f107 0008 	add.w	r0, r7, #8
 800263a:	3303      	adds	r3, #3
 800263c:	228f      	movs	r2, #143	; 0x8f
 800263e:	4619      	mov	r1, r3
 8002640:	f001 ff54 	bl	80044ec <memcpy>
								if (object_hitbox_collision(&temp_1, &temp_2)) {
 8002644:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002648:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fa24 	bl	8001a9c <object_hitbox_collision>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d045      	beq.n	80026e6 <shoot_events+0x432>
									temp_3.life--;
 800265a:	7a3b      	ldrb	r3, [r7, #8]
 800265c:	3b01      	subs	r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	723b      	strb	r3, [r7, #8]
									if (temp_3.life == 0) {
 8002662:	7a3b      	ldrb	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f040 8375 	bne.w	8002d54 <shoot_events+0xaa0>
										destroy_flying_object(&temp_3);
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fda5 	bl	80011be <destroy_flying_object>
										destroy_hitbox(&temp_2);
 8002674:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fc7f 	bl	8000f7c <destroy_hitbox>
										level->ennemy_array[j] = temp_3;
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	440b      	add	r3, r1
 8002690:	3303      	adds	r3, #3
 8002692:	f107 0108 	add.w	r1, r7, #8
 8002696:	228f      	movs	r2, #143	; 0x8f
 8002698:	4618      	mov	r0, r3
 800269a:	f001 ff27 	bl	80044ec <memcpy>
										level->shoot_list[i] = temp_2;
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80026b0:	3310      	adds	r3, #16
 80026b2:	3302      	adds	r3, #2
 80026b4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80026b8:	6810      	ldr	r0, [r2, #0]
 80026ba:	6018      	str	r0, [r3, #0]
 80026bc:	7912      	ldrb	r2, [r2, #4]
 80026be:	711a      	strb	r2, [r3, #4]
										level->ennemy_num--;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	789b      	ldrb	r3, [r3, #2]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	709a      	strb	r2, [r3, #2]
										level->score += ENNEMY_COLLISION_SCORE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80026d2:	3334      	adds	r3, #52	; 0x34
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80026e0:	3334      	adds	r3, #52	; 0x34
 80026e2:	601a      	str	r2, [r3, #0]
									}
									return;
 80026e4:	e336      	b.n	8002d54 <shoot_events+0xaa0>
							for (int l = 0; l < OBJECT_WIDTH_S; l++) {
 80026e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026ea:	3301      	adds	r3, #1
 80026ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	f77f af68 	ble.w	80025ca <shoot_events+0x316>
						for (int k = 0; k < OBJECT_HEIGHT_S; k++) {
 80026fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026fe:	3301      	adds	r3, #1
 8002700:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002704:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f77f af5a 	ble.w	80025c2 <shoot_events+0x30e>
					for (int j = 0; j < ENNEMY_AMOUNT; j++) { //collision spaceship shoot/ennemy
 800270e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002712:	3301      	adds	r3, #1
 8002714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800271c:	2b3f      	cmp	r3, #63	; 0x3f
 800271e:	f77f af4c 	ble.w	80025ba <shoot_events+0x306>
								}
							}
						}
					}
					break;
 8002722:	e175      	b.n	8002a10 <shoot_events+0x75c>
				case MEDIUM:
					for (int j = 0; j < ENNEMY_AMOUNT; j++) { //collision spaceship shoot/ennemy
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800272a:	e0b0      	b.n	800288e <shoot_events+0x5da>
						for (int k = 0; k < OBJECT_HEIGHT_M; k++) {
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002732:	e0a2      	b.n	800287a <shoot_events+0x5c6>
							for (int l = 0; l < OBJECT_WIDTH_M; l++) {
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800273a:	e094      	b.n	8002866 <shoot_events+0x5b2>
								temp_1 =
 800273c:	687c      	ldr	r4, [r7, #4]
 800273e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002742:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8002746:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800274a:	461a      	mov	r2, r3
 800274c:	0092      	lsls	r2, r2, #2
 800274e:	441a      	add	r2, r3
 8002750:	4603      	mov	r3, r0
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4403      	add	r3, r0
 8002756:	0098      	lsls	r0, r3, #2
 8002758:	4403      	add	r3, r0
 800275a:	441a      	add	r2, r3
 800275c:	460b      	mov	r3, r1
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a5b      	subs	r3, r3, r1
 8002766:	4413      	add	r3, r2
 8002768:	18e2      	adds	r2, r4, r3
 800276a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800276e:	3206      	adds	r2, #6
 8002770:	6810      	ldr	r0, [r2, #0]
 8002772:	6018      	str	r0, [r3, #0]
 8002774:	7912      	ldrb	r2, [r2, #4]
 8002776:	711a      	strb	r2, [r3, #4]
										level->ennemy_array[j]._hitbox_array.hitbox_m[k][l];
								temp_2 = level->shoot_list[i];
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	440b      	add	r3, r1
 8002786:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800278a:	3310      	adds	r3, #16
 800278c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002790:	3302      	adds	r3, #2
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	6010      	str	r0, [r2, #0]
 8002796:	791b      	ldrb	r3, [r3, #4]
 8002798:	7113      	strb	r3, [r2, #4]
								temp_3 = level->ennemy_array[j];
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f107 0008 	add.w	r0, r7, #8
 80027b0:	3303      	adds	r3, #3
 80027b2:	228f      	movs	r2, #143	; 0x8f
 80027b4:	4619      	mov	r1, r3
 80027b6:	f001 fe99 	bl	80044ec <memcpy>
								if (object_hitbox_collision(&temp_1, &temp_2)) {
 80027ba:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80027be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff f969 	bl	8001a9c <object_hitbox_collision>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d045      	beq.n	800285c <shoot_events+0x5a8>
									temp_3.life--;
 80027d0:	7a3b      	ldrb	r3, [r7, #8]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	723b      	strb	r3, [r7, #8]
									if (temp_3.life == 0) {
 80027d8:	7a3b      	ldrb	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 82bc 	bne.w	8002d58 <shoot_events+0xaa4>
										destroy_flying_object(&temp_3);
 80027e0:	f107 0308 	add.w	r3, r7, #8
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fcea 	bl	80011be <destroy_flying_object>
										destroy_hitbox(&temp_2);
 80027ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fbc4 	bl	8000f7c <destroy_hitbox>
										level->ennemy_array[j] = temp_3;
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	440b      	add	r3, r1
 8002806:	3303      	adds	r3, #3
 8002808:	f107 0108 	add.w	r1, r7, #8
 800280c:	228f      	movs	r2, #143	; 0x8f
 800280e:	4618      	mov	r0, r3
 8002810:	f001 fe6c 	bl	80044ec <memcpy>
										level->shoot_list[i] = temp_2;
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	440b      	add	r3, r1
 8002822:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002826:	3310      	adds	r3, #16
 8002828:	3302      	adds	r3, #2
 800282a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800282e:	6810      	ldr	r0, [r2, #0]
 8002830:	6018      	str	r0, [r3, #0]
 8002832:	7912      	ldrb	r2, [r2, #4]
 8002834:	711a      	strb	r2, [r3, #4]
										level->ennemy_num--;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	789b      	ldrb	r3, [r3, #2]
 800283a:	3b01      	subs	r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	709a      	strb	r2, [r3, #2]
										level->score += ENNEMY_COLLISION_SCORE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002848:	3334      	adds	r3, #52	; 0x34
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002856:	3334      	adds	r3, #52	; 0x34
 8002858:	601a      	str	r2, [r3, #0]
									}
									return;
 800285a:	e27d      	b.n	8002d58 <shoot_events+0xaa4>
							for (int l = 0; l < OBJECT_WIDTH_M; l++) {
 800285c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002860:	3301      	adds	r3, #1
 8002862:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800286a:	2b04      	cmp	r3, #4
 800286c:	f77f af66 	ble.w	800273c <shoot_events+0x488>
						for (int k = 0; k < OBJECT_HEIGHT_M; k++) {
 8002870:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002874:	3301      	adds	r3, #1
 8002876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800287a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800287e:	2b01      	cmp	r3, #1
 8002880:	f77f af58 	ble.w	8002734 <shoot_events+0x480>
					for (int j = 0; j < ENNEMY_AMOUNT; j++) { //collision spaceship shoot/ennemy
 8002884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002888:	3301      	adds	r3, #1
 800288a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800288e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002892:	2b3f      	cmp	r3, #63	; 0x3f
 8002894:	f77f af4a 	ble.w	800272c <shoot_events+0x478>
								}
							}
						}
					}
					break;
 8002898:	e0ba      	b.n	8002a10 <shoot_events+0x75c>
				case LARGE:
					for (int j = 0; j < ENNEMY_AMOUNT; j++) { //collision spaceship shoot/ennemy
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028a0:	e0b0      	b.n	8002a04 <shoot_events+0x750>
						for (int k = 0; k < OBJECT_HEIGHT_L; k++) {
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80028a8:	e0a2      	b.n	80029f0 <shoot_events+0x73c>
							for (int l = 0; l < OBJECT_WIDTH_L; l++) {
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028b0:	e094      	b.n	80029dc <shoot_events+0x728>
								temp_1 =
 80028b2:	687c      	ldr	r4, [r7, #4]
 80028b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028b8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80028bc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80028c0:	461a      	mov	r2, r3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	460b      	mov	r3, r1
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	00d9      	lsls	r1, r3, #3
 80028ce:	1ac9      	subs	r1, r1, r3
 80028d0:	440a      	add	r2, r1
 80028d2:	4603      	mov	r3, r0
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4403      	add	r3, r0
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a1b      	subs	r3, r3, r0
 80028dc:	4413      	add	r3, r2
 80028de:	18e2      	adds	r2, r4, r3
 80028e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028e4:	3206      	adds	r2, #6
 80028e6:	6810      	ldr	r0, [r2, #0]
 80028e8:	6018      	str	r0, [r3, #0]
 80028ea:	7912      	ldrb	r2, [r2, #4]
 80028ec:	711a      	strb	r2, [r3, #4]
										level->ennemy_array[j]._hitbox_array.hitbox_l[k][l];
								temp_2 = level->shoot_list[i];
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	440b      	add	r3, r1
 80028fc:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002900:	3310      	adds	r3, #16
 8002902:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002906:	3302      	adds	r3, #2
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	6010      	str	r0, [r2, #0]
 800290c:	791b      	ldrb	r3, [r3, #4]
 800290e:	7113      	strb	r3, [r2, #4]
								temp_3 = level->ennemy_array[j];
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	440b      	add	r3, r1
 8002922:	f107 0008 	add.w	r0, r7, #8
 8002926:	3303      	adds	r3, #3
 8002928:	228f      	movs	r2, #143	; 0x8f
 800292a:	4619      	mov	r1, r3
 800292c:	f001 fdde 	bl	80044ec <memcpy>
								if (object_hitbox_collision(&temp_1, &temp_2)) {
 8002930:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002934:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f8ae 	bl	8001a9c <object_hitbox_collision>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d045      	beq.n	80029d2 <shoot_events+0x71e>
									temp_3.life--;
 8002946:	7a3b      	ldrb	r3, [r7, #8]
 8002948:	3b01      	subs	r3, #1
 800294a:	b2db      	uxtb	r3, r3
 800294c:	723b      	strb	r3, [r7, #8]
									if (temp_3.life == 0) {
 800294e:	7a3b      	ldrb	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f040 8203 	bne.w	8002d5c <shoot_events+0xaa8>
										destroy_flying_object(&temp_3);
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fc2f 	bl	80011be <destroy_flying_object>
										destroy_hitbox(&temp_2);
 8002960:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe fb09 	bl	8000f7c <destroy_hitbox>
										level->ennemy_array[j] = temp_3;
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	440b      	add	r3, r1
 800297c:	3303      	adds	r3, #3
 800297e:	f107 0108 	add.w	r1, r7, #8
 8002982:	228f      	movs	r2, #143	; 0x8f
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fdb1 	bl	80044ec <memcpy>
										level->shoot_list[i] = temp_2;
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	440b      	add	r3, r1
 8002998:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800299c:	3310      	adds	r3, #16
 800299e:	3302      	adds	r3, #2
 80029a0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80029a4:	6810      	ldr	r0, [r2, #0]
 80029a6:	6018      	str	r0, [r3, #0]
 80029a8:	7912      	ldrb	r2, [r2, #4]
 80029aa:	711a      	strb	r2, [r3, #4]
										level->ennemy_num--;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	789b      	ldrb	r3, [r3, #2]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	709a      	strb	r2, [r3, #2]
										level->score += ENNEMY_COLLISION_SCORE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80029be:	3334      	adds	r3, #52	; 0x34
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80029cc:	3334      	adds	r3, #52	; 0x34
 80029ce:	601a      	str	r2, [r3, #0]
									}
									return;
 80029d0:	e1c4      	b.n	8002d5c <shoot_events+0xaa8>
							for (int l = 0; l < OBJECT_WIDTH_L; l++) {
 80029d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029d6:	3301      	adds	r3, #1
 80029d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029e0:	2b06      	cmp	r3, #6
 80029e2:	f77f af66 	ble.w	80028b2 <shoot_events+0x5fe>
						for (int k = 0; k < OBJECT_HEIGHT_L; k++) {
 80029e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029ea:	3301      	adds	r3, #1
 80029ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80029f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	f77f af58 	ble.w	80028aa <shoot_events+0x5f6>
					for (int j = 0; j < ENNEMY_AMOUNT; j++) { //collision spaceship shoot/ennemy
 80029fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029fe:	3301      	adds	r3, #1
 8002a00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a08:	2b3f      	cmp	r3, #63	; 0x3f
 8002a0a:	f77f af4a 	ble.w	80028a2 <shoot_events+0x5ee>
								}
							}
						}
					}
					break;
 8002a0e:	bf00      	nop
				}

				for (int j = 0; j < SHOOT_AMOUNT; j++) { //collision spaceship shoot/ennemy shoot
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a16:	e08c      	b.n	8002b32 <shoot_events+0x87e>
					temp_1 = level->shoot_list[i];
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	440b      	add	r3, r1
 8002a26:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002a2a:	3310      	adds	r3, #16
 8002a2c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002a30:	3302      	adds	r3, #2
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	6010      	str	r0, [r2, #0]
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	7113      	strb	r3, [r2, #4]
					temp_2 = level->shoot_list[j];
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	440b      	add	r3, r1
 8002a48:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002a4c:	3310      	adds	r3, #16
 8002a4e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a52:	3302      	adds	r3, #2
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	6010      	str	r0, [r2, #0]
 8002a58:	791b      	ldrb	r3, [r3, #4]
 8002a5a:	7113      	strb	r3, [r2, #4]
					if ((object_hitbox_collision(&temp_1, &temp_2)
 8002a5c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a60:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff f818 	bl	8001a9c <object_hitbox_collision>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <shoot_events+0x7c6>
							&& temp_2._object == ENNEMY_TYPE_1)
 8002a72:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d01d      	beq.n	8002ab6 <shoot_events+0x802>
							|| (object_hitbox_collision(&temp_1, &temp_2)
 8002a7a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff f809 	bl	8001a9c <object_hitbox_collision>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <shoot_events+0x7e4>
									&& temp_2._object == ENNEMY_TYPE_2)
 8002a90:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d00e      	beq.n	8002ab6 <shoot_events+0x802>
							|| (object_hitbox_collision(&temp_1, &temp_2)
 8002a98:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a9c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fffa 	bl	8001a9c <object_hitbox_collision>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d03c      	beq.n	8002b28 <shoot_events+0x874>
									&& temp_2._object == ENNEMY_TYPE_3)) {
 8002aae:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d138      	bne.n	8002b28 <shoot_events+0x874>
						destroy_hitbox(&temp_1);
 8002ab6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fa5e 	bl	8000f7c <destroy_hitbox>
						destroy_hitbox(&temp_2);
 8002ac0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fa59 	bl	8000f7c <destroy_hitbox>
						level->shoot_list[i] = temp_1;
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002adc:	3310      	adds	r3, #16
 8002ade:	3302      	adds	r3, #2
 8002ae0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002ae4:	6810      	ldr	r0, [r2, #0]
 8002ae6:	6018      	str	r0, [r3, #0]
 8002ae8:	7912      	ldrb	r2, [r2, #4]
 8002aea:	711a      	strb	r2, [r3, #4]
						level->shoot_list[j] = temp_2;
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	440b      	add	r3, r1
 8002afa:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002afe:	3310      	adds	r3, #16
 8002b00:	3302      	adds	r3, #2
 8002b02:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b06:	6810      	ldr	r0, [r2, #0]
 8002b08:	6018      	str	r0, [r3, #0]
 8002b0a:	7912      	ldrb	r2, [r2, #4]
 8002b0c:	711a      	strb	r2, [r3, #4]
						level->score += SHOOT_COLLISION_SCORE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002b14:	3334      	adds	r3, #52	; 0x34
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f103 020a 	add.w	r2, r3, #10
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002b22:	3334      	adds	r3, #52	; 0x34
 8002b24:	601a      	str	r2, [r3, #0]
						return;
 8002b26:	e11c      	b.n	8002d62 <shoot_events+0xaae>
				for (int j = 0; j < SHOOT_AMOUNT; j++) { //collision spaceship shoot/ennemy shoot
 8002b28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b36:	2b1f      	cmp	r3, #31
 8002b38:	f77f af6e 	ble.w	8002a18 <shoot_events+0x764>
					}
				}
			}

			for (int j = 0; j < SHIELD_AMOUNT; j++) { //collision handling between a shoot and a shield
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b42:	e0a7      	b.n	8002c94 <shoot_events+0x9e0>
				for (int k = 0; k < SHIELD_HEIGHT; k++) {
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b4a:	e099      	b.n	8002c80 <shoot_events+0x9cc>
					for (int l = 0; l < SHIELD_WIDTH; l++) {
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b52:	e08b      	b.n	8002c6c <shoot_events+0x9b8>
						temp_1 = shield_group[j][k][l];
 8002b54:	4c84      	ldr	r4, [pc, #528]	; (8002d68 <shoot_events+0xab4>)
 8002b56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b5a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002b5e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002b62:	461a      	mov	r2, r3
 8002b64:	0092      	lsls	r2, r2, #2
 8002b66:	441a      	add	r2, r3
 8002b68:	460b      	mov	r3, r1
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	00d9      	lsls	r1, r3, #3
 8002b70:	1ac9      	subs	r1, r1, r3
 8002b72:	440a      	add	r2, r1
 8002b74:	238c      	movs	r3, #140	; 0x8c
 8002b76:	fb03 f300 	mul.w	r3, r3, r0
 8002b7a:	4413      	add	r3, r2
 8002b7c:	18e2      	adds	r2, r4, r3
 8002b7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b82:	6810      	ldr	r0, [r2, #0]
 8002b84:	6018      	str	r0, [r3, #0]
 8002b86:	7912      	ldrb	r2, [r2, #4]
 8002b88:	711a      	strb	r2, [r3, #4]
						temp_2 = level->shoot_list[i];
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002b9c:	3310      	adds	r3, #16
 8002b9e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	6010      	str	r0, [r2, #0]
 8002ba8:	791b      	ldrb	r3, [r3, #4]
 8002baa:	7113      	strb	r3, [r2, #4]
						if ((object_hitbox_collision(&temp_1, &temp_2) == TRUE)
 8002bac:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002bb0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe ff70 	bl	8001a9c <object_hitbox_collision>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d14f      	bne.n	8002c62 <shoot_events+0x9ae>
								&& shield_group[j][k][l].exist == TRUE) {
 8002bc2:	4c69      	ldr	r4, [pc, #420]	; (8002d68 <shoot_events+0xab4>)
 8002bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bc8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002bcc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	441a      	add	r2, r3
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	00d9      	lsls	r1, r3, #3
 8002bde:	1ac9      	subs	r1, r1, r3
 8002be0:	440a      	add	r2, r1
 8002be2:	238c      	movs	r3, #140	; 0x8c
 8002be4:	fb03 f300 	mul.w	r3, r3, r0
 8002be8:	4413      	add	r3, r2
 8002bea:	4423      	add	r3, r4
 8002bec:	3304      	adds	r3, #4
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d136      	bne.n	8002c62 <shoot_events+0x9ae>
							destroy_hitbox(&temp_1);
 8002bf4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe f9bf 	bl	8000f7c <destroy_hitbox>
							destroy_hitbox(&temp_2);
 8002bfe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe f9ba 	bl	8000f7c <destroy_hitbox>
							shield_group[j][k][l] = temp_1;
 8002c08:	4c57      	ldr	r4, [pc, #348]	; (8002d68 <shoot_events+0xab4>)
 8002c0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c0e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002c12:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002c16:	461a      	mov	r2, r3
 8002c18:	0092      	lsls	r2, r2, #2
 8002c1a:	441a      	add	r2, r3
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	00d9      	lsls	r1, r3, #3
 8002c24:	1ac9      	subs	r1, r1, r3
 8002c26:	440a      	add	r2, r1
 8002c28:	238c      	movs	r3, #140	; 0x8c
 8002c2a:	fb03 f300 	mul.w	r3, r3, r0
 8002c2e:	4413      	add	r3, r2
 8002c30:	4423      	add	r3, r4
 8002c32:	461a      	mov	r2, r3
 8002c34:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	6010      	str	r0, [r2, #0]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	7113      	strb	r3, [r2, #4]
							level->shoot_list[i] = temp_2;
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002c52:	3310      	adds	r3, #16
 8002c54:	3302      	adds	r3, #2
 8002c56:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002c5a:	6810      	ldr	r0, [r2, #0]
 8002c5c:	6018      	str	r0, [r3, #0]
 8002c5e:	7912      	ldrb	r2, [r2, #4]
 8002c60:	711a      	strb	r2, [r3, #4]
					for (int l = 0; l < SHIELD_WIDTH; l++) {
 8002c62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c66:	3301      	adds	r3, #1
 8002c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c70:	2b06      	cmp	r3, #6
 8002c72:	f77f af6f 	ble.w	8002b54 <shoot_events+0x8a0>
				for (int k = 0; k < SHIELD_HEIGHT; k++) {
 8002c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	f77f af61 	ble.w	8002b4c <shoot_events+0x898>
			for (int j = 0; j < SHIELD_AMOUNT; j++) { //collision handling between a shoot and a shield
 8002c8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	f77f af53 	ble.w	8002b44 <shoot_events+0x890>
						}
					}
				}
			}
			if (level->shoot_list[i].y >= VT100_SCREEN_YMAX) {
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002cb0:	3315      	adds	r3, #21
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b17      	cmp	r3, #23
 8002cb6:	d90c      	bls.n	8002cd2 <shoot_events+0xa1e>
				level->shoot_list[i].exist = FALSE;
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002cca:	3316      	adds	r3, #22
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e033      	b.n	8002d3a <shoot_events+0xa86>
			} else if (level->shoot_list[i].exist == FALSE) {
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002ce4:	3316      	adds	r3, #22
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d039      	beq.n	8002d60 <shoot_events+0xaac>
				return;
			} else {
				vt100_move(level->shoot_list[i].x, level->shoot_list[i].y);
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002cfe:	3314      	adds	r3, #20
 8002d00:	7818      	ldrb	r0, [r3, #0]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002d14:	3315      	adds	r3, #21
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f001 fb25 	bl	8004368 <vt100_move>
				serial_putchar(level->shoot_list[i].appearance);
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8002d30:	3312      	adds	r3, #18
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe f8ad 	bl	8000e94 <serial_putchar>
	for (int i = 0; i < SHOOT_AMOUNT; i++) {
 8002d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d48:	2b1f      	cmp	r3, #31
 8002d4a:	f77f aabc 	ble.w	80022c6 <shoot_events+0x12>
 8002d4e:	e008      	b.n	8002d62 <shoot_events+0xaae>
						return;
 8002d50:	bf00      	nop
 8002d52:	e006      	b.n	8002d62 <shoot_events+0xaae>
									return;
 8002d54:	bf00      	nop
 8002d56:	e004      	b.n	8002d62 <shoot_events+0xaae>
									return;
 8002d58:	bf00      	nop
 8002d5a:	e002      	b.n	8002d62 <shoot_events+0xaae>
									return;
 8002d5c:	bf00      	nop
 8002d5e:	e000      	b.n	8002d62 <shoot_events+0xaae>
				return;
 8002d60:	bf00      	nop
			}

		}
	}
}
 8002d62:	37ec      	adds	r7, #236	; 0xec
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd90      	pop	{r4, r7, pc}
 8002d68:	20000094 	.word	0x20000094

08002d6c <init_shield>:

void init_shield(uint8_t x, uint8_t y) {
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	460a      	mov	r2, r1
 8002d76:	71fb      	strb	r3, [r7, #7]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < SHIELD_HEIGHT; i++) {
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e08c      	b.n	8002e9c <init_shield+0x130>
		for (int j = 0; j < SHIELD_WIDTH; j++) {
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	e082      	b.n	8002e8e <init_shield+0x122>
			shield_group[shield_index][i][j] = shield[i][j];
 8002d88:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <init_shield+0x14c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461c      	mov	r4, r3
 8002d8e:	484b      	ldr	r0, [pc, #300]	; (8002ebc <init_shield+0x150>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	68f9      	ldr	r1, [r7, #12]
 8002d94:	461a      	mov	r2, r3
 8002d96:	0092      	lsls	r2, r2, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	00d9      	lsls	r1, r3, #3
 8002da2:	1ac9      	subs	r1, r1, r3
 8002da4:	440a      	add	r2, r1
 8002da6:	238c      	movs	r3, #140	; 0x8c
 8002da8:	fb03 f304 	mul.w	r3, r3, r4
 8002dac:	4413      	add	r3, r2
 8002dae:	18c4      	adds	r4, r0, r3
 8002db0:	4843      	ldr	r0, [pc, #268]	; (8002ec0 <init_shield+0x154>)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	68f9      	ldr	r1, [r7, #12]
 8002db6:	461a      	mov	r2, r3
 8002db8:	0092      	lsls	r2, r2, #2
 8002dba:	441a      	add	r2, r3
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	00d9      	lsls	r1, r3, #3
 8002dc4:	1ac9      	subs	r1, r1, r3
 8002dc6:	1853      	adds	r3, r2, r1
 8002dc8:	18c2      	adds	r2, r0, r3
 8002dca:	4623      	mov	r3, r4
 8002dcc:	6811      	ldr	r1, [r2, #0]
 8002dce:	6019      	str	r1, [r3, #0]
 8002dd0:	7912      	ldrb	r2, [r2, #4]
 8002dd2:	711a      	strb	r2, [r3, #4]
			vt100_move(x + j - (SHIELD_WIDTH / 2), y + i);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	4413      	add	r3, r2
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	3b03      	subs	r3, #3
 8002de0:	b2d8      	uxtb	r0, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	79bb      	ldrb	r3, [r7, #6]
 8002de8:	4413      	add	r3, r2
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	4619      	mov	r1, r3
 8002dee:	f001 fabb 	bl	8004368 <vt100_move>
			serial_putchar(shield[i][j].appearance);
 8002df2:	4833      	ldr	r0, [pc, #204]	; (8002ec0 <init_shield+0x154>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	68f9      	ldr	r1, [r7, #12]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	0092      	lsls	r2, r2, #2
 8002dfc:	441a      	add	r2, r3
 8002dfe:	460b      	mov	r3, r1
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	00d9      	lsls	r1, r3, #3
 8002e06:	1ac9      	subs	r1, r1, r3
 8002e08:	1853      	adds	r3, r2, r1
 8002e0a:	4403      	add	r3, r0
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe f840 	bl	8000e94 <serial_putchar>
			shield_group[shield_index][i][j].x = x + j - (SHIELD_WIDTH / 2); // put on each hitbox their coordinates
 8002e14:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <init_shield+0x14c>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	461d      	mov	r5, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	4413      	add	r3, r2
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	3b03      	subs	r3, #3
 8002e26:	b2dc      	uxtb	r4, r3
 8002e28:	4824      	ldr	r0, [pc, #144]	; (8002ebc <init_shield+0x150>)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	0092      	lsls	r2, r2, #2
 8002e32:	441a      	add	r2, r3
 8002e34:	460b      	mov	r3, r1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	00d9      	lsls	r1, r3, #3
 8002e3c:	1ac9      	subs	r1, r1, r3
 8002e3e:	440a      	add	r2, r1
 8002e40:	238c      	movs	r3, #140	; 0x8c
 8002e42:	fb03 f305 	mul.w	r3, r3, r5
 8002e46:	4413      	add	r3, r2
 8002e48:	4403      	add	r3, r0
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	701a      	strb	r2, [r3, #0]
			shield_group[shield_index][i][j].y = y + i;
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <init_shield+0x14c>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	461d      	mov	r5, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	79bb      	ldrb	r3, [r7, #6]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	b2dc      	uxtb	r4, r3
 8002e60:	4816      	ldr	r0, [pc, #88]	; (8002ebc <init_shield+0x150>)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	68f9      	ldr	r1, [r7, #12]
 8002e66:	461a      	mov	r2, r3
 8002e68:	0092      	lsls	r2, r2, #2
 8002e6a:	441a      	add	r2, r3
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	00d9      	lsls	r1, r3, #3
 8002e74:	1ac9      	subs	r1, r1, r3
 8002e76:	440a      	add	r2, r1
 8002e78:	238c      	movs	r3, #140	; 0x8c
 8002e7a:	fb03 f305 	mul.w	r3, r3, r5
 8002e7e:	4413      	add	r3, r2
 8002e80:	4403      	add	r3, r0
 8002e82:	3303      	adds	r3, #3
 8002e84:	4622      	mov	r2, r4
 8002e86:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < SHIELD_WIDTH; j++) {
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b06      	cmp	r3, #6
 8002e92:	f77f af79 	ble.w	8002d88 <init_shield+0x1c>
	for (int i = 0; i < SHIELD_HEIGHT; i++) {
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	f77f af6f 	ble.w	8002d82 <init_shield+0x16>
		}
	}
	shield_index++;
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <init_shield+0x14c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	4b02      	ldr	r3, [pc, #8]	; (8002eb8 <init_shield+0x14c>)
 8002eae:	701a      	strb	r2, [r3, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb8:	20000092 	.word	0x20000092
 8002ebc:	20000094 	.word	0x20000094
 8002ec0:	20000238 	.word	0x20000238

08002ec4 <charge_level>:

void charge_level(level_num level) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
	switch (level) {
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d81c      	bhi.n	8002f0e <charge_level+0x4a>
 8002ed4:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <charge_level+0x18>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002ef1 	.word	0x08002ef1
 8002ee0:	08002ef7 	.word	0x08002ef7
 8002ee4:	08002efd 	.word	0x08002efd
 8002ee8:	08002f03 	.word	0x08002f03
 8002eec:	08002f09 	.word	0x08002f09
	case MENU:
		init_menu();
 8002ef0:	f000 fa1c 	bl	800332c <init_menu>
		break;
 8002ef4:	e00b      	b.n	8002f0e <charge_level+0x4a>
	case LEVEL_1:
		init_level_1();
 8002ef6:	f000 fb4d 	bl	8003594 <init_level_1>
		break;
 8002efa:	e008      	b.n	8002f0e <charge_level+0x4a>
	case LEVEL_2:
		init_level_2();
 8002efc:	f000 fbe2 	bl	80036c4 <init_level_2>
		break;
 8002f00:	e005      	b.n	8002f0e <charge_level+0x4a>
	case LEVEL_3:
		init_level_3();
 8002f02:	f000 fc77 	bl	80037f4 <init_level_3>
		break;
 8002f06:	e002      	b.n	8002f0e <charge_level+0x4a>
	case GAME_OVER:
		init_game_over();
 8002f08:	f000 fd0c 	bl	8003924 <init_game_over>
		break;
 8002f0c:	bf00      	nop
	}
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop

08002f18 <display_level_number>:

void display_level_number(level_num level) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
	for (int j = 0; j < levels_messages_max; j++) {
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e019      	b.n	8002f5c <display_level_number+0x44>
		vt100_move((VT100_SCREEN_WIDTH - levels_messages_max) / 2 + j,
 8002f28:	4b2b      	ldr	r3, [pc, #172]	; (8002fd8 <display_level_number+0xc0>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8002f30:	0fda      	lsrs	r2, r3, #31
 8002f32:	4413      	add	r3, r2
 8002f34:	105b      	asrs	r3, r3, #1
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	210c      	movs	r1, #12
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 fa10 	bl	8004368 <vt100_move>
		VT100_SCREEN_HEIGHT / 2);
		serial_putchar(levels_messages[j]);
 8002f48:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <display_level_number+0xc4>)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd ff9f 	bl	8000e94 <serial_putchar>
	for (int j = 0; j < levels_messages_max; j++) {
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <display_level_number+0xc0>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	dcdf      	bgt.n	8002f28 <display_level_number+0x10>
	}
	vt100_move((VT100_SCREEN_WIDTH + levels_messages_max) / 2,
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <display_level_number+0xc0>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3350      	adds	r3, #80	; 0x50
 8002f6e:	0fda      	lsrs	r2, r3, #31
 8002f70:	4413      	add	r3, r2
 8002f72:	105b      	asrs	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	210c      	movs	r1, #12
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f001 f9f5 	bl	8004368 <vt100_move>
	VT100_SCREEN_HEIGHT / 2);

	serial_putchar('0' + level);
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	3330      	adds	r3, #48	; 0x30
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd ff85 	bl	8000e94 <serial_putchar>
	delay_(1000);
 8002f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f8e:	f7fd ff01 	bl	8000d94 <delay_>

	for (int j = 0; j < levels_messages_max + 1; j++) {
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	e015      	b.n	8002fc4 <display_level_number+0xac>
		vt100_move((VT100_SCREEN_WIDTH - levels_messages_max) / 2 + j,
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <display_level_number+0xc0>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8002fa0:	0fda      	lsrs	r2, r3, #31
 8002fa2:	4413      	add	r3, r2
 8002fa4:	105b      	asrs	r3, r3, #1
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	210c      	movs	r1, #12
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f001 f9d8 	bl	8004368 <vt100_move>
		VT100_SCREEN_HEIGHT / 2);
		serial_putchar(' ');
 8002fb8:	2020      	movs	r0, #32
 8002fba:	f7fd ff6b 	bl	8000e94 <serial_putchar>
	for (int j = 0; j < levels_messages_max + 1; j++) {
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <display_level_number+0xc0>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	dce3      	bgt.n	8002f98 <display_level_number+0x80>
	}
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000052 	.word	0x20000052
 8002fdc:	08004530 	.word	0x08004530

08002fe0 <display_score>:

void display_score(uint32_t score) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < score_message_max; i++) {
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e015      	b.n	800301a <display_score+0x3a>
		vt100_move((SCORE_POS_X - score_message_max - 6) + i,
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4b5d      	ldr	r3, [pc, #372]	; (8003168 <display_score+0x188>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	334a      	adds	r3, #74	; 0x4a
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2118      	movs	r1, #24
 8003000:	4618      	mov	r0, r3
 8003002:	f001 f9b1 	bl	8004368 <vt100_move>
		SCORE_POS_Y);
		serial_putchar(score_message[i]);
 8003006:	4a59      	ldr	r2, [pc, #356]	; (800316c <display_score+0x18c>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd ff40 	bl	8000e94 <serial_putchar>
	for (int i = 0; i < score_message_max; i++) {
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3301      	adds	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b53      	ldr	r3, [pc, #332]	; (8003168 <display_score+0x188>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	429a      	cmp	r2, r3
 8003024:	dce3      	bgt.n	8002fee <display_score+0xe>
	}
	vt100_move(SCORE_POS_X - 6, SCORE_POS_Y);
 8003026:	2118      	movs	r1, #24
 8003028:	204a      	movs	r0, #74	; 0x4a
 800302a:	f001 f99d 	bl	8004368 <vt100_move>
	serial_putchar('0' + (score / 10000000));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a4f      	ldr	r2, [pc, #316]	; (8003170 <display_score+0x190>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	0d9b      	lsrs	r3, r3, #22
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3330      	adds	r3, #48	; 0x30
 800303c:	b2db      	uxtb	r3, r3
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd ff28 	bl	8000e94 <serial_putchar>
	vt100_move(SCORE_POS_X - 5, SCORE_POS_Y);
 8003044:	2118      	movs	r1, #24
 8003046:	204b      	movs	r0, #75	; 0x4b
 8003048:	f001 f98e 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((score / 100000) % 10));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	4a48      	ldr	r2, [pc, #288]	; (8003174 <display_score+0x194>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	09d9      	lsrs	r1, r3, #7
 8003058:	4b47      	ldr	r3, [pc, #284]	; (8003178 <display_score+0x198>)
 800305a:	fba3 2301 	umull	r2, r3, r3, r1
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	1aca      	subs	r2, r1, r3
 800306a:	b2d3      	uxtb	r3, r2
 800306c:	3330      	adds	r3, #48	; 0x30
 800306e:	b2db      	uxtb	r3, r3
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd ff0f 	bl	8000e94 <serial_putchar>
	vt100_move(SCORE_POS_X - 4, SCORE_POS_Y);
 8003076:	2118      	movs	r1, #24
 8003078:	204c      	movs	r0, #76	; 0x4c
 800307a:	f001 f975 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((score / 10000) % 10));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a3e      	ldr	r2, [pc, #248]	; (800317c <display_score+0x19c>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0b59      	lsrs	r1, r3, #13
 8003088:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <display_score+0x198>)
 800308a:	fba3 2301 	umull	r2, r3, r3, r1
 800308e:	08da      	lsrs	r2, r3, #3
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	1aca      	subs	r2, r1, r3
 800309a:	b2d3      	uxtb	r3, r2
 800309c:	3330      	adds	r3, #48	; 0x30
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd fef7 	bl	8000e94 <serial_putchar>
	vt100_move(SCORE_POS_X - 3, SCORE_POS_Y);
 80030a6:	2118      	movs	r1, #24
 80030a8:	204d      	movs	r0, #77	; 0x4d
 80030aa:	f001 f95d 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((score / 1000) % 10));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a33      	ldr	r2, [pc, #204]	; (8003180 <display_score+0x1a0>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0999      	lsrs	r1, r3, #6
 80030b8:	4b2f      	ldr	r3, [pc, #188]	; (8003178 <display_score+0x198>)
 80030ba:	fba3 2301 	umull	r2, r3, r3, r1
 80030be:	08da      	lsrs	r2, r3, #3
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	1aca      	subs	r2, r1, r3
 80030ca:	b2d3      	uxtb	r3, r2
 80030cc:	3330      	adds	r3, #48	; 0x30
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd fedf 	bl	8000e94 <serial_putchar>
	vt100_move(SCORE_POS_X - 2, SCORE_POS_Y);
 80030d6:	2118      	movs	r1, #24
 80030d8:	204e      	movs	r0, #78	; 0x4e
 80030da:	f001 f945 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((score / 100) % 10));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a28      	ldr	r2, [pc, #160]	; (8003184 <display_score+0x1a4>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	0959      	lsrs	r1, r3, #5
 80030e8:	4b23      	ldr	r3, [pc, #140]	; (8003178 <display_score+0x198>)
 80030ea:	fba3 2301 	umull	r2, r3, r3, r1
 80030ee:	08da      	lsrs	r2, r3, #3
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	1aca      	subs	r2, r1, r3
 80030fa:	b2d3      	uxtb	r3, r2
 80030fc:	3330      	adds	r3, #48	; 0x30
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd fec7 	bl	8000e94 <serial_putchar>
	vt100_move(SCORE_POS_X - 1, SCORE_POS_Y);
 8003106:	2118      	movs	r1, #24
 8003108:	204f      	movs	r0, #79	; 0x4f
 800310a:	f001 f92d 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((score / 10) % 10));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <display_score+0x198>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	08d9      	lsrs	r1, r3, #3
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <display_score+0x198>)
 800311a:	fba3 2301 	umull	r2, r3, r3, r1
 800311e:	08da      	lsrs	r2, r3, #3
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	1aca      	subs	r2, r1, r3
 800312a:	b2d3      	uxtb	r3, r2
 800312c:	3330      	adds	r3, #48	; 0x30
 800312e:	b2db      	uxtb	r3, r3
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd feaf 	bl	8000e94 <serial_putchar>
	vt100_move(SCORE_POS_X, SCORE_POS_Y);
 8003136:	2118      	movs	r1, #24
 8003138:	2050      	movs	r0, #80	; 0x50
 800313a:	f001 f915 	bl	8004368 <vt100_move>
	serial_putchar('0' + (score % 10));
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <display_score+0x198>)
 8003142:	fba3 2301 	umull	r2, r3, r3, r1
 8003146:	08da      	lsrs	r2, r3, #3
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	1aca      	subs	r2, r1, r3
 8003152:	b2d3      	uxtb	r3, r2
 8003154:	3330      	adds	r3, #48	; 0x30
 8003156:	b2db      	uxtb	r3, r3
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd fe9b 	bl	8000e94 <serial_putchar>
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000053 	.word	0x20000053
 800316c:	08004538 	.word	0x08004538
 8003170:	6b5fca6b 	.word	0x6b5fca6b
 8003174:	0a7c5ac5 	.word	0x0a7c5ac5
 8003178:	cccccccd 	.word	0xcccccccd
 800317c:	d1b71759 	.word	0xd1b71759
 8003180:	10624dd3 	.word	0x10624dd3
 8003184:	51eb851f 	.word	0x51eb851f

08003188 <display_life>:

void display_life(uint8_t life) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < life_message_max; i++) {
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e011      	b.n	80031bc <display_life+0x34>
		vt100_move(LIFE_POS_X + i, LIFE_POS_Y);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	3301      	adds	r3, #1
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2118      	movs	r1, #24
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 f8e0 	bl	8004368 <vt100_move>
		serial_putchar(life_message[i]);
 80031a8:	4a32      	ldr	r2, [pc, #200]	; (8003274 <display_life+0xec>)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd fe6f 	bl	8000e94 <serial_putchar>
	for (int i = 0; i < life_message_max; i++) {
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3301      	adds	r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <display_life+0xf0>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	dce7      	bgt.n	8003198 <display_life+0x10>
	}
	vt100_move(LIFE_POS_X + life_message_max, LIFE_POS_Y);
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <display_life+0xf0>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2118      	movs	r1, #24
 80031d2:	4618      	mov	r0, r3
 80031d4:	f001 f8c8 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((life / 100) % 10));
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	4a28      	ldr	r2, [pc, #160]	; (800327c <display_life+0xf4>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	4b26      	ldr	r3, [pc, #152]	; (8003280 <display_life+0xf8>)
 80031e6:	fba3 1302 	umull	r1, r3, r3, r2
 80031ea:	08d9      	lsrs	r1, r3, #3
 80031ec:	460b      	mov	r3, r1
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3330      	adds	r3, #48	; 0x30
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd fe49 	bl	8000e94 <serial_putchar>
	vt100_move(LIFE_POS_X + life_message_max + 1, LIFE_POS_Y);
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <display_life+0xf0>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	3302      	adds	r3, #2
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2118      	movs	r1, #24
 800320c:	4618      	mov	r0, r3
 800320e:	f001 f8ab 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((life / 10) % 10));
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <display_life+0xf8>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	08db      	lsrs	r3, r3, #3
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <display_life+0xf8>)
 8003220:	fba3 1302 	umull	r1, r3, r3, r2
 8003224:	08d9      	lsrs	r1, r3, #3
 8003226:	460b      	mov	r3, r1
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	3330      	adds	r3, #48	; 0x30
 8003234:	b2db      	uxtb	r3, r3
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd fe2c 	bl	8000e94 <serial_putchar>
	vt100_move(LIFE_POS_X + life_message_max + 2, LIFE_POS_Y);
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <display_life+0xf0>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	3303      	adds	r3, #3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2118      	movs	r1, #24
 8003246:	4618      	mov	r0, r3
 8003248:	f001 f88e 	bl	8004368 <vt100_move>
	serial_putchar('0' + (life % 10));
 800324c:	79fa      	ldrb	r2, [r7, #7]
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <display_life+0xf8>)
 8003250:	fba3 1302 	umull	r1, r3, r3, r2
 8003254:	08d9      	lsrs	r1, r3, #3
 8003256:	460b      	mov	r3, r1
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	3330      	adds	r3, #48	; 0x30
 8003264:	b2db      	uxtb	r3, r3
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fe14 	bl	8000e94 <serial_putchar>
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	0800454c 	.word	0x0800454c
 8003278:	20000055 	.word	0x20000055
 800327c:	51eb851f 	.word	0x51eb851f
 8003280:	cccccccd 	.word	0xcccccccd

08003284 <toggle_pause>:

void toggle_pause(void) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0

	if (keyboard_flags & KFPAUS) {
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <toggle_pause+0x9c>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01e      	beq.n	80032d4 <toggle_pause+0x50>
		keyboard_flags &= ~KFPAUS;
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <toggle_pause+0x9c>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <toggle_pause+0x9c>)
 80032a2:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < pause_max; i++) {
 80032a4:	2300      	movs	r3, #0
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	e00d      	b.n	80032c6 <toggle_pause+0x42>
			vt100_move(VT100_SCREEN_XMAX / 2 - 2 + i,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	3326      	adds	r3, #38	; 0x26
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	210c      	movs	r1, #12
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 f857 	bl	8004368 <vt100_move>
			VT100_SCREEN_YMAX / 2);
			serial_putchar(' ');
 80032ba:	2020      	movs	r0, #32
 80032bc:	f7fd fdea 	bl	8000e94 <serial_putchar>
		for (int i = 0; i < pause_max; i++) {
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3301      	adds	r3, #1
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	4b17      	ldr	r3, [pc, #92]	; (8003324 <toggle_pause+0xa0>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	dceb      	bgt.n	80032aa <toggle_pause+0x26>
			vt100_move(VT100_SCREEN_XMAX / 2 - 2 + i,
			VT100_SCREEN_YMAX / 2);
			serial_putchar(pause_message[i]);
		}
	}
}
 80032d2:	e021      	b.n	8003318 <toggle_pause+0x94>
		keyboard_flags |= KFPAUS;
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <toggle_pause+0x9c>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <toggle_pause+0x9c>)
 80032e0:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < pause_max; i++) {
 80032e2:	2300      	movs	r3, #0
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	e011      	b.n	800330c <toggle_pause+0x88>
			vt100_move(VT100_SCREEN_XMAX / 2 - 2 + i,
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3326      	adds	r3, #38	; 0x26
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	210c      	movs	r1, #12
 80032f2:	4618      	mov	r0, r3
 80032f4:	f001 f838 	bl	8004368 <vt100_move>
			serial_putchar(pause_message[i]);
 80032f8:	4a0b      	ldr	r2, [pc, #44]	; (8003328 <toggle_pause+0xa4>)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd fdc7 	bl	8000e94 <serial_putchar>
		for (int i = 0; i < pause_max; i++) {
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <toggle_pause+0xa0>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	dce7      	bgt.n	80032e8 <toggle_pause+0x64>
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000091 	.word	0x20000091
 8003324:	20000050 	.word	0x20000050
 8003328:	0800451c 	.word	0x0800451c

0800332c <init_menu>:

void init_menu(void) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0

	vt100_clear_screen();
 8003332:	f001 f895 	bl	8004460 <vt100_clear_screen>

	lev_num_flag = MENU;
 8003336:	4b8b      	ldr	r3, [pc, #556]	; (8003564 <init_menu+0x238>)
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 2; i++) {
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	e024      	b.n	800338c <init_menu+0x60>
		for (int j = 0; j < 14; j++) {
 8003342:	2300      	movs	r3, #0
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	e01b      	b.n	8003380 <init_menu+0x54>
			vt100_move(j + VT100_SCREEN_XMAX / 4, i + 10);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	3314      	adds	r3, #20
 800334e:	b2da      	uxtb	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	330a      	adds	r3, #10
 8003356:	b2db      	uxtb	r3, r3
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f001 f804 	bl	8004368 <vt100_move>
			serial_putchar(menu_message[i][j]);
 8003360:	4981      	ldr	r1, [pc, #516]	; (8003568 <init_menu+0x23c>)
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	18ca      	adds	r2, r1, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4413      	add	r3, r2
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd fd8d 	bl	8000e94 <serial_putchar>
		for (int j = 0; j < 14; j++) {
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3301      	adds	r3, #1
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b0d      	cmp	r3, #13
 8003384:	dde0      	ble.n	8003348 <init_menu+0x1c>
	for (int i = 0; i < 2; i++) {
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3301      	adds	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b01      	cmp	r3, #1
 8003390:	ddd7      	ble.n	8003342 <init_menu+0x16>
		}
	}

	if (highscore_temp > highscore)
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <init_menu+0x240>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b76      	ldr	r3, [pc, #472]	; (8003570 <init_menu+0x244>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d903      	bls.n	80033a6 <init_menu+0x7a>
		highscore = highscore_temp;
 800339e:	4b73      	ldr	r3, [pc, #460]	; (800356c <init_menu+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a73      	ldr	r2, [pc, #460]	; (8003570 <init_menu+0x244>)
 80033a4:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < highscore_message_max; i++) {
 80033a6:	2300      	movs	r3, #0
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	e011      	b.n	80033d0 <init_menu+0xa4>
		vt100_move((SCORE_POS_X / 2) + i,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3328      	adds	r3, #40	; 0x28
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	210c      	movs	r1, #12
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 ffd6 	bl	8004368 <vt100_move>
		SCORE_POS_Y / 2);
		serial_putchar(highscore_message[i]);
 80033bc:	4a6d      	ldr	r2, [pc, #436]	; (8003574 <init_menu+0x248>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd fd65 	bl	8000e94 <serial_putchar>
	for (int i = 0; i < highscore_message_max; i++) {
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3301      	adds	r3, #1
 80033ce:	607b      	str	r3, [r7, #4]
 80033d0:	4b69      	ldr	r3, [pc, #420]	; (8003578 <init_menu+0x24c>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	429a      	cmp	r2, r3
 80033da:	dce7      	bgt.n	80033ac <init_menu+0x80>
	}

	vt100_move((SCORE_POS_X / 2) + highscore_message_max, SCORE_POS_Y / 2);
 80033dc:	4b66      	ldr	r3, [pc, #408]	; (8003578 <init_menu+0x24c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	3328      	adds	r3, #40	; 0x28
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	210c      	movs	r1, #12
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 ffbe 	bl	8004368 <vt100_move>
	serial_putchar('0' + (highscore / 10000000));
 80033ec:	4b60      	ldr	r3, [pc, #384]	; (8003570 <init_menu+0x244>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a62      	ldr	r2, [pc, #392]	; (800357c <init_menu+0x250>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0d9b      	lsrs	r3, r3, #22
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	3330      	adds	r3, #48	; 0x30
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fd48 	bl	8000e94 <serial_putchar>
	vt100_move((SCORE_POS_X / 2) + highscore_message_max + 1, SCORE_POS_Y / 2);
 8003404:	4b5c      	ldr	r3, [pc, #368]	; (8003578 <init_menu+0x24c>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	3329      	adds	r3, #41	; 0x29
 800340a:	b2db      	uxtb	r3, r3
 800340c:	210c      	movs	r1, #12
 800340e:	4618      	mov	r0, r3
 8003410:	f000 ffaa 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((highscore / 100000) % 10));
 8003414:	4b56      	ldr	r3, [pc, #344]	; (8003570 <init_menu+0x244>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	4a59      	ldr	r2, [pc, #356]	; (8003580 <init_menu+0x254>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	09d9      	lsrs	r1, r3, #7
 8003422:	4b58      	ldr	r3, [pc, #352]	; (8003584 <init_menu+0x258>)
 8003424:	fba3 2301 	umull	r2, r3, r3, r1
 8003428:	08da      	lsrs	r2, r3, #3
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	1aca      	subs	r2, r1, r3
 8003434:	b2d3      	uxtb	r3, r2
 8003436:	3330      	adds	r3, #48	; 0x30
 8003438:	b2db      	uxtb	r3, r3
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd fd2a 	bl	8000e94 <serial_putchar>
	vt100_move((SCORE_POS_X / 2) + highscore_message_max + 2, SCORE_POS_Y / 2);
 8003440:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <init_menu+0x24c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	332a      	adds	r3, #42	; 0x2a
 8003446:	b2db      	uxtb	r3, r3
 8003448:	210c      	movs	r1, #12
 800344a:	4618      	mov	r0, r3
 800344c:	f000 ff8c 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((highscore / 10000) % 10));
 8003450:	4b47      	ldr	r3, [pc, #284]	; (8003570 <init_menu+0x244>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a4c      	ldr	r2, [pc, #304]	; (8003588 <init_menu+0x25c>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	0b59      	lsrs	r1, r3, #13
 800345c:	4b49      	ldr	r3, [pc, #292]	; (8003584 <init_menu+0x258>)
 800345e:	fba3 2301 	umull	r2, r3, r3, r1
 8003462:	08da      	lsrs	r2, r3, #3
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	1aca      	subs	r2, r1, r3
 800346e:	b2d3      	uxtb	r3, r2
 8003470:	3330      	adds	r3, #48	; 0x30
 8003472:	b2db      	uxtb	r3, r3
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd fd0d 	bl	8000e94 <serial_putchar>
	vt100_move((SCORE_POS_X / 2) + highscore_message_max + 3, SCORE_POS_Y / 2);
 800347a:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <init_menu+0x24c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	332b      	adds	r3, #43	; 0x2b
 8003480:	b2db      	uxtb	r3, r3
 8003482:	210c      	movs	r1, #12
 8003484:	4618      	mov	r0, r3
 8003486:	f000 ff6f 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((highscore / 1000) % 10));
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <init_menu+0x244>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a3f      	ldr	r2, [pc, #252]	; (800358c <init_menu+0x260>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	0999      	lsrs	r1, r3, #6
 8003496:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <init_menu+0x258>)
 8003498:	fba3 2301 	umull	r2, r3, r3, r1
 800349c:	08da      	lsrs	r2, r3, #3
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	1aca      	subs	r2, r1, r3
 80034a8:	b2d3      	uxtb	r3, r2
 80034aa:	3330      	adds	r3, #48	; 0x30
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd fcf0 	bl	8000e94 <serial_putchar>
	vt100_move((SCORE_POS_X / 2) + highscore_message_max + 4, SCORE_POS_Y / 2);
 80034b4:	4b30      	ldr	r3, [pc, #192]	; (8003578 <init_menu+0x24c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	332c      	adds	r3, #44	; 0x2c
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	210c      	movs	r1, #12
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 ff52 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((highscore / 100) % 10));
 80034c4:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <init_menu+0x244>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a31      	ldr	r2, [pc, #196]	; (8003590 <init_menu+0x264>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	0959      	lsrs	r1, r3, #5
 80034d0:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <init_menu+0x258>)
 80034d2:	fba3 2301 	umull	r2, r3, r3, r1
 80034d6:	08da      	lsrs	r2, r3, #3
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	1aca      	subs	r2, r1, r3
 80034e2:	b2d3      	uxtb	r3, r2
 80034e4:	3330      	adds	r3, #48	; 0x30
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd fcd3 	bl	8000e94 <serial_putchar>
	vt100_move((SCORE_POS_X / 2) + highscore_message_max + 5, SCORE_POS_Y / 2);
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <init_menu+0x24c>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	332d      	adds	r3, #45	; 0x2d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	210c      	movs	r1, #12
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 ff35 	bl	8004368 <vt100_move>
	serial_putchar('0' + ((highscore / 10) % 10));
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <init_menu+0x244>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a20      	ldr	r2, [pc, #128]	; (8003584 <init_menu+0x258>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	08d9      	lsrs	r1, r3, #3
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <init_menu+0x258>)
 800350c:	fba3 2301 	umull	r2, r3, r3, r1
 8003510:	08da      	lsrs	r2, r3, #3
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	1aca      	subs	r2, r1, r3
 800351c:	b2d3      	uxtb	r3, r2
 800351e:	3330      	adds	r3, #48	; 0x30
 8003520:	b2db      	uxtb	r3, r3
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fcb6 	bl	8000e94 <serial_putchar>
	vt100_move((SCORE_POS_X / 2) + highscore_message_max + 6, SCORE_POS_Y / 2);
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <init_menu+0x24c>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	332e      	adds	r3, #46	; 0x2e
 800352e:	b2db      	uxtb	r3, r3
 8003530:	210c      	movs	r1, #12
 8003532:	4618      	mov	r0, r3
 8003534:	f000 ff18 	bl	8004368 <vt100_move>
	serial_putchar('0' + (highscore % 10));
 8003538:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <init_menu+0x244>)
 800353a:	6819      	ldr	r1, [r3, #0]
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <init_menu+0x258>)
 800353e:	fba3 2301 	umull	r2, r3, r3, r1
 8003542:	08da      	lsrs	r2, r3, #3
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	1aca      	subs	r2, r1, r3
 800354e:	b2d3      	uxtb	r3, r2
 8003550:	3330      	adds	r3, #48	; 0x30
 8003552:	b2db      	uxtb	r3, r3
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fc9d 	bl	8000e94 <serial_putchar>
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000093 	.word	0x20000093
 8003568:	20000058 	.word	0x20000058
 800356c:	20009bfc 	.word	0x20009bfc
 8003570:	20009c00 	.word	0x20009c00
 8003574:	08004540 	.word	0x08004540
 8003578:	20000054 	.word	0x20000054
 800357c:	6b5fca6b 	.word	0x6b5fca6b
 8003580:	0a7c5ac5 	.word	0x0a7c5ac5
 8003584:	cccccccd 	.word	0xcccccccd
 8003588:	d1b71759 	.word	0xd1b71759
 800358c:	10624dd3 	.word	0x10624dd3
 8003590:	51eb851f 	.word	0x51eb851f

08003594 <init_level_1>:

void init_level_1(void) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0

	lev_num_flag = LEVEL_1;
 800359a:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <init_level_1+0x110>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]

	init_objects();
 80035a0:	f7fe fb5c 	bl	8001c5c <init_objects>

	vt100_clear_screen();
 80035a4:	f000 ff5c 	bl	8004460 <vt100_clear_screen>

	display_level_number(LEVEL_1);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f7ff fcb5 	bl	8002f18 <display_level_number>

	uint8_t j = VT100_SCREEN_XMIN;
 80035ae:	2301      	movs	r3, #1
 80035b0:	71fb      	strb	r3, [r7, #7]
	uint8_t k = VT100_SCREEN_YMIN;
 80035b2:	2301      	movs	r3, #1
 80035b4:	71bb      	strb	r3, [r7, #6]

	level_1 = level_dummy;
 80035b6:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <init_level_1+0x114>)
 80035b8:	4b3c      	ldr	r3, [pc, #240]	; (80036ac <init_level_1+0x118>)
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	f242 5304 	movw	r3, #9476	; 0x2504
 80035c2:	461a      	mov	r2, r3
 80035c4:	f000 ff92 	bl	80044ec <memcpy>

	level_1.ennemy_num = ENNEMY_AMOUNT;
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <init_level_1+0x114>)
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	709a      	strb	r2, [r3, #2]
	level_1.ennemy_move_side = RIGHT;
 80035ce:	4b36      	ldr	r3, [pc, #216]	; (80036a8 <init_level_1+0x114>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
	level_1.spaceship = spaceship;
 80035d4:	4b34      	ldr	r3, [pc, #208]	; (80036a8 <init_level_1+0x114>)
 80035d6:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 80035da:	3303      	adds	r3, #3
 80035dc:	4a34      	ldr	r2, [pc, #208]	; (80036b0 <init_level_1+0x11c>)
 80035de:	4618      	mov	r0, r3
 80035e0:	4611      	mov	r1, r2
 80035e2:	238f      	movs	r3, #143	; 0x8f
 80035e4:	461a      	mov	r2, r3
 80035e6:	f000 ff81 	bl	80044ec <memcpy>

	for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 80035ea:	2300      	movs	r3, #0
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	e028      	b.n	8003642 <init_level_1+0xae>

		update_coordinates(&ennemy_s_1, (j * (OBJECT_WIDTH_S)), k);
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	461a      	mov	r2, r3
 80035f4:	0052      	lsls	r2, r2, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	79ba      	ldrb	r2, [r7, #6]
 80035fc:	4619      	mov	r1, r3
 80035fe:	482d      	ldr	r0, [pc, #180]	; (80036b4 <init_level_1+0x120>)
 8003600:	f7fd fe5d 	bl	80012be <update_coordinates>
		object_list_append(&ennemy_s_1, level_1.ennemy_array, i);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	492b      	ldr	r1, [pc, #172]	; (80036b8 <init_level_1+0x124>)
 800360c:	4829      	ldr	r0, [pc, #164]	; (80036b4 <init_level_1+0x120>)
 800360e:	f7fe fa67 	bl	8001ae0 <object_list_append>

		j++;
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	3301      	adds	r3, #1
 8003616:	71fb      	strb	r3, [r7, #7]
		j %= 9;
 8003618:	79fa      	ldrb	r2, [r7, #7]
 800361a:	4b28      	ldr	r3, [pc, #160]	; (80036bc <init_level_1+0x128>)
 800361c:	fba3 1302 	umull	r1, r3, r3, r2
 8003620:	0859      	lsrs	r1, r3, #1
 8003622:	460b      	mov	r3, r1
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	71fb      	strb	r3, [r7, #7]
		if (j == 0) {
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <init_level_1+0xa8>
			j = VT100_SCREEN_YMIN;
 8003632:	2301      	movs	r3, #1
 8003634:	71fb      	strb	r3, [r7, #7]
			k++;
 8003636:	79bb      	ldrb	r3, [r7, #6]
 8003638:	3301      	adds	r3, #1
 800363a:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	3301      	adds	r3, #1
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b3f      	cmp	r3, #63	; 0x3f
 8003646:	ddd3      	ble.n	80035f0 <init_level_1+0x5c>
		}
	}

	level_1.ennemy_size = SMALL;
 8003648:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <init_level_1+0x114>)
 800364a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800364e:	333d      	adds	r3, #61	; 0x3d
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
	level_1.refresh_frequ = 130;
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <init_level_1+0x114>)
 8003656:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800365a:	2282      	movs	r2, #130	; 0x82
 800365c:	601a      	str	r2, [r3, #0]

	init_shield(10, 18);
 800365e:	2112      	movs	r1, #18
 8003660:	200a      	movs	r0, #10
 8003662:	f7ff fb83 	bl	8002d6c <init_shield>
	init_shield(40, 18);
 8003666:	2112      	movs	r1, #18
 8003668:	2028      	movs	r0, #40	; 0x28
 800366a:	f7ff fb7f 	bl	8002d6c <init_shield>
	init_shield(70, 18);
 800366e:	2112      	movs	r1, #18
 8003670:	2046      	movs	r0, #70	; 0x46
 8003672:	f7ff fb7b 	bl	8002d6c <init_shield>

	display_score(0);
 8003676:	2000      	movs	r0, #0
 8003678:	f7ff fcb2 	bl	8002fe0 <display_score>
	display_life(level_1.spaceship.life);
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <init_level_1+0x114>)
 800367e:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8003682:	3303      	adds	r3, #3
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fd7e 	bl	8003188 <display_life>

	object_list_display(level_1.ennemy_array, ENNEMY_AMOUNT);
 800368c:	2140      	movs	r1, #64	; 0x40
 800368e:	480a      	ldr	r0, [pc, #40]	; (80036b8 <init_level_1+0x124>)
 8003690:	f7fe fa40 	bl	8001b14 <object_list_display>
	display_flying_object(&level_1.spaceship);
 8003694:	480a      	ldr	r0, [pc, #40]	; (80036c0 <init_level_1+0x12c>)
 8003696:	f7fd fedb 	bl	8001450 <display_flying_object>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000093 	.word	0x20000093
 80036a8:	2000052c 	.word	0x2000052c
 80036ac:	20007438 	.word	0x20007438
 80036b0:	200002ec 	.word	0x200002ec
 80036b4:	2000037c 	.word	0x2000037c
 80036b8:	2000052f 	.word	0x2000052f
 80036bc:	38e38e39 	.word	0x38e38e39
 80036c0:	200028ef 	.word	0x200028ef

080036c4 <init_level_2>:

void init_level_2(void) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0

	lev_num_flag = LEVEL_2;
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <init_level_2+0x10c>)
 80036cc:	2202      	movs	r2, #2
 80036ce:	701a      	strb	r2, [r3, #0]

	init_objects();
 80036d0:	f7fe fac4 	bl	8001c5c <init_objects>

	vt100_clear_screen();
 80036d4:	f000 fec4 	bl	8004460 <vt100_clear_screen>

	display_level_number(LEVEL_2);
 80036d8:	2002      	movs	r0, #2
 80036da:	f7ff fc1d 	bl	8002f18 <display_level_number>

	uint8_t j = VT100_SCREEN_XMIN;
 80036de:	2301      	movs	r3, #1
 80036e0:	71fb      	strb	r3, [r7, #7]
	uint8_t k = VT100_SCREEN_YMIN;
 80036e2:	2301      	movs	r3, #1
 80036e4:	71bb      	strb	r3, [r7, #6]

	level_2 = level_dummy;
 80036e6:	4a3b      	ldr	r2, [pc, #236]	; (80037d4 <init_level_2+0x110>)
 80036e8:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <init_level_2+0x114>)
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	f242 5304 	movw	r3, #9476	; 0x2504
 80036f2:	461a      	mov	r2, r3
 80036f4:	f000 fefa 	bl	80044ec <memcpy>

	level_2.score = level_1.score;
 80036f8:	4b38      	ldr	r3, [pc, #224]	; (80037dc <init_level_2+0x118>)
 80036fa:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80036fe:	3334      	adds	r3, #52	; 0x34
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <init_level_2+0x110>)
 8003704:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8003708:	3334      	adds	r3, #52	; 0x34
 800370a:	601a      	str	r2, [r3, #0]

	level_2.ennemy_num = ENNEMY_AMOUNT;
 800370c:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <init_level_2+0x110>)
 800370e:	2240      	movs	r2, #64	; 0x40
 8003710:	709a      	strb	r2, [r3, #2]
	level_2.ennemy_move_side = RIGHT;
 8003712:	4b30      	ldr	r3, [pc, #192]	; (80037d4 <init_level_2+0x110>)
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]
	level_2.spaceship = spaceship;
 8003718:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <init_level_2+0x110>)
 800371a:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 800371e:	3303      	adds	r3, #3
 8003720:	4a2f      	ldr	r2, [pc, #188]	; (80037e0 <init_level_2+0x11c>)
 8003722:	4618      	mov	r0, r3
 8003724:	4611      	mov	r1, r2
 8003726:	238f      	movs	r3, #143	; 0x8f
 8003728:	461a      	mov	r2, r3
 800372a:	f000 fedf 	bl	80044ec <memcpy>

	for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 800372e:	2300      	movs	r3, #0
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	e028      	b.n	8003786 <init_level_2+0xc2>

		update_coordinates(&ennemy_s_2, (j * (OBJECT_WIDTH_S)), k);
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	461a      	mov	r2, r3
 8003738:	0052      	lsls	r2, r2, #1
 800373a:	4413      	add	r3, r2
 800373c:	b2db      	uxtb	r3, r3
 800373e:	79ba      	ldrb	r2, [r7, #6]
 8003740:	4619      	mov	r1, r3
 8003742:	4828      	ldr	r0, [pc, #160]	; (80037e4 <init_level_2+0x120>)
 8003744:	f7fd fdbb 	bl	80012be <update_coordinates>
		object_list_append(&ennemy_s_2, level_2.ennemy_array, i);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	4926      	ldr	r1, [pc, #152]	; (80037e8 <init_level_2+0x124>)
 8003750:	4824      	ldr	r0, [pc, #144]	; (80037e4 <init_level_2+0x120>)
 8003752:	f7fe f9c5 	bl	8001ae0 <object_list_append>

		j++;
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	3301      	adds	r3, #1
 800375a:	71fb      	strb	r3, [r7, #7]
		j %= 9;
 800375c:	79fa      	ldrb	r2, [r7, #7]
 800375e:	4b23      	ldr	r3, [pc, #140]	; (80037ec <init_level_2+0x128>)
 8003760:	fba3 1302 	umull	r1, r3, r3, r2
 8003764:	0859      	lsrs	r1, r3, #1
 8003766:	460b      	mov	r3, r1
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	440b      	add	r3, r1
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	71fb      	strb	r3, [r7, #7]
		if (j == 0) {
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <init_level_2+0xbc>
			j = VT100_SCREEN_YMIN;
 8003776:	2301      	movs	r3, #1
 8003778:	71fb      	strb	r3, [r7, #7]
			k++;
 800377a:	79bb      	ldrb	r3, [r7, #6]
 800377c:	3301      	adds	r3, #1
 800377e:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	3301      	adds	r3, #1
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b3f      	cmp	r3, #63	; 0x3f
 800378a:	ddd3      	ble.n	8003734 <init_level_2+0x70>
		}
	}

	level_2.ennemy_size = SMALL;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <init_level_2+0x110>)
 800378e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8003792:	333d      	adds	r3, #61	; 0x3d
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
	level_2.refresh_frequ = 130;
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <init_level_2+0x110>)
 800379a:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800379e:	2282      	movs	r2, #130	; 0x82
 80037a0:	601a      	str	r2, [r3, #0]

	init_shield(10, 18);
 80037a2:	2112      	movs	r1, #18
 80037a4:	200a      	movs	r0, #10
 80037a6:	f7ff fae1 	bl	8002d6c <init_shield>
	init_shield(40, 18);
 80037aa:	2112      	movs	r1, #18
 80037ac:	2028      	movs	r0, #40	; 0x28
 80037ae:	f7ff fadd 	bl	8002d6c <init_shield>
	init_shield(70, 18);
 80037b2:	2112      	movs	r1, #18
 80037b4:	2046      	movs	r0, #70	; 0x46
 80037b6:	f7ff fad9 	bl	8002d6c <init_shield>

	object_list_display(level_2.ennemy_array, ENNEMY_AMOUNT);
 80037ba:	2140      	movs	r1, #64	; 0x40
 80037bc:	480a      	ldr	r0, [pc, #40]	; (80037e8 <init_level_2+0x124>)
 80037be:	f7fe f9a9 	bl	8001b14 <object_list_display>
	display_flying_object(&level_2.spaceship);
 80037c2:	480b      	ldr	r0, [pc, #44]	; (80037f0 <init_level_2+0x12c>)
 80037c4:	f7fd fe44 	bl	8001450 <display_flying_object>
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000093 	.word	0x20000093
 80037d4:	20002a30 	.word	0x20002a30
 80037d8:	20007438 	.word	0x20007438
 80037dc:	2000052c 	.word	0x2000052c
 80037e0:	200002ec 	.word	0x200002ec
 80037e4:	2000040c 	.word	0x2000040c
 80037e8:	20002a33 	.word	0x20002a33
 80037ec:	38e38e39 	.word	0x38e38e39
 80037f0:	20004df3 	.word	0x20004df3

080037f4 <init_level_3>:

void init_level_3(void) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0

	lev_num_flag = LEVEL_3;
 80037fa:	4b41      	ldr	r3, [pc, #260]	; (8003900 <init_level_3+0x10c>)
 80037fc:	2203      	movs	r2, #3
 80037fe:	701a      	strb	r2, [r3, #0]

	init_objects();
 8003800:	f7fe fa2c 	bl	8001c5c <init_objects>

	vt100_clear_screen();
 8003804:	f000 fe2c 	bl	8004460 <vt100_clear_screen>

	display_level_number(LEVEL_3);
 8003808:	2003      	movs	r0, #3
 800380a:	f7ff fb85 	bl	8002f18 <display_level_number>

	uint8_t j = VT100_SCREEN_XMIN;
 800380e:	2301      	movs	r3, #1
 8003810:	71fb      	strb	r3, [r7, #7]
	uint8_t k = VT100_SCREEN_YMIN;
 8003812:	2301      	movs	r3, #1
 8003814:	71bb      	strb	r3, [r7, #6]

	level_3 = level_dummy;
 8003816:	4a3b      	ldr	r2, [pc, #236]	; (8003904 <init_level_3+0x110>)
 8003818:	4b3b      	ldr	r3, [pc, #236]	; (8003908 <init_level_3+0x114>)
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	f242 5304 	movw	r3, #9476	; 0x2504
 8003822:	461a      	mov	r2, r3
 8003824:	f000 fe62 	bl	80044ec <memcpy>

	level_3.score = level_2.score;
 8003828:	4b38      	ldr	r3, [pc, #224]	; (800390c <init_level_3+0x118>)
 800382a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800382e:	3334      	adds	r3, #52	; 0x34
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b34      	ldr	r3, [pc, #208]	; (8003904 <init_level_3+0x110>)
 8003834:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8003838:	3334      	adds	r3, #52	; 0x34
 800383a:	601a      	str	r2, [r3, #0]

	level_3.ennemy_num = ENNEMY_AMOUNT;
 800383c:	4b31      	ldr	r3, [pc, #196]	; (8003904 <init_level_3+0x110>)
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	709a      	strb	r2, [r3, #2]
	level_3.ennemy_move_side = RIGHT;
 8003842:	4b30      	ldr	r3, [pc, #192]	; (8003904 <init_level_3+0x110>)
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
	level_3.spaceship = spaceship;
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <init_level_3+0x110>)
 800384a:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 800384e:	3303      	adds	r3, #3
 8003850:	4a2f      	ldr	r2, [pc, #188]	; (8003910 <init_level_3+0x11c>)
 8003852:	4618      	mov	r0, r3
 8003854:	4611      	mov	r1, r2
 8003856:	238f      	movs	r3, #143	; 0x8f
 8003858:	461a      	mov	r2, r3
 800385a:	f000 fe47 	bl	80044ec <memcpy>

	for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 800385e:	2300      	movs	r3, #0
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	e028      	b.n	80038b6 <init_level_3+0xc2>

		update_coordinates(&ennemy_s_3, (j * (OBJECT_WIDTH_S)), k);
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	461a      	mov	r2, r3
 8003868:	0052      	lsls	r2, r2, #1
 800386a:	4413      	add	r3, r2
 800386c:	b2db      	uxtb	r3, r3
 800386e:	79ba      	ldrb	r2, [r7, #6]
 8003870:	4619      	mov	r1, r3
 8003872:	4828      	ldr	r0, [pc, #160]	; (8003914 <init_level_3+0x120>)
 8003874:	f7fd fd23 	bl	80012be <update_coordinates>
		object_list_append(&ennemy_s_3, level_3.ennemy_array, i);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	4926      	ldr	r1, [pc, #152]	; (8003918 <init_level_3+0x124>)
 8003880:	4824      	ldr	r0, [pc, #144]	; (8003914 <init_level_3+0x120>)
 8003882:	f7fe f92d 	bl	8001ae0 <object_list_append>

		j++;
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	3301      	adds	r3, #1
 800388a:	71fb      	strb	r3, [r7, #7]
		j %= 9;
 800388c:	79fa      	ldrb	r2, [r7, #7]
 800388e:	4b23      	ldr	r3, [pc, #140]	; (800391c <init_level_3+0x128>)
 8003890:	fba3 1302 	umull	r1, r3, r3, r2
 8003894:	0859      	lsrs	r1, r3, #1
 8003896:	460b      	mov	r3, r1
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	71fb      	strb	r3, [r7, #7]
		if (j == 0) {
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d104      	bne.n	80038b0 <init_level_3+0xbc>
			j = VT100_SCREEN_YMIN;
 80038a6:	2301      	movs	r3, #1
 80038a8:	71fb      	strb	r3, [r7, #7]
			k++;
 80038aa:	79bb      	ldrb	r3, [r7, #6]
 80038ac:	3301      	adds	r3, #1
 80038ae:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b3f      	cmp	r3, #63	; 0x3f
 80038ba:	ddd3      	ble.n	8003864 <init_level_3+0x70>
		}
	}

	level_3.ennemy_size = SMALL;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <init_level_3+0x110>)
 80038be:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80038c2:	333d      	adds	r3, #61	; 0x3d
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
	level_3.refresh_frequ = 130;
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <init_level_3+0x110>)
 80038ca:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80038ce:	2282      	movs	r2, #130	; 0x82
 80038d0:	601a      	str	r2, [r3, #0]

	init_shield(10, 18);
 80038d2:	2112      	movs	r1, #18
 80038d4:	200a      	movs	r0, #10
 80038d6:	f7ff fa49 	bl	8002d6c <init_shield>
	init_shield(40, 18);
 80038da:	2112      	movs	r1, #18
 80038dc:	2028      	movs	r0, #40	; 0x28
 80038de:	f7ff fa45 	bl	8002d6c <init_shield>
	init_shield(70, 18);
 80038e2:	2112      	movs	r1, #18
 80038e4:	2046      	movs	r0, #70	; 0x46
 80038e6:	f7ff fa41 	bl	8002d6c <init_shield>

	object_list_display(level_3.ennemy_array, ENNEMY_AMOUNT);
 80038ea:	2140      	movs	r1, #64	; 0x40
 80038ec:	480a      	ldr	r0, [pc, #40]	; (8003918 <init_level_3+0x124>)
 80038ee:	f7fe f911 	bl	8001b14 <object_list_display>
	display_flying_object(&level_3.spaceship);
 80038f2:	480b      	ldr	r0, [pc, #44]	; (8003920 <init_level_3+0x12c>)
 80038f4:	f7fd fdac 	bl	8001450 <display_flying_object>
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20000093 	.word	0x20000093
 8003904:	20004f34 	.word	0x20004f34
 8003908:	20007438 	.word	0x20007438
 800390c:	20002a30 	.word	0x20002a30
 8003910:	200002ec 	.word	0x200002ec
 8003914:	2000049c 	.word	0x2000049c
 8003918:	20004f37 	.word	0x20004f37
 800391c:	38e38e39 	.word	0x38e38e39
 8003920:	200072f7 	.word	0x200072f7

08003924 <init_game_over>:

void init_game_over(void) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0

	lev_num_flag = GAME_OVER;
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <init_game_over+0x60>)
 800392c:	2204      	movs	r2, #4
 800392e:	701a      	strb	r2, [r3, #0]

	vt100_clear_screen();
 8003930:	f000 fd96 	bl	8004460 <vt100_clear_screen>

	for (int i = 0; i < game_over_max; i++) {
 8003934:	2300      	movs	r3, #0
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	e011      	b.n	800395e <init_game_over+0x3a>
		vt100_move(VT100_SCREEN_XMAX / 2 - 2 + i,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	3326      	adds	r3, #38	; 0x26
 8003940:	b2db      	uxtb	r3, r3
 8003942:	210c      	movs	r1, #12
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fd0f 	bl	8004368 <vt100_move>
		VT100_SCREEN_YMAX / 2);
		serial_putchar(game_over_message[i]);
 800394a:	4a0f      	ldr	r2, [pc, #60]	; (8003988 <init_game_over+0x64>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd fa9e 	bl	8000e94 <serial_putchar>
	for (int i = 0; i < game_over_max; i++) {
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3301      	adds	r3, #1
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <init_game_over+0x68>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	429a      	cmp	r2, r3
 8003968:	dce7      	bgt.n	800393a <init_game_over+0x16>
	}

	delay_(5000);
 800396a:	f241 3088 	movw	r0, #5000	; 0x1388
 800396e:	f7fd fa11 	bl	8000d94 <delay_>

	vt100_clear_screen();
 8003972:	f000 fd75 	bl	8004460 <vt100_clear_screen>

	charge_level(MENU);
 8003976:	2000      	movs	r0, #0
 8003978:	f7ff faa4 	bl	8002ec4 <charge_level>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000093 	.word	0x20000093
 8003988:	08004524 	.word	0x08004524
 800398c:	20000051 	.word	0x20000051

08003990 <levels_events>:

void levels_events(level_s *level) {
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

	if (!(keyboard_flags & KFPAUS) && lev_num_flag != MENU
 8003998:	4bb0      	ldr	r3, [pc, #704]	; (8003c5c <levels_events+0x2cc>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 838e 	bne.w	80040c2 <levels_events+0x732>
 80039a6:	4bae      	ldr	r3, [pc, #696]	; (8003c60 <levels_events+0x2d0>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8389 	beq.w	80040c2 <levels_events+0x732>
			&& lev_num_flag != GAME_OVER) {
 80039b0:	4bab      	ldr	r3, [pc, #684]	; (8003c60 <levels_events+0x2d0>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	f000 8384 	beq.w	80040c2 <levels_events+0x732>

		level->alea_ennemy_array_i = LFSR_get();
 80039ba:	f7fd f9b5 	bl	8000d28 <LFSR_get>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	705a      	strb	r2, [r3, #1]
		level->alea_ennemy_array_i %= ENNEMY_AMOUNT;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	785b      	ldrb	r3, [r3, #1]
 80039ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	705a      	strb	r2, [r3, #1]

		switch (level->ennemy_size) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80039da:	333d      	adds	r3, #61	; 0x3d
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	f000 8099 	beq.w	8003b16 <levels_events+0x186>
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	f000 8129 	beq.w	8003c3c <levels_events+0x2ac>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 81c6 	bne.w	8003d7c <levels_events+0x3ec>
		case SMALL:
			temp_left._hitbox_array.hitbox_s[0][0].x =
 80039f0:	4b9c      	ldr	r3, [pc, #624]	; (8003c64 <levels_events+0x2d4>)
 80039f2:	2228      	movs	r2, #40	; 0x28
 80039f4:	715a      	strb	r2, [r3, #5]
			VT100_SCREEN_WIDTH / 2;
			temp_right._hitbox_array.hitbox_s[0][0].x =
 80039f6:	4b9c      	ldr	r3, [pc, #624]	; (8003c68 <levels_events+0x2d8>)
 80039f8:	2228      	movs	r2, #40	; 0x28
 80039fa:	715a      	strb	r2, [r3, #5]
			VT100_SCREEN_WIDTH / 2;
			temp_up._hitbox_array.hitbox_s[0][0].y = VT100_SCREEN_HEIGHT / 2;
 80039fc:	4b9b      	ldr	r3, [pc, #620]	; (8003c6c <levels_events+0x2dc>)
 80039fe:	220c      	movs	r2, #12
 8003a00:	719a      	strb	r2, [r3, #6]
			temp_down._hitbox_array.hitbox_s[0][0].y =
 8003a02:	4b9b      	ldr	r3, [pc, #620]	; (8003c70 <levels_events+0x2e0>)
 8003a04:	220c      	movs	r2, #12
 8003a06:	719a      	strb	r2, [r3, #6]
			VT100_SCREEN_HEIGHT / 2;

			for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e07e      	b.n	8003b0c <levels_events+0x17c>
				if (level->ennemy_array[i].exist) {
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3304      	adds	r3, #4
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d06f      	beq.n	8003b06 <levels_events+0x176>
					if (temp_left._hitbox_array.hitbox_s[0][0].x
 8003a26:	4b8f      	ldr	r3, [pc, #572]	; (8003c64 <levels_events+0x2d4>)
 8003a28:	7959      	ldrb	r1, [r3, #5]
							> level->ennemy_array[i]._hitbox_array.hitbox_s[0][0].x)
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	4403      	add	r3, r0
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	781b      	ldrb	r3, [r3, #0]
					if (temp_left._hitbox_array.hitbox_s[0][0].x
 8003a3e:	4299      	cmp	r1, r3
 8003a40:	d90d      	bls.n	8003a5e <levels_events+0xce>
						temp_left = level->ennemy_array[i];
 8003a42:	4888      	ldr	r0, [pc, #544]	; (8003c64 <levels_events+0x2d4>)
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	440b      	add	r3, r1
 8003a54:	3303      	adds	r3, #3
 8003a56:	228f      	movs	r2, #143	; 0x8f
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f000 fd47 	bl	80044ec <memcpy>
					if (temp_right._hitbox_array.hitbox_s[0][0].x
 8003a5e:	4b82      	ldr	r3, [pc, #520]	; (8003c68 <levels_events+0x2d8>)
 8003a60:	7959      	ldrb	r1, [r3, #5]
							< level->ennemy_array[i]._hitbox_array.hitbox_s[0][0].x)
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	4403      	add	r3, r0
 8003a72:	3308      	adds	r3, #8
 8003a74:	781b      	ldrb	r3, [r3, #0]
					if (temp_right._hitbox_array.hitbox_s[0][0].x
 8003a76:	4299      	cmp	r1, r3
 8003a78:	d20d      	bcs.n	8003a96 <levels_events+0x106>
						temp_right = level->ennemy_array[i];
 8003a7a:	487b      	ldr	r0, [pc, #492]	; (8003c68 <levels_events+0x2d8>)
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3303      	adds	r3, #3
 8003a8e:	228f      	movs	r2, #143	; 0x8f
 8003a90:	4619      	mov	r1, r3
 8003a92:	f000 fd2b 	bl	80044ec <memcpy>
					if (temp_up._hitbox_array.hitbox_s[0][0].y
 8003a96:	4b75      	ldr	r3, [pc, #468]	; (8003c6c <levels_events+0x2dc>)
 8003a98:	7999      	ldrb	r1, [r3, #6]
							> level->ennemy_array[i]._hitbox_array.hitbox_s[0][0].y)
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	4403      	add	r3, r0
 8003aaa:	3309      	adds	r3, #9
 8003aac:	781b      	ldrb	r3, [r3, #0]
					if (temp_up._hitbox_array.hitbox_s[0][0].y
 8003aae:	4299      	cmp	r1, r3
 8003ab0:	d90d      	bls.n	8003ace <levels_events+0x13e>
						temp_up = level->ennemy_array[i];
 8003ab2:	486e      	ldr	r0, [pc, #440]	; (8003c6c <levels_events+0x2dc>)
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3303      	adds	r3, #3
 8003ac6:	228f      	movs	r2, #143	; 0x8f
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f000 fd0f 	bl	80044ec <memcpy>
					if (temp_down._hitbox_array.hitbox_s[0][0].y
 8003ace:	4b68      	ldr	r3, [pc, #416]	; (8003c70 <levels_events+0x2e0>)
 8003ad0:	7999      	ldrb	r1, [r3, #6]
							< level->ennemy_array[i]._hitbox_array.hitbox_s[0][0].y)
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	4403      	add	r3, r0
 8003ae2:	3309      	adds	r3, #9
 8003ae4:	781b      	ldrb	r3, [r3, #0]
					if (temp_down._hitbox_array.hitbox_s[0][0].y
 8003ae6:	4299      	cmp	r1, r3
 8003ae8:	d20d      	bcs.n	8003b06 <levels_events+0x176>
						temp_down = level->ennemy_array[i];
 8003aea:	4861      	ldr	r0, [pc, #388]	; (8003c70 <levels_events+0x2e0>)
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	440b      	add	r3, r1
 8003afc:	3303      	adds	r3, #3
 8003afe:	228f      	movs	r2, #143	; 0x8f
 8003b00:	4619      	mov	r1, r3
 8003b02:	f000 fcf3 	bl	80044ec <memcpy>
			for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b3f      	cmp	r3, #63	; 0x3f
 8003b10:	f77f af7d 	ble.w	8003a0e <levels_events+0x7e>
				}
			}
			break;
 8003b14:	e132      	b.n	8003d7c <levels_events+0x3ec>
		case MEDIUM:
			temp_left._hitbox_array.hitbox_m[0][0].x =
 8003b16:	4b53      	ldr	r3, [pc, #332]	; (8003c64 <levels_events+0x2d4>)
 8003b18:	2228      	movs	r2, #40	; 0x28
 8003b1a:	715a      	strb	r2, [r3, #5]
			VT100_SCREEN_WIDTH / 2;
			temp_right._hitbox_array.hitbox_m[0][0].x =
 8003b1c:	4b52      	ldr	r3, [pc, #328]	; (8003c68 <levels_events+0x2d8>)
 8003b1e:	2228      	movs	r2, #40	; 0x28
 8003b20:	715a      	strb	r2, [r3, #5]
			VT100_SCREEN_WIDTH / 2;
			temp_up._hitbox_array.hitbox_m[0][0].y = VT100_SCREEN_HEIGHT / 2;
 8003b22:	4b52      	ldr	r3, [pc, #328]	; (8003c6c <levels_events+0x2dc>)
 8003b24:	220c      	movs	r2, #12
 8003b26:	719a      	strb	r2, [r3, #6]
			temp_down._hitbox_array.hitbox_m[0][0].y =
 8003b28:	4b51      	ldr	r3, [pc, #324]	; (8003c70 <levels_events+0x2e0>)
 8003b2a:	220c      	movs	r2, #12
 8003b2c:	719a      	strb	r2, [r3, #6]
			VT100_SCREEN_HEIGHT / 2;

			for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	e07e      	b.n	8003c32 <levels_events+0x2a2>
				if (level->ennemy_array[i].exist) {
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	440b      	add	r3, r1
 8003b44:	3304      	adds	r3, #4
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d06f      	beq.n	8003c2c <levels_events+0x29c>
					if (temp_left._hitbox_array.hitbox_m[0][0].x
 8003b4c:	4b45      	ldr	r3, [pc, #276]	; (8003c64 <levels_events+0x2d4>)
 8003b4e:	7959      	ldrb	r1, [r3, #5]
							> level->ennemy_array[i]._hitbox_array.hitbox_m[0][0].x)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	4403      	add	r3, r0
 8003b60:	3308      	adds	r3, #8
 8003b62:	781b      	ldrb	r3, [r3, #0]
					if (temp_left._hitbox_array.hitbox_m[0][0].x
 8003b64:	4299      	cmp	r1, r3
 8003b66:	d90d      	bls.n	8003b84 <levels_events+0x1f4>
						temp_left = level->ennemy_array[i];
 8003b68:	483e      	ldr	r0, [pc, #248]	; (8003c64 <levels_events+0x2d4>)
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4413      	add	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	440b      	add	r3, r1
 8003b7a:	3303      	adds	r3, #3
 8003b7c:	228f      	movs	r2, #143	; 0x8f
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f000 fcb4 	bl	80044ec <memcpy>
					if (temp_right._hitbox_array.hitbox_m[0][0].x
 8003b84:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <levels_events+0x2d8>)
 8003b86:	7959      	ldrb	r1, [r3, #5]
							< level->ennemy_array[i]._hitbox_array.hitbox_m[0][0].x)
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	4403      	add	r3, r0
 8003b98:	3308      	adds	r3, #8
 8003b9a:	781b      	ldrb	r3, [r3, #0]
					if (temp_right._hitbox_array.hitbox_m[0][0].x
 8003b9c:	4299      	cmp	r1, r3
 8003b9e:	d20d      	bcs.n	8003bbc <levels_events+0x22c>
						temp_right = level->ennemy_array[i];
 8003ba0:	4831      	ldr	r0, [pc, #196]	; (8003c68 <levels_events+0x2d8>)
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3303      	adds	r3, #3
 8003bb4:	228f      	movs	r2, #143	; 0x8f
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f000 fc98 	bl	80044ec <memcpy>
					if (temp_up._hitbox_array.hitbox_m[0][0].y
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <levels_events+0x2dc>)
 8003bbe:	7999      	ldrb	r1, [r3, #6]
							> level->ennemy_array[i]._hitbox_array.hitbox_m[0][0].y)
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	4403      	add	r3, r0
 8003bd0:	3309      	adds	r3, #9
 8003bd2:	781b      	ldrb	r3, [r3, #0]
					if (temp_up._hitbox_array.hitbox_m[0][0].y
 8003bd4:	4299      	cmp	r1, r3
 8003bd6:	d90d      	bls.n	8003bf4 <levels_events+0x264>
						temp_up = level->ennemy_array[i];
 8003bd8:	4824      	ldr	r0, [pc, #144]	; (8003c6c <levels_events+0x2dc>)
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	440b      	add	r3, r1
 8003bea:	3303      	adds	r3, #3
 8003bec:	228f      	movs	r2, #143	; 0x8f
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f000 fc7c 	bl	80044ec <memcpy>
					if (temp_down._hitbox_array.hitbox_m[0][0].y
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <levels_events+0x2e0>)
 8003bf6:	7999      	ldrb	r1, [r3, #6]
							< level->ennemy_array[i]._hitbox_array.hitbox_m[0][0].y)
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	4403      	add	r3, r0
 8003c08:	3309      	adds	r3, #9
 8003c0a:	781b      	ldrb	r3, [r3, #0]
					if (temp_down._hitbox_array.hitbox_m[0][0].y
 8003c0c:	4299      	cmp	r1, r3
 8003c0e:	d20d      	bcs.n	8003c2c <levels_events+0x29c>
						temp_down = level->ennemy_array[i];
 8003c10:	4817      	ldr	r0, [pc, #92]	; (8003c70 <levels_events+0x2e0>)
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	440b      	add	r3, r1
 8003c22:	3303      	adds	r3, #3
 8003c24:	228f      	movs	r2, #143	; 0x8f
 8003c26:	4619      	mov	r1, r3
 8003c28:	f000 fc60 	bl	80044ec <memcpy>
			for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b3f      	cmp	r3, #63	; 0x3f
 8003c36:	f77f af7d 	ble.w	8003b34 <levels_events+0x1a4>
				}
			}
			break;
 8003c3a:	e09f      	b.n	8003d7c <levels_events+0x3ec>
		case LARGE:
			temp_left._hitbox_array.hitbox_l[0][0].x =
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <levels_events+0x2d4>)
 8003c3e:	2228      	movs	r2, #40	; 0x28
 8003c40:	715a      	strb	r2, [r3, #5]
			VT100_SCREEN_WIDTH / 2;
			temp_right._hitbox_array.hitbox_l[0][0].x =
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <levels_events+0x2d8>)
 8003c44:	2228      	movs	r2, #40	; 0x28
 8003c46:	715a      	strb	r2, [r3, #5]
			VT100_SCREEN_WIDTH / 2;
			temp_up._hitbox_array.hitbox_l[0][0].y = VT100_SCREEN_HEIGHT / 2;
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <levels_events+0x2dc>)
 8003c4a:	220c      	movs	r2, #12
 8003c4c:	719a      	strb	r2, [r3, #6]
			temp_down._hitbox_array.hitbox_l[0][0].y =
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <levels_events+0x2e0>)
 8003c50:	220c      	movs	r2, #12
 8003c52:	719a      	strb	r2, [r3, #6]
			VT100_SCREEN_HEIGHT / 2;

			for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e08b      	b.n	8003d72 <levels_events+0x3e2>
 8003c5a:	bf00      	nop
 8003c5c:	20000091 	.word	0x20000091
 8003c60:	20000093 	.word	0x20000093
 8003c64:	2000993c 	.word	0x2000993c
 8003c68:	200099cc 	.word	0x200099cc
 8003c6c:	20009a5c 	.word	0x20009a5c
 8003c70:	20009aec 	.word	0x20009aec
				if (level->ennemy_array[i].exist) {
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	440b      	add	r3, r1
 8003c84:	3304      	adds	r3, #4
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d06f      	beq.n	8003d6c <levels_events+0x3dc>
					if (temp_left._hitbox_array.hitbox_l[0][0].x
 8003c8c:	4bba      	ldr	r3, [pc, #744]	; (8003f78 <levels_events+0x5e8>)
 8003c8e:	7959      	ldrb	r1, [r3, #5]
							> level->ennemy_array[i]._hitbox_array.hitbox_l[0][0].x)
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	4403      	add	r3, r0
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	781b      	ldrb	r3, [r3, #0]
					if (temp_left._hitbox_array.hitbox_l[0][0].x
 8003ca4:	4299      	cmp	r1, r3
 8003ca6:	d90d      	bls.n	8003cc4 <levels_events+0x334>
						temp_left = level->ennemy_array[i];
 8003ca8:	48b3      	ldr	r0, [pc, #716]	; (8003f78 <levels_events+0x5e8>)
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3303      	adds	r3, #3
 8003cbc:	228f      	movs	r2, #143	; 0x8f
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f000 fc14 	bl	80044ec <memcpy>
					if (temp_right._hitbox_array.hitbox_l[0][0].x
 8003cc4:	4bad      	ldr	r3, [pc, #692]	; (8003f7c <levels_events+0x5ec>)
 8003cc6:	7959      	ldrb	r1, [r3, #5]
							< level->ennemy_array[i]._hitbox_array.hitbox_l[0][0].x)
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	4403      	add	r3, r0
 8003cd8:	3308      	adds	r3, #8
 8003cda:	781b      	ldrb	r3, [r3, #0]
					if (temp_right._hitbox_array.hitbox_l[0][0].x
 8003cdc:	4299      	cmp	r1, r3
 8003cde:	d20d      	bcs.n	8003cfc <levels_events+0x36c>
						temp_right = level->ennemy_array[i];
 8003ce0:	48a6      	ldr	r0, [pc, #664]	; (8003f7c <levels_events+0x5ec>)
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3303      	adds	r3, #3
 8003cf4:	228f      	movs	r2, #143	; 0x8f
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f000 fbf8 	bl	80044ec <memcpy>
					if (temp_up._hitbox_array.hitbox_l[0][0].y
 8003cfc:	4ba0      	ldr	r3, [pc, #640]	; (8003f80 <levels_events+0x5f0>)
 8003cfe:	7999      	ldrb	r1, [r3, #6]
							> level->ennemy_array[i]._hitbox_array.hitbox_l[0][0].y)
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	4403      	add	r3, r0
 8003d10:	3309      	adds	r3, #9
 8003d12:	781b      	ldrb	r3, [r3, #0]
					if (temp_up._hitbox_array.hitbox_l[0][0].y
 8003d14:	4299      	cmp	r1, r3
 8003d16:	d90d      	bls.n	8003d34 <levels_events+0x3a4>
						temp_up = level->ennemy_array[i];
 8003d18:	4899      	ldr	r0, [pc, #612]	; (8003f80 <levels_events+0x5f0>)
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4413      	add	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	440b      	add	r3, r1
 8003d2a:	3303      	adds	r3, #3
 8003d2c:	228f      	movs	r2, #143	; 0x8f
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f000 fbdc 	bl	80044ec <memcpy>
					if (temp_down._hitbox_array.hitbox_l[0][0].y
 8003d34:	4b93      	ldr	r3, [pc, #588]	; (8003f84 <levels_events+0x5f4>)
 8003d36:	7999      	ldrb	r1, [r3, #6]
							< level->ennemy_array[i]._hitbox_array.hitbox_l[0][0].y)
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	4403      	add	r3, r0
 8003d48:	3309      	adds	r3, #9
 8003d4a:	781b      	ldrb	r3, [r3, #0]
					if (temp_down._hitbox_array.hitbox_l[0][0].y
 8003d4c:	4299      	cmp	r1, r3
 8003d4e:	d20d      	bcs.n	8003d6c <levels_events+0x3dc>
						temp_down = level->ennemy_array[i];
 8003d50:	488c      	ldr	r0, [pc, #560]	; (8003f84 <levels_events+0x5f4>)
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	440b      	add	r3, r1
 8003d62:	3303      	adds	r3, #3
 8003d64:	228f      	movs	r2, #143	; 0x8f
 8003d66:	4619      	mov	r1, r3
 8003d68:	f000 fbc0 	bl	80044ec <memcpy>
			for (int i = 0; i < ENNEMY_AMOUNT; i++) {
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b3f      	cmp	r3, #63	; 0x3f
 8003d76:	f77f af7d 	ble.w	8003c74 <levels_events+0x2e4>
				}
			}
			break;
 8003d7a:	bf00      	nop
		}

		if (level->ennemy_move_side == RIGHT) {
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d11a      	bne.n	8003dba <levels_events+0x42a>
			object_list_scroll(level->ennemy_array, ENNEMY_AMOUNT, RIGHT, 1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	1cd8      	adds	r0, r3, #3
 8003d88:	2301      	movs	r3, #1
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2140      	movs	r1, #64	; 0x40
 8003d8e:	f7fd fee1 	bl	8001b54 <object_list_scroll>
			if (flying_object_move_limit(&temp_right, RIGHT, 2) == FALSE) {
 8003d92:	2202      	movs	r2, #2
 8003d94:	2101      	movs	r1, #1
 8003d96:	4879      	ldr	r0, [pc, #484]	; (8003f7c <levels_events+0x5ec>)
 8003d98:	f7fd fda2 	bl	80018e0 <flying_object_move_limit>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f040 80db 	bne.w	8003f5a <levels_events+0x5ca>
				object_list_scroll(level->ennemy_array, ENNEMY_AMOUNT, DOWN, 1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	1cd8      	adds	r0, r3, #3
 8003da8:	2301      	movs	r3, #1
 8003daa:	2203      	movs	r2, #3
 8003dac:	2140      	movs	r1, #64	; 0x40
 8003dae:	f7fd fed1 	bl	8001b54 <object_list_scroll>
				level->ennemy_move_side = LEFT;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	e0cf      	b.n	8003f5a <levels_events+0x5ca>
			}
		} else if (level->ennemy_move_side == LEFT) {
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 80cb 	bne.w	8003f5a <levels_events+0x5ca>
			object_list_scroll(level->ennemy_array, ENNEMY_AMOUNT, LEFT, 1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	1cd8      	adds	r0, r3, #3
 8003dc8:	2301      	movs	r3, #1
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2140      	movs	r1, #64	; 0x40
 8003dce:	f7fd fec1 	bl	8001b54 <object_list_scroll>
			if (flying_object_move_limit(&temp_left, LEFT, 2) == FALSE) {
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4868      	ldr	r0, [pc, #416]	; (8003f78 <levels_events+0x5e8>)
 8003dd8:	f7fd fd82 	bl	80018e0 <flying_object_move_limit>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f040 80bb 	bne.w	8003f5a <levels_events+0x5ca>
				object_list_scroll(level->ennemy_array, ENNEMY_AMOUNT, DOWN, 1);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	1cd8      	adds	r0, r3, #3
 8003de8:	2301      	movs	r3, #1
 8003dea:	2203      	movs	r2, #3
 8003dec:	2140      	movs	r1, #64	; 0x40
 8003dee:	f7fd feb1 	bl	8001b54 <object_list_scroll>
				level->ennemy_move_side = RIGHT;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
			}
		}

		while (level->ennemy_num != 0) {
 8003df8:	e0af      	b.n	8003f5a <levels_events+0x5ca>
			if (level->ennemy_array[level->alea_ennemy_array_i].exist) {
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3304      	adds	r3, #4
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8094 	beq.w	8003f40 <levels_events+0x5b0>
				switch (level->ennemy_size) {
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8003e1e:	333d      	adds	r3, #61	; 0x3d
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d031      	beq.n	8003e8a <levels_events+0x4fa>
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d05c      	beq.n	8003ee4 <levels_events+0x554>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d000      	beq.n	8003e30 <levels_events+0x4a0>
									- 1][0].x + (OBJECT_WIDTH_L / 2),
							level->ennemy_array[level->alea_ennemy_array_i]._hitbox_array.hitbox_l[OBJECT_HEIGHT_L
									- 1][0].y + 1);
					break;
				}
				break;
 8003e2e:	e099      	b.n	8003f64 <levels_events+0x5d4>
							level->ennemy_array[level->alea_ennemy_array_i]._hitbox_array.hitbox_s[OBJECT_HEIGHT_S
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	461a      	mov	r2, r3
					init_shoot(
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	440b      	add	r3, r1
 8003e44:	3307      	adds	r3, #7
 8003e46:	7818      	ldrb	r0, [r3, #0]
							level->ennemy_array[level->alea_ennemy_array_i]._hitbox_array.hitbox_s[OBJECT_HEIGHT_S
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	461a      	mov	r2, r3
									- 1][0].x + (OBJECT_WIDTH_S / 2),
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	781b      	ldrb	r3, [r3, #0]
					init_shoot(
 8003e60:	3301      	adds	r3, #1
 8003e62:	b2dc      	uxtb	r4, r3
							level->ennemy_array[level->alea_ennemy_array_i]._hitbox_array.hitbox_s[OBJECT_HEIGHT_S
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	461a      	mov	r2, r3
									- 1][0].y + 1);
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	440b      	add	r3, r1
 8003e78:	3309      	adds	r3, #9
 8003e7a:	781b      	ldrb	r3, [r3, #0]
					init_shoot(
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	4622      	mov	r2, r4
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	f7fe f8d8 	bl	8002038 <init_shoot>
					break;
 8003e88:	e059      	b.n	8003f3e <levels_events+0x5ae>
							level->ennemy_array[level->alea_ennemy_array_i]._hitbox_array.hitbox_m[OBJECT_HEIGHT_M
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	461a      	mov	r2, r3
					init_shoot(
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3320      	adds	r3, #32
 8003ea0:	7818      	ldrb	r0, [r3, #0]
							level->ennemy_array[level->alea_ennemy_array_i]._hitbox_array.hitbox_m[OBJECT_HEIGHT_M
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	785b      	ldrb	r3, [r3, #1]
 8003ea6:	461a      	mov	r2, r3
									- 1][0].x + (OBJECT_WIDTH_M / 2),
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3321      	adds	r3, #33	; 0x21
 8003eb8:	781b      	ldrb	r3, [r3, #0]
					init_shoot(
 8003eba:	3302      	adds	r3, #2
 8003ebc:	b2dc      	uxtb	r4, r3
							level->ennemy_array[level->alea_ennemy_array_i]._hitbox_array.hitbox_m[OBJECT_HEIGHT_M
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	785b      	ldrb	r3, [r3, #1]
 8003ec2:	461a      	mov	r2, r3
									- 1][0].y + 1);
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3322      	adds	r3, #34	; 0x22
 8003ed4:	781b      	ldrb	r3, [r3, #0]
					init_shoot(
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	4622      	mov	r2, r4
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	f7fe f8ab 	bl	8002038 <init_shoot>
					break;
 8003ee2:	e02c      	b.n	8003f3e <levels_events+0x5ae>
							level->ennemy_array[level->alea_ennemy_array_i]._hitbox_array.hitbox_l[OBJECT_HEIGHT_L
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	785b      	ldrb	r3, [r3, #1]
 8003ee8:	461a      	mov	r2, r3
					init_shoot(
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	3370      	adds	r3, #112	; 0x70
 8003efa:	7818      	ldrb	r0, [r3, #0]
							level->ennemy_array[level->alea_ennemy_array_i]._hitbox_array.hitbox_l[OBJECT_HEIGHT_L
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	785b      	ldrb	r3, [r3, #1]
 8003f00:	461a      	mov	r2, r3
									- 1][0].x + (OBJECT_WIDTH_L / 2),
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	440b      	add	r3, r1
 8003f10:	3371      	adds	r3, #113	; 0x71
 8003f12:	781b      	ldrb	r3, [r3, #0]
					init_shoot(
 8003f14:	3303      	adds	r3, #3
 8003f16:	b2dc      	uxtb	r4, r3
							level->ennemy_array[level->alea_ennemy_array_i]._hitbox_array.hitbox_l[OBJECT_HEIGHT_L
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	785b      	ldrb	r3, [r3, #1]
 8003f1c:	461a      	mov	r2, r3
									- 1][0].y + 1);
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	3372      	adds	r3, #114	; 0x72
 8003f2e:	781b      	ldrb	r3, [r3, #0]
					init_shoot(
 8003f30:	3301      	adds	r3, #1
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	4622      	mov	r2, r4
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	f7fe f87e 	bl	8002038 <init_shoot>
					break;
 8003f3c:	bf00      	nop
				break;
 8003f3e:	e011      	b.n	8003f64 <levels_events+0x5d4>
			} else {
				level->alea_ennemy_array_i++;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	785b      	ldrb	r3, [r3, #1]
 8003f44:	3301      	adds	r3, #1
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	705a      	strb	r2, [r3, #1]
				level->alea_ennemy_array_i %= ENNEMY_AMOUNT;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	785b      	ldrb	r3, [r3, #1]
 8003f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	705a      	strb	r2, [r3, #1]
		while (level->ennemy_num != 0) {
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	789b      	ldrb	r3, [r3, #2]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f47f af4b 	bne.w	8003dfa <levels_events+0x46a>
			}
		}

		delay_(level->refresh_frequ);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fc ff11 	bl	8000d94 <delay_>

		for (int i = 0; i < 2; i++) {
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	e014      	b.n	8003fa2 <levels_events+0x612>
 8003f78:	2000993c 	.word	0x2000993c
 8003f7c:	200099cc 	.word	0x200099cc
 8003f80:	20009a5c 	.word	0x20009a5c
 8003f84:	20009aec 	.word	0x20009aec
			shoot_events(level);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fe f993 	bl	80022b4 <shoot_events>
			highscore_temp = level->score;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8003f94:	3334      	adds	r3, #52	; 0x34
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a4c      	ldr	r2, [pc, #304]	; (80040cc <levels_events+0x73c>)
 8003f9a:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 2; i++) {
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	ddef      	ble.n	8003f88 <levels_events+0x5f8>
		}

		if (level->spaceship.life != level->life_temp) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8003fae:	3303      	adds	r3, #3
 8003fb0:	781a      	ldrb	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8003fb8:	333c      	adds	r3, #60	; 0x3c
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d011      	beq.n	8003fe4 <levels_events+0x654>
			display_life(level->spaceship.life);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8003fc6:	3303      	adds	r3, #3
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff f8dc 	bl	8003188 <display_life>
			level->life_temp = level->spaceship.life;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8003fd6:	3303      	adds	r3, #3
 8003fd8:	781a      	ldrb	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8003fe0:	333c      	adds	r3, #60	; 0x3c
 8003fe2:	701a      	strb	r2, [r3, #0]
		}
		if (level->score != level->score_temp) {
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8003fea:	3334      	adds	r3, #52	; 0x34
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8003ff4:	3338      	adds	r3, #56	; 0x38
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d011      	beq.n	8004020 <levels_events+0x690>
			display_score(level->score);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8004002:	3334      	adds	r3, #52	; 0x34
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe ffea 	bl	8002fe0 <display_score>
			level->score_temp = level->score;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8004012:	3334      	adds	r3, #52	; 0x34
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800401c:	3338      	adds	r3, #56	; 0x38
 800401e:	601a      	str	r2, [r3, #0]
		}

		switch (temp_down.size) {
 8004020:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <levels_events+0x740>)
 8004022:	789b      	ldrb	r3, [r3, #2]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d012      	beq.n	800404e <levels_events+0x6be>
 8004028:	2b02      	cmp	r3, #2
 800402a:	d01f      	beq.n	800406c <levels_events+0x6dc>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d132      	bne.n	8004096 <levels_events+0x706>
		case SMALL:
			if (temp_down._hitbox_array.hitbox_s[OBJECT_HEIGHT_S - 1][0].y
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <levels_events+0x740>)
 8004032:	799b      	ldrb	r3, [r3, #6]
 8004034:	2b17      	cmp	r3, #23
 8004036:	d006      	beq.n	8004046 <levels_events+0x6b6>
					== VT100_SCREEN_HEIGHT - 1 || level->spaceship.life == 0)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 800403e:	3303      	adds	r3, #3
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d122      	bne.n	800408c <levels_events+0x6fc>
				charge_level(GAME_OVER);
 8004046:	2004      	movs	r0, #4
 8004048:	f7fe ff3c 	bl	8002ec4 <charge_level>
			break;
 800404c:	e01e      	b.n	800408c <levels_events+0x6fc>
		case MEDIUM:
			if (temp_down._hitbox_array.hitbox_m[OBJECT_HEIGHT_M - 1][0].y
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <levels_events+0x740>)
 8004050:	7fdb      	ldrb	r3, [r3, #31]
 8004052:	2b17      	cmp	r3, #23
 8004054:	d006      	beq.n	8004064 <levels_events+0x6d4>
					== VT100_SCREEN_HEIGHT - 1 || level->spaceship.life == 0)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 800405c:	3303      	adds	r3, #3
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d115      	bne.n	8004090 <levels_events+0x700>
				charge_level(GAME_OVER);
 8004064:	2004      	movs	r0, #4
 8004066:	f7fe ff2d 	bl	8002ec4 <charge_level>
			break;
 800406a:	e011      	b.n	8004090 <levels_events+0x700>
		case LARGE:
			if (temp_down._hitbox_array.hitbox_l[OBJECT_HEIGHT_L - 1][0].y
 800406c:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <levels_events+0x740>)
 800406e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8004072:	2b17      	cmp	r3, #23
 8004074:	d006      	beq.n	8004084 <levels_events+0x6f4>
					== VT100_SCREEN_HEIGHT - 1 || level->spaceship.life == 0)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 800407c:	3303      	adds	r3, #3
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d107      	bne.n	8004094 <levels_events+0x704>
				charge_level(GAME_OVER);
 8004084:	2004      	movs	r0, #4
 8004086:	f7fe ff1d 	bl	8002ec4 <charge_level>
			break;
 800408a:	e003      	b.n	8004094 <levels_events+0x704>
			break;
 800408c:	bf00      	nop
 800408e:	e002      	b.n	8004096 <levels_events+0x706>
			break;
 8004090:	bf00      	nop
 8004092:	e000      	b.n	8004096 <levels_events+0x706>
			break;
 8004094:	bf00      	nop
		}

		if (level->ennemy_num == 0) {
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	789b      	ldrb	r3, [r3, #2]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d111      	bne.n	80040c2 <levels_events+0x732>
			lev_num_flag++;
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <levels_events+0x744>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	3301      	adds	r3, #1
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <levels_events+0x744>)
 80040a8:	701a      	strb	r2, [r3, #0]
			lev_num_flag %= GAME_OVER;
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <levels_events+0x744>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <levels_events+0x744>)
 80040b6:	701a      	strb	r2, [r3, #0]
			charge_level(lev_num_flag);
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <levels_events+0x744>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe ff01 	bl	8002ec4 <charge_level>
		}
	}
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd90      	pop	{r4, r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20009bfc 	.word	0x20009bfc
 80040d0:	20009aec 	.word	0x20009aec
 80040d4:	20000093 	.word	0x20000093

080040d8 <charge_levels_events>:

void charge_levels_events(void) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
	LFSR_update();
 80040dc:	f7fc fe30 	bl	8000d40 <LFSR_update>
	compute_keyboard();
 80040e0:	f7fd fec8 	bl	8001e74 <compute_keyboard>
	switch (lev_num_flag) {
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <charge_levels_events+0x50>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d81a      	bhi.n	8004122 <charge_levels_events+0x4a>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <charge_levels_events+0x1c>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004121 	.word	0x08004121
 80040f8:	08004109 	.word	0x08004109
 80040fc:	08004111 	.word	0x08004111
 8004100:	08004119 	.word	0x08004119
 8004104:	08004121 	.word	0x08004121
	case MENU:
		/* nothing to do */
		break;
	case LEVEL_1:
		levels_events(&level_1);
 8004108:	4808      	ldr	r0, [pc, #32]	; (800412c <charge_levels_events+0x54>)
 800410a:	f7ff fc41 	bl	8003990 <levels_events>
		break;
 800410e:	e008      	b.n	8004122 <charge_levels_events+0x4a>
	case LEVEL_2:
		levels_events(&level_2);
 8004110:	4807      	ldr	r0, [pc, #28]	; (8004130 <charge_levels_events+0x58>)
 8004112:	f7ff fc3d 	bl	8003990 <levels_events>
		break;
 8004116:	e004      	b.n	8004122 <charge_levels_events+0x4a>
	case LEVEL_3:
		levels_events(&level_3);
 8004118:	4806      	ldr	r0, [pc, #24]	; (8004134 <charge_levels_events+0x5c>)
 800411a:	f7ff fc39 	bl	8003990 <levels_events>
		break;
 800411e:	e000      	b.n	8004122 <charge_levels_events+0x4a>
		break;
 8004120:	bf00      	nop
	case GAME_OVER:
		/* nothing to do */
		break;
	}
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000093 	.word	0x20000093
 800412c:	2000052c 	.word	0x2000052c
 8004130:	20002a30 	.word	0x20002a30
 8004134:	20004f34 	.word	0x20004f34

08004138 <TIM2_IRQHandler>:
	return lev_num_flag;
}

#define tim2_irq TIM2_IRQHandler

void tim2_irq(void) {
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0

}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <TIM3_IRQHandler>:

#define tim3_irq TIM3_IRQHandler

void tim3_irq(void) {
 8004146:	b480      	push	{r7}
 8004148:	af00      	add	r7, sp, #0

}
 800414a:	bf00      	nop
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800418c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004158:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800415a:	e003      	b.n	8004164 <LoopCopyDataInit>

0800415c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800415e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004160:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004162:	3104      	adds	r1, #4

08004164 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004164:	480b      	ldr	r0, [pc, #44]	; (8004194 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004166:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004168:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800416a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800416c:	d3f6      	bcc.n	800415c <CopyDataInit>
  ldr  r2, =_sbss
 800416e:	4a0b      	ldr	r2, [pc, #44]	; (800419c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004170:	e002      	b.n	8004178 <LoopFillZerobss>

08004172 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004172:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004174:	f842 3b04 	str.w	r3, [r2], #4

08004178 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800417a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800417c:	d3f9      	bcc.n	8004172 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800417e:	f000 f841 	bl	8004204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004182:	f000 f98f 	bl	80044a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004186:	f7fc fe1c 	bl	8000dc2 <main>
  bx  lr    
 800418a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800418c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004190:	0800455c 	.word	0x0800455c
  ldr  r0, =_sdata
 8004194:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004198:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800419c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80041a0:	20009c04 	.word	0x20009c04

080041a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041a4:	e7fe      	b.n	80041a4 <ADC_IRQHandler>

080041a6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0
}
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80041b8:	e7fe      	b.n	80041b8 <HardFault_Handler+0x4>

080041ba <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80041be:	e7fe      	b.n	80041be <MemManage_Handler+0x4>

080041c0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80041c4:	e7fe      	b.n	80041c4 <BusFault_Handler+0x4>

080041c6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80041c6:	b480      	push	{r7}
 80041c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80041ca:	e7fe      	b.n	80041ca <UsageFault_Handler+0x4>

080041cc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0
}
 80041de:	bf00      	nop
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80041f6:	b480      	push	{r7}
 80041f8:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004208:	4a16      	ldr	r2, [pc, #88]	; (8004264 <SystemInit+0x60>)
 800420a:	4b16      	ldr	r3, [pc, #88]	; (8004264 <SystemInit+0x60>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004218:	4a13      	ldr	r2, [pc, #76]	; (8004268 <SystemInit+0x64>)
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <SystemInit+0x64>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004224:	4b10      	ldr	r3, [pc, #64]	; (8004268 <SystemInit+0x64>)
 8004226:	2200      	movs	r2, #0
 8004228:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800422a:	4a0f      	ldr	r2, [pc, #60]	; (8004268 <SystemInit+0x64>)
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <SystemInit+0x64>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004238:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800423a:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <SystemInit+0x64>)
 800423c:	4a0b      	ldr	r2, [pc, #44]	; (800426c <SystemInit+0x68>)
 800423e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004240:	4a09      	ldr	r2, [pc, #36]	; (8004268 <SystemInit+0x64>)
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <SystemInit+0x64>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <SystemInit+0x64>)
 800424e:	2200      	movs	r2, #0
 8004250:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004252:	f000 f80d 	bl	8004270 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004256:	4b03      	ldr	r3, [pc, #12]	; (8004264 <SystemInit+0x60>)
 8004258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800425c:	609a      	str	r2, [r3, #8]
#endif
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	e000ed00 	.word	0xe000ed00
 8004268:	40023800 	.word	0x40023800
 800426c:	24003010 	.word	0x24003010

08004270 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	2300      	movs	r3, #0
 800427c:	603b      	str	r3, [r7, #0]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800427e:	4a36      	ldr	r2, [pc, #216]	; (8004358 <SetSysClock+0xe8>)
 8004280:	4b35      	ldr	r3, [pc, #212]	; (8004358 <SetSysClock+0xe8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800428a:	4b33      	ldr	r3, [pc, #204]	; (8004358 <SetSysClock+0xe8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3301      	adds	r3, #1
 8004298:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d103      	bne.n	80042a8 <SetSysClock+0x38>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80042a6:	d1f0      	bne.n	800428a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80042a8:	4b2b      	ldr	r3, [pc, #172]	; (8004358 <SetSysClock+0xe8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80042b4:	2301      	movs	r3, #1
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	e001      	b.n	80042be <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80042ba:	2300      	movs	r3, #0
 80042bc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d142      	bne.n	800434a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <SetSysClock+0xe8>)
 80042c6:	4b24      	ldr	r3, [pc, #144]	; (8004358 <SetSysClock+0xe8>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ce:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;
 80042d0:	4a22      	ldr	r2, [pc, #136]	; (800435c <SetSysClock+0xec>)
 80042d2:	4b22      	ldr	r3, [pc, #136]	; (800435c <SetSysClock+0xec>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042da:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80042dc:	4a1e      	ldr	r2, [pc, #120]	; (8004358 <SetSysClock+0xe8>)
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <SetSysClock+0xe8>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80042e4:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <SetSysClock+0xe8>)
 80042e6:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <SetSysClock+0xe8>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ee:	6093      	str	r3, [r2, #8]

    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80042f0:	4a19      	ldr	r2, [pc, #100]	; (8004358 <SetSysClock+0xe8>)
 80042f2:	4b19      	ldr	r3, [pc, #100]	; (8004358 <SetSysClock+0xe8>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80042fa:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <SetSysClock+0xe8>)
 80042fe:	4a18      	ldr	r2, [pc, #96]	; (8004360 <SetSysClock+0xf0>)
 8004300:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004302:	4a15      	ldr	r2, [pc, #84]	; (8004358 <SetSysClock+0xe8>)
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <SetSysClock+0xe8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800430c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800430e:	bf00      	nop
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <SetSysClock+0xe8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f9      	beq.n	8004310 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <SetSysClock+0xf4>)
 800431e:	f240 6205 	movw	r2, #1541	; 0x605
 8004322:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004324:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <SetSysClock+0xe8>)
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <SetSysClock+0xe8>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f023 0303 	bic.w	r3, r3, #3
 800432e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004330:	4a09      	ldr	r2, [pc, #36]	; (8004358 <SetSysClock+0xe8>)
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <SetSysClock+0xe8>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f043 0302 	orr.w	r3, r3, #2
 800433a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
		while ((RCC->CFGR & (uint32_t) RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 800433c:	bf00      	nop
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <SetSysClock+0xe8>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b08      	cmp	r3, #8
 8004348:	d1f9      	bne.n	800433e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800
 800435c:	40007000 	.word	0x40007000
 8004360:	07405408 	.word	0x07405408
 8004364:	40023c00 	.word	0x40023c00

08004368 <vt100_move>:
#include "vt100.h"
#include "serial.h"

void vt100_move(uint8_t x, uint8_t y)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	460a      	mov	r2, r1
 8004372:	71fb      	strb	r3, [r7, #7]
 8004374:	4613      	mov	r3, r2
 8004376:	71bb      	strb	r3, [r7, #6]
	serial_putchar(VT100_ESC);
 8004378:	201b      	movs	r0, #27
 800437a:	f7fc fd8b 	bl	8000e94 <serial_putchar>
	serial_putchar('[');
 800437e:	205b      	movs	r0, #91	; 0x5b
 8004380:	f7fc fd88 	bl	8000e94 <serial_putchar>
	serial_putchar('0' + (y / 100));
 8004384:	79bb      	ldrb	r3, [r7, #6]
 8004386:	4a34      	ldr	r2, [pc, #208]	; (8004458 <vt100_move+0xf0>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	b2db      	uxtb	r3, r3
 8004390:	3330      	adds	r3, #48	; 0x30
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4618      	mov	r0, r3
 8004396:	f7fc fd7d 	bl	8000e94 <serial_putchar>
	serial_putchar('0' + ((y / 10) % 10));
 800439a:	79bb      	ldrb	r3, [r7, #6]
 800439c:	4a2f      	ldr	r2, [pc, #188]	; (800445c <vt100_move+0xf4>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	08db      	lsrs	r3, r3, #3
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	4b2d      	ldr	r3, [pc, #180]	; (800445c <vt100_move+0xf4>)
 80043a8:	fba3 1302 	umull	r1, r3, r3, r2
 80043ac:	08d9      	lsrs	r1, r3, #3
 80043ae:	460b      	mov	r3, r1
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	3330      	adds	r3, #48	; 0x30
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc fd68 	bl	8000e94 <serial_putchar>
	serial_putchar('0' + (y % 10));
 80043c4:	79ba      	ldrb	r2, [r7, #6]
 80043c6:	4b25      	ldr	r3, [pc, #148]	; (800445c <vt100_move+0xf4>)
 80043c8:	fba3 1302 	umull	r1, r3, r3, r2
 80043cc:	08d9      	lsrs	r1, r3, #3
 80043ce:	460b      	mov	r3, r1
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	3330      	adds	r3, #48	; 0x30
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fc fd58 	bl	8000e94 <serial_putchar>
	serial_putchar(';');
 80043e4:	203b      	movs	r0, #59	; 0x3b
 80043e6:	f7fc fd55 	bl	8000e94 <serial_putchar>
	serial_putchar('0' + (x / 100));
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <vt100_move+0xf0>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	3330      	adds	r3, #48	; 0x30
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fc fd4a 	bl	8000e94 <serial_putchar>
	serial_putchar('0' + ((x / 10) % 10));
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	4a16      	ldr	r2, [pc, #88]	; (800445c <vt100_move+0xf4>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	b2da      	uxtb	r2, r3
 800440c:	4b13      	ldr	r3, [pc, #76]	; (800445c <vt100_move+0xf4>)
 800440e:	fba3 1302 	umull	r1, r3, r3, r2
 8004412:	08d9      	lsrs	r1, r3, #3
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	3330      	adds	r3, #48	; 0x30
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4618      	mov	r0, r3
 8004426:	f7fc fd35 	bl	8000e94 <serial_putchar>
	serial_putchar('0' + (x % 10));
 800442a:	79fa      	ldrb	r2, [r7, #7]
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <vt100_move+0xf4>)
 800442e:	fba3 1302 	umull	r1, r3, r3, r2
 8004432:	08d9      	lsrs	r1, r3, #3
 8004434:	460b      	mov	r3, r1
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	b2db      	uxtb	r3, r3
 8004440:	3330      	adds	r3, #48	; 0x30
 8004442:	b2db      	uxtb	r3, r3
 8004444:	4618      	mov	r0, r3
 8004446:	f7fc fd25 	bl	8000e94 <serial_putchar>
	serial_putchar('H');
 800444a:	2048      	movs	r0, #72	; 0x48
 800444c:	f7fc fd22 	bl	8000e94 <serial_putchar>
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	51eb851f 	.word	0x51eb851f
 800445c:	cccccccd 	.word	0xcccccccd

08004460 <vt100_clear_screen>:

void vt100_clear_screen(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
	serial_putchar(VT100_ESC);
 8004464:	201b      	movs	r0, #27
 8004466:	f7fc fd15 	bl	8000e94 <serial_putchar>
	serial_putchar('[');
 800446a:	205b      	movs	r0, #91	; 0x5b
 800446c:	f7fc fd12 	bl	8000e94 <serial_putchar>
	serial_putchar('2');
 8004470:	2032      	movs	r0, #50	; 0x32
 8004472:	f7fc fd0f 	bl	8000e94 <serial_putchar>
	serial_putchar('J');
 8004476:	204a      	movs	r0, #74	; 0x4a
 8004478:	f7fc fd0c 	bl	8000e94 <serial_putchar>
	serial_putchar(VT100_ESC);
 800447c:	201b      	movs	r0, #27
 800447e:	f7fc fd09 	bl	8000e94 <serial_putchar>
	serial_putchar('[');
 8004482:	205b      	movs	r0, #91	; 0x5b
 8004484:	f7fc fd06 	bl	8000e94 <serial_putchar>
	serial_putchar('?');
 8004488:	203f      	movs	r0, #63	; 0x3f
 800448a:	f7fc fd03 	bl	8000e94 <serial_putchar>
	serial_putchar('2');
 800448e:	2032      	movs	r0, #50	; 0x32
 8004490:	f7fc fd00 	bl	8000e94 <serial_putchar>
	serial_putchar('5');
 8004494:	2035      	movs	r0, #53	; 0x35
 8004496:	f7fc fcfd 	bl	8000e94 <serial_putchar>
	serial_putchar('l');
 800449a:	206c      	movs	r0, #108	; 0x6c
 800449c:	f7fc fcfa 	bl	8000e94 <serial_putchar>
}
 80044a0:	bf00      	nop
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <__libc_init_array>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	4e0d      	ldr	r6, [pc, #52]	; (80044dc <__libc_init_array+0x38>)
 80044a8:	4c0d      	ldr	r4, [pc, #52]	; (80044e0 <__libc_init_array+0x3c>)
 80044aa:	1ba4      	subs	r4, r4, r6
 80044ac:	10a4      	asrs	r4, r4, #2
 80044ae:	2500      	movs	r5, #0
 80044b0:	42a5      	cmp	r5, r4
 80044b2:	d109      	bne.n	80044c8 <__libc_init_array+0x24>
 80044b4:	4e0b      	ldr	r6, [pc, #44]	; (80044e4 <__libc_init_array+0x40>)
 80044b6:	4c0c      	ldr	r4, [pc, #48]	; (80044e8 <__libc_init_array+0x44>)
 80044b8:	f000 f824 	bl	8004504 <_init>
 80044bc:	1ba4      	subs	r4, r4, r6
 80044be:	10a4      	asrs	r4, r4, #2
 80044c0:	2500      	movs	r5, #0
 80044c2:	42a5      	cmp	r5, r4
 80044c4:	d105      	bne.n	80044d2 <__libc_init_array+0x2e>
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
 80044c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044cc:	4798      	blx	r3
 80044ce:	3501      	adds	r5, #1
 80044d0:	e7ee      	b.n	80044b0 <__libc_init_array+0xc>
 80044d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044d6:	4798      	blx	r3
 80044d8:	3501      	adds	r5, #1
 80044da:	e7f2      	b.n	80044c2 <__libc_init_array+0x1e>
 80044dc:	08004554 	.word	0x08004554
 80044e0:	08004554 	.word	0x08004554
 80044e4:	08004554 	.word	0x08004554
 80044e8:	08004558 	.word	0x08004558

080044ec <memcpy>:
 80044ec:	b510      	push	{r4, lr}
 80044ee:	1e43      	subs	r3, r0, #1
 80044f0:	440a      	add	r2, r1
 80044f2:	4291      	cmp	r1, r2
 80044f4:	d100      	bne.n	80044f8 <memcpy+0xc>
 80044f6:	bd10      	pop	{r4, pc}
 80044f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004500:	e7f7      	b.n	80044f2 <memcpy+0x6>
	...

08004504 <_init>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr

08004510 <_fini>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr
