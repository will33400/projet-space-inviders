
space.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001c0c  08001c0c  00011c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c68  08001c68  00011c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c6c  08001c6c  00011c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08001c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  7 .bss          00000120  20000024  20000024  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000144  20000144  00020024  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009ab8  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000018fa  00000000  00000000  00029b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b50  00000000  00000000  0002b408  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a48  00000000  00000000  0002bf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003f60  00000000  00000000  0002c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000037eb  00000000  00000000  00030900  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000340eb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f28  00000000  00000000  00034168  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00037090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001bf4 	.word	0x08001bf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08001bf4 	.word	0x08001bf4

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	4b25      	ldr	r3, [pc, #148]	; (8000338 <DMA_Init+0xac>)
 80002a4:	4013      	ands	r3, r2
 80002a6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002b6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002c2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002ce:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002d4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80002da:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80002e0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	f023 0307 	bic.w	r3, r3, #7
 80002fa:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4313      	orrs	r3, r2
 8000306:	68fa      	ldr	r2, [r7, #12]
 8000308:	4313      	orrs	r3, r2
 800030a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68fa      	ldr	r2, [r7, #12]
 8000310:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	691a      	ldr	r2, [r3, #16]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	685a      	ldr	r2, [r3, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	689a      	ldr	r2, [r3, #8]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	60da      	str	r2, [r3, #12]
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	f01c803f 	.word	0xf01c803f

0800033c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d006      	beq.n	800035c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f043 0201 	orr.w	r2, r3, #1
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800035a:	e005      	b.n	8000368 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f023 0201 	bic.w	r2, r3, #1
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	601a      	str	r2, [r3, #0]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800038c:	2301      	movs	r3, #1
 800038e:	73fb      	strb	r3, [r7, #15]
 8000390:	e001      	b.n	8000396 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000392:	2300      	movs	r3, #0
 8000394:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000396:	7bfb      	ldrb	r3, [r7, #15]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b087      	sub	sp, #28
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003ae:	2300      	movs	r3, #0
 80003b0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a15      	ldr	r2, [pc, #84]	; (8000410 <DMA_GetFlagStatus+0x6c>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d802      	bhi.n	80003c4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <DMA_GetFlagStatus+0x70>)
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	e001      	b.n	80003c8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <DMA_GetFlagStatus+0x74>)
 80003c6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d003      	beq.n	80003da <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	e002      	b.n	80003e0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003e6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003ea:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	4013      	ands	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d002      	beq.n	80003fc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80003f6:	2301      	movs	r3, #1
 80003f8:	75fb      	strb	r3, [r7, #23]
 80003fa:	e001      	b.n	8000400 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80003fc:	2300      	movs	r3, #0
 80003fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000400:	7dfb      	ldrb	r3, [r7, #23]
}
 8000402:	4618      	mov	r0, r3
 8000404:	371c      	adds	r7, #28
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	4002640f 	.word	0x4002640f
 8000414:	40026000 	.word	0x40026000
 8000418:	40026400 	.word	0x40026400

0800041c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a10      	ldr	r2, [pc, #64]	; (800046c <DMA_ClearFlag+0x50>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d802      	bhi.n	8000434 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <DMA_ClearFlag+0x54>)
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	e001      	b.n	8000438 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <DMA_ClearFlag+0x58>)
 8000436:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800043e:	2b00      	cmp	r3, #0
 8000440:	d007      	beq.n	8000452 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000448:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000450:	e006      	b.n	8000460 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000458:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	6093      	str	r3, [r2, #8]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	4002640f 	.word	0x4002640f
 8000470:	40026000 	.word	0x40026000
 8000474:	40026400 	.word	0x40026400

08000478 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000478:	b480      	push	{r7}
 800047a:	b087      	sub	sp, #28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	e076      	b.n	8000582 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000494:	2201      	movs	r2, #1
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	4013      	ands	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d165      	bne.n	800057c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	2103      	movs	r1, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	43db      	mvns	r3, r3
 80004c0:	401a      	ands	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	4619      	mov	r1, r3
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	fa01 f303 	lsl.w	r3, r1, r3
 80004d8:	431a      	orrs	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	791b      	ldrb	r3, [r3, #4]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d003      	beq.n	80004ee <GPIO_Init+0x76>
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d12e      	bne.n	800054c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	689a      	ldr	r2, [r3, #8]
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	2103      	movs	r1, #3
 80004f8:	fa01 f303 	lsl.w	r3, r1, r3
 80004fc:	43db      	mvns	r3, r3
 80004fe:	401a      	ands	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	795b      	ldrb	r3, [r3, #5]
 800050c:	4619      	mov	r1, r3
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	431a      	orrs	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	685a      	ldr	r2, [r3, #4]
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	b29b      	uxth	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	2301      	movs	r3, #1
 8000528:	408b      	lsls	r3, r1
 800052a:	43db      	mvns	r3, r3
 800052c:	401a      	ands	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	683a      	ldr	r2, [r7, #0]
 8000538:	7992      	ldrb	r2, [r2, #6]
 800053a:	4611      	mov	r1, r2
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	b292      	uxth	r2, r2
 8000540:	fa01 f202 	lsl.w	r2, r1, r2
 8000544:	b292      	uxth	r2, r2
 8000546:	431a      	orrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	b29b      	uxth	r3, r3
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	2103      	movs	r1, #3
 8000558:	fa01 f303 	lsl.w	r3, r1, r3
 800055c:	43db      	mvns	r3, r3
 800055e:	401a      	ands	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	68da      	ldr	r2, [r3, #12]
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	79db      	ldrb	r3, [r3, #7]
 800056c:	4619      	mov	r1, r3
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	431a      	orrs	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	3301      	adds	r3, #1
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d985      	bls.n	8000494 <GPIO_Init+0x1c>
    }
  }
}
 8000588:	bf00      	nop
 800058a:	371c      	adds	r7, #28
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
 80005a0:	4613      	mov	r3, r2
 80005a2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005ac:	787a      	ldrb	r2, [r7, #1]
 80005ae:	887b      	ldrh	r3, [r7, #2]
 80005b0:	f003 0307 	and.w	r3, r3, #7
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	08db      	lsrs	r3, r3, #3
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	887b      	ldrh	r3, [r7, #2]
 80005c6:	08db      	lsrs	r3, r3, #3
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3208      	adds	r2, #8
 80005d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	210f      	movs	r1, #15
 80005de:	fa01 f303 	lsl.w	r3, r1, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	ea02 0103 	and.w	r1, r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f100 0208 	add.w	r2, r0, #8
 80005ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80005f2:	887b      	ldrh	r3, [r7, #2]
 80005f4:	08db      	lsrs	r3, r3, #3
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3208      	adds	r2, #8
 80005fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	4313      	orrs	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	08db      	lsrs	r3, r3, #3
 800060c:	b29b      	uxth	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3208      	adds	r2, #8
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000628:	b480      	push	{r7}
 800062a:	b089      	sub	sp, #36	; 0x24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	2302      	movs	r3, #2
 8000646:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000648:	4b47      	ldr	r3, [pc, #284]	; (8000768 <RCC_GetClocksFreq+0x140>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f003 030c 	and.w	r3, r3, #12
 8000650:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	2b04      	cmp	r3, #4
 8000656:	d007      	beq.n	8000668 <RCC_GetClocksFreq+0x40>
 8000658:	2b08      	cmp	r3, #8
 800065a:	d009      	beq.n	8000670 <RCC_GetClocksFreq+0x48>
 800065c:	2b00      	cmp	r3, #0
 800065e:	d13d      	bne.n	80006dc <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a42      	ldr	r2, [pc, #264]	; (800076c <RCC_GetClocksFreq+0x144>)
 8000664:	601a      	str	r2, [r3, #0]
      break;
 8000666:	e03d      	b.n	80006e4 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a41      	ldr	r2, [pc, #260]	; (8000770 <RCC_GetClocksFreq+0x148>)
 800066c:	601a      	str	r2, [r3, #0]
      break;
 800066e:	e039      	b.n	80006e4 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000670:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <RCC_GetClocksFreq+0x140>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	0d9b      	lsrs	r3, r3, #22
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800067c:	4b3a      	ldr	r3, [pc, #232]	; (8000768 <RCC_GetClocksFreq+0x140>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000684:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800068c:	4a38      	ldr	r2, [pc, #224]	; (8000770 <RCC_GetClocksFreq+0x148>)
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	fbb2 f3f3 	udiv	r3, r2, r3
 8000694:	4a34      	ldr	r2, [pc, #208]	; (8000768 <RCC_GetClocksFreq+0x140>)
 8000696:	6852      	ldr	r2, [r2, #4]
 8000698:	0992      	lsrs	r2, r2, #6
 800069a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800069e:	fb02 f303 	mul.w	r3, r2, r3
 80006a2:	61fb      	str	r3, [r7, #28]
 80006a4:	e00b      	b.n	80006be <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006a6:	4a31      	ldr	r2, [pc, #196]	; (800076c <RCC_GetClocksFreq+0x144>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4a2e      	ldr	r2, [pc, #184]	; (8000768 <RCC_GetClocksFreq+0x140>)
 80006b0:	6852      	ldr	r2, [r2, #4]
 80006b2:	0992      	lsrs	r2, r2, #6
 80006b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006b8:	fb02 f303 	mul.w	r3, r2, r3
 80006bc:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <RCC_GetClocksFreq+0x140>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	0c1b      	lsrs	r3, r3, #16
 80006c4:	f003 0303 	and.w	r3, r3, #3
 80006c8:	3301      	adds	r3, #1
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80006ce:	69fa      	ldr	r2, [r7, #28]
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	601a      	str	r2, [r3, #0]
      break;
 80006da:	e003      	b.n	80006e4 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a23      	ldr	r2, [pc, #140]	; (800076c <RCC_GetClocksFreq+0x144>)
 80006e0:	601a      	str	r2, [r3, #0]
      break;
 80006e2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <RCC_GetClocksFreq+0x140>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006ec:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	091b      	lsrs	r3, r3, #4
 80006f2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006f4:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <RCC_GetClocksFreq+0x14c>)
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	40da      	lsrs	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <RCC_GetClocksFreq+0x140>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000714:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	0a9b      	lsrs	r3, r3, #10
 800071a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800071c:	4a15      	ldr	r2, [pc, #84]	; (8000774 <RCC_GetClocksFreq+0x14c>)
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	40da      	lsrs	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <RCC_GetClocksFreq+0x140>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800073c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	0b5b      	lsrs	r3, r3, #13
 8000742:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000744:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <RCC_GetClocksFreq+0x14c>)
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	40da      	lsrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60da      	str	r2, [r3, #12]
}
 800075c:	bf00      	nop
 800075e:	3724      	adds	r7, #36	; 0x24
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	40023800 	.word	0x40023800
 800076c:	00f42400 	.word	0x00f42400
 8000770:	007a1200 	.word	0x007a1200
 8000774:	20000000 	.word	0x20000000

08000778 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d006      	beq.n	8000798 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800078a:	490a      	ldr	r1, [pc, #40]	; (80007b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800078e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4313      	orrs	r3, r2
 8000794:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000796:	e006      	b.n	80007a6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000798:	4906      	ldr	r1, [pc, #24]	; (80007b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800079c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	43db      	mvns	r3, r3
 80007a2:	4013      	ands	r3, r2
 80007a4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80007ca:	490a      	ldr	r1, [pc, #40]	; (80007f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80007ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80007d6:	e006      	b.n	80007e6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007d8:	4906      	ldr	r1, [pc, #24]	; (80007f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80007dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	43db      	mvns	r3, r3
 80007e2:	4013      	ands	r3, r2
 80007e4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	891b      	ldrh	r3, [r3, #8]
 800080c:	b29a      	uxth	r2, r3
 800080e:	887b      	ldrh	r3, [r7, #2]
 8000810:	4013      	ands	r3, r2
 8000812:	b29b      	uxth	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000818:	2301      	movs	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	e001      	b.n	8000822 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a29      	ldr	r2, [pc, #164]	; (80008ec <TIM_TimeBaseInit+0xbc>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d013      	beq.n	8000874 <TIM_TimeBaseInit+0x44>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <TIM_TimeBaseInit+0xc0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d00f      	beq.n	8000874 <TIM_TimeBaseInit+0x44>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800085a:	d00b      	beq.n	8000874 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <TIM_TimeBaseInit+0xc4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d007      	beq.n	8000874 <TIM_TimeBaseInit+0x44>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a24      	ldr	r2, [pc, #144]	; (80008f8 <TIM_TimeBaseInit+0xc8>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d003      	beq.n	8000874 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a23      	ldr	r2, [pc, #140]	; (80008fc <TIM_TimeBaseInit+0xcc>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d108      	bne.n	8000886 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000874:	89fb      	ldrh	r3, [r7, #14]
 8000876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800087a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	885a      	ldrh	r2, [r3, #2]
 8000880:	89fb      	ldrh	r3, [r7, #14]
 8000882:	4313      	orrs	r3, r2
 8000884:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <TIM_TimeBaseInit+0xd0>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d00c      	beq.n	80008a8 <TIM_TimeBaseInit+0x78>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <TIM_TimeBaseInit+0xd4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d008      	beq.n	80008a8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000896:	89fb      	ldrh	r3, [r7, #14]
 8000898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800089c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	891a      	ldrh	r2, [r3, #8]
 80008a2:	89fb      	ldrh	r3, [r7, #14]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	89fa      	ldrh	r2, [r7, #14]
 80008ac:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685a      	ldr	r2, [r3, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	881a      	ldrh	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <TIM_TimeBaseInit+0xbc>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d003      	beq.n	80008ce <TIM_TimeBaseInit+0x9e>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <TIM_TimeBaseInit+0xc0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d104      	bne.n	80008d8 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	7a9b      	ldrb	r3, [r3, #10]
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2201      	movs	r2, #1
 80008dc:	829a      	strh	r2, [r3, #20]
}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40010000 	.word	0x40010000
 80008f0:	40010400 	.word	0x40010400
 80008f4:	40000400 	.word	0x40000400
 80008f8:	40000800 	.word	0x40000800
 80008fc:	40000c00 	.word	0x40000c00
 8000900:	40001000 	.word	0x40001000
 8000904:	40001400 	.word	0x40001400

08000908 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	8a1b      	ldrh	r3, [r3, #16]
 8000926:	b29b      	uxth	r3, r3
 8000928:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000930:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	88db      	ldrh	r3, [r3, #6]
 8000936:	461a      	mov	r2, r3
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	4313      	orrs	r3, r2
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	b29a      	uxth	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	899b      	ldrh	r3, [r3, #12]
 800094a:	b29b      	uxth	r3, r3
 800094c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000954:	f023 030c 	bic.w	r3, r3, #12
 8000958:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	889a      	ldrh	r2, [r3, #4]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	891b      	ldrh	r3, [r3, #8]
 8000962:	4313      	orrs	r3, r2
 8000964:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800096a:	4313      	orrs	r3, r2
 800096c:	b29b      	uxth	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	4313      	orrs	r3, r2
 8000974:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	b29a      	uxth	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	8a9b      	ldrh	r3, [r3, #20]
 8000982:	b29b      	uxth	r3, r3
 8000984:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800098c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	899b      	ldrh	r3, [r3, #12]
 8000992:	461a      	mov	r2, r3
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	4313      	orrs	r3, r2
 8000998:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	b29a      	uxth	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe3e 	bl	8000628 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a30      	ldr	r2, [pc, #192]	; (8000a70 <USART_Init+0x168>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d003      	beq.n	80009bc <USART_Init+0xb4>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <USART_Init+0x16c>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d102      	bne.n	80009c2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	623b      	str	r3, [r7, #32]
 80009c0:	e001      	b.n	80009c6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	899b      	ldrh	r3, [r3, #12]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da0c      	bge.n	80009ec <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80009d2:	6a3a      	ldr	r2, [r7, #32]
 80009d4:	4613      	mov	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	009a      	lsls	r2, r3, #2
 80009dc:	441a      	add	r2, r3
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e8:	61fb      	str	r3, [r7, #28]
 80009ea:	e00b      	b.n	8000a04 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80009ec:	6a3a      	ldr	r2, [r7, #32]
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	009a      	lsls	r2, r3, #2
 80009f6:	441a      	add	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <USART_Init+0x170>)
 8000a08:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0c:	095b      	lsrs	r3, r3, #5
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	091b      	lsrs	r3, r3, #4
 8000a16:	2264      	movs	r2, #100	; 0x64
 8000a18:	fb02 f303 	mul.w	r3, r2, r3
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	899b      	ldrh	r3, [r3, #12]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	b21b      	sxth	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	da0c      	bge.n	8000a48 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	3332      	adds	r3, #50	; 0x32
 8000a34:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <USART_Init+0x170>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a42:	4313      	orrs	r3, r2
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
 8000a46:	e00b      	b.n	8000a60 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	3332      	adds	r3, #50	; 0x32
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <USART_Init+0x170>)
 8000a50:	fba2 2303 	umull	r2, r3, r2, r3
 8000a54:	095b      	lsrs	r3, r3, #5
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	811a      	strh	r2, [r3, #8]
}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40011000 	.word	0x40011000
 8000a74:	40011400 	.word	0x40011400
 8000a78:	51eb851f 	.word	0x51eb851f

08000a7c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d008      	beq.n	8000aa0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	899b      	ldrh	r3, [r3, #12]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a9e:	e007      	b.n	8000ab0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	899b      	ldrh	r3, [r3, #12]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	819a      	strh	r2, [r3, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	807b      	strh	r3, [r7, #2]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ae0:	887b      	ldrh	r3, [r7, #2]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	095b      	lsrs	r3, r3, #5
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	f003 031f 	and.w	r3, r3, #31
 8000af0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000af2:	2201      	movs	r2, #1
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d103      	bne.n	8000b0a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	330c      	adds	r3, #12
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e009      	b.n	8000b1e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d103      	bne.n	8000b18 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3310      	adds	r3, #16
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	e002      	b.n	8000b1e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	3314      	adds	r3, #20
 8000b1c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000b1e:	787b      	ldrb	r3, [r7, #1]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d006      	beq.n	8000b32 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	6811      	ldr	r1, [r2, #0]
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000b30:	e006      	b.n	8000b40 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	6811      	ldr	r1, [r2, #0]
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	43d2      	mvns	r2, r2
 8000b3c:	400a      	ands	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
}
 8000b40:	bf00      	nop
 8000b42:	371c      	adds	r7, #28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b68:	887b      	ldrh	r3, [r7, #2]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	095b      	lsrs	r3, r3, #5
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	f003 031f 	and.w	r3, r3, #31
 8000b78:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d107      	bne.n	8000b9a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	899b      	ldrh	r3, [r3, #12]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	4013      	ands	r3, r2
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e011      	b.n	8000bbe <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d107      	bne.n	8000bb0 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	8a1b      	ldrh	r3, [r3, #16]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	4013      	ands	r3, r2
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	e006      	b.n	8000bbe <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	8a9b      	ldrh	r3, [r3, #20]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d005      	beq.n	8000bf0 <USART_GetITStatus+0xa4>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000bea:	2301      	movs	r3, #1
 8000bec:	74fb      	strb	r3, [r7, #19]
 8000bee:	e001      	b.n	8000bf4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000bf4:	7cfb      	ldrb	r3, [r7, #19]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	371c      	adds	r7, #28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */

#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000c08:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <Audio_MAL_IRQHandler+0xdc>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <Audio_MAL_IRQHandler+0xe0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	4610      	mov	r0, r2
 8000c14:	f7ff fbc6 	bl	80003a4 <DMA_GetFlagStatus>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d05e      	beq.n	8000cdc <Audio_MAL_IRQHandler+0xd8>
  {
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <Audio_MAL_IRQHandler+0xe4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d04c      	beq.n	8000cc0 <Audio_MAL_IRQHandler+0xbc>
    {
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000c26:	bf00      	nop
 8000c28:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <Audio_MAL_IRQHandler+0xdc>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fba1 	bl	8000374 <DMA_GetCmdStatus>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1f7      	bne.n	8000c28 <Audio_MAL_IRQHandler+0x24>
      {}

      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 8000c38:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <Audio_MAL_IRQHandler+0xdc>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <Audio_MAL_IRQHandler+0xe0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	4610      	mov	r0, r2
 8000c44:	f7ff fbea 	bl	800041c <DMA_ClearFlag>

      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <Audio_MAL_IRQHandler+0xe8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <Audio_MAL_IRQHandler+0xec>)
 8000c50:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <Audio_MAL_IRQHandler+0xe4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	bf28      	it	cs
 8000c5e:	4613      	movcs	r3, r2
 8000c60:	4a23      	ldr	r2, [pc, #140]	; (8000cf0 <Audio_MAL_IRQHandler+0xec>)
 8000c62:	6113      	str	r3, [r2, #16]

      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <Audio_MAL_IRQHandler+0xdc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4921      	ldr	r1, [pc, #132]	; (8000cf0 <Audio_MAL_IRQHandler+0xec>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fb0e 	bl	800028c <DMA_Init>

      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <Audio_MAL_IRQHandler+0xdc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2101      	movs	r1, #1
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fb60 	bl	800033c <DMA_Cmd>

      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <Audio_MAL_IRQHandler+0xe8>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <Audio_MAL_IRQHandler+0xe4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c88:	d203      	bcs.n	8000c92 <Audio_MAL_IRQHandler+0x8e>
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <Audio_MAL_IRQHandler+0xe4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	e000      	b.n	8000c94 <Audio_MAL_IRQHandler+0x90>
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <Audio_MAL_IRQHandler+0xf0>)
 8000c94:	4413      	add	r3, r2
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <Audio_MAL_IRQHandler+0xe8>)
 8000c98:	6013      	str	r3, [r2, #0]

      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <Audio_MAL_IRQHandler+0xe4>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <Audio_MAL_IRQHandler+0xe4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	bf28      	it	cs
 8000caa:	460b      	movcs	r3, r1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <Audio_MAL_IRQHandler+0xe4>)
 8000cb0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <Audio_MAL_IRQHandler+0xdc>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fb3f 	bl	800033c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000cbe:	e00d      	b.n	8000cdc <Audio_MAL_IRQHandler+0xd8>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <Audio_MAL_IRQHandler+0xdc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fb38 	bl	800033c <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <Audio_MAL_IRQHandler+0xdc>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <Audio_MAL_IRQHandler+0xe0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	f7ff fba0 	bl	800041c <DMA_ClearFlag>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000018 	.word	0x20000018
 8000ce4:	2000001c 	.word	0x2000001c
 8000ce8:	20000010 	.word	0x20000010
 8000cec:	20000044 	.word	0x20000044
 8000cf0:	20000084 	.word	0x20000084
 8000cf4:	0001fffe 	.word	0x0001fffe

08000cf8 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000cfc:	f7ff ff82 	bl	8000c04 <Audio_MAL_IRQHandler>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000d08:	f7ff ff7c 	bl	8000c04 <Audio_MAL_IRQHandler>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000d14:	2102      	movs	r1, #2
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <SPI3_IRQHandler+0x1c>)
 8000d18:	f7ff fd6e 	bl	80007f8 <SPI_I2S_GetFlagStatus>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SPI3_IRQHandler+0x16>
  {
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000d22:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <SPI3_IRQHandler+0x20>)
 8000d24:	681b      	ldr	r3, [r3, #0]
    }

    /* Send dummy data on I2S to avoid the underrun condition */
		//SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack());
  }
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40003c00 	.word	0x40003c00
 8000d30:	20000014 	.word	0x20000014

08000d34 <delay_>:
 *      Author: lucasadam33400
 */

#include <stdio.h>

void delay_(uint32_t val) {
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = val * 10000; i > 0; i--)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e002      	b.n	8000d50 <delay_+0x1c>
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f9      	bne.n	8000d4a <delay_+0x16>
		;
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <main>:
#include "vt100.h"
#include "serial.h"
#include "space_invaders.h"
#include "timer.h"

int main(void) {
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0

	init_sprites();
 8000d66:	f000 f8dd 	bl	8000f24 <init_sprites>
	init_screen();
 8000d6a:	f000 f98f 	bl	800108c <init_screen>

	charge_level(MENU);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 fc08 	bl	8001584 <charge_level>

	while (1) {
		delay_(100);
 8000d74:	2064      	movs	r0, #100	; 0x64
 8000d76:	f7ff ffdd 	bl	8000d34 <delay_>

		scroll_shoot();
 8000d7a:	f000 fb15 	bl	80013a8 <scroll_shoot>

		compute_keyboard();
 8000d7e:	f000 f993 	bl	80010a8 <compute_keyboard>
	while (1) {
 8000d82:	e7f7      	b.n	8000d74 <main+0x12>

08000d84 <serial_init>:

static volatile unsigned char last_char_read = 1;
static volatile char last_char;

void serial_init(const uint32_t baudrate)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Use USART2 with PA2 and PA3 */

	/* Enable clock for GPIOA and USART */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d92:	f7ff fd11 	bl	80007b8 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000d96:	2101      	movs	r1, #1
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff fced 	bl	8000778 <RCC_AHB1PeriphClockCmd>

	/* Init GPIOA 2 and 3 as alternate functions */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000da2:	2302      	movs	r3, #2
 8000da4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	481c      	ldr	r0, [pc, #112]	; (8000e34 <serial_init+0xb0>)
 8000dc2:	f7ff fb59 	bl	8000478 <GPIO_Init>

	/* Connect TX and RX pints to their alternate function pins */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	2102      	movs	r1, #2
 8000dca:	481a      	ldr	r0, [pc, #104]	; (8000e34 <serial_init+0xb0>)
 8000dcc:	f7ff fbe2 	bl	8000594 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	4817      	ldr	r0, [pc, #92]	; (8000e34 <serial_init+0xb0>)
 8000dd6:	f7ff fbdd 	bl	8000594 <GPIO_PinAFConfig>

	/* Configure USART parameters */
	USART_InitStruct.USART_BaudRate = baudrate;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000dde:	2300      	movs	r3, #0
 8000de0:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8000de2:	230c      	movs	r3, #12
 8000de4:	837b      	strh	r3, [r7, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8000de6:	2300      	movs	r3, #0
 8000de8:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000dee:	2300      	movs	r3, #0
 8000df0:	82bb      	strh	r3, [r7, #20]
	USART_Init(USART2, &USART_InitStruct);
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4619      	mov	r1, r3
 8000df8:	480f      	ldr	r0, [pc, #60]	; (8000e38 <serial_init+0xb4>)
 8000dfa:	f7ff fd85 	bl	8000908 <USART_Init>

	/* Configure interruption */
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f240 5125 	movw	r1, #1317	; 0x525
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <serial_init+0xb4>)
 8000e06:	f7ff fe59 	bl	8000abc <USART_ITConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000e0a:	2326      	movs	r3, #38	; 0x26
 8000e0c:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff f9d2 	bl	80001c8 <NVIC_Init>

	USART_Cmd(USART2, ENABLE);
 8000e24:	2101      	movs	r1, #1
 8000e26:	4804      	ldr	r0, [pc, #16]	; (8000e38 <serial_init+0xb4>)
 8000e28:	f7ff fe28 	bl	8000a7c <USART_Cmd>
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40020000 	.word	0x40020000
 8000e38:	40004400 	.word	0x40004400

08000e3c <serial_putchar>:

void serial_putchar(const volatile char c)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	/* Check USART */
	if ((USART2->CR1 & USART_CR1_UE))
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <serial_putchar+0x50>)
 8000e48:	899b      	ldrh	r3, [r3, #12]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d014      	beq.n	8000e7e <serial_putchar+0x42>
	{
		/* Wait to be ready, buffer empty */
		while (!(USART2->SR & USART_FLAG_TXE))
 8000e54:	bf00      	nop
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <serial_putchar+0x50>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f8      	beq.n	8000e56 <serial_putchar+0x1a>
			;
		/* Send data */
		USART2->DR = (uint16_t) (c & 0x01FF);
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <serial_putchar+0x50>)
 8000e66:	79fa      	ldrb	r2, [r7, #7]
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	809a      	strh	r2, [r3, #4]
		/* Wait to be ready, buffer empty */
		while (!(USART2->SR & USART_FLAG_TXE))
 8000e6e:	bf00      	nop
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <serial_putchar+0x50>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f8      	beq.n	8000e70 <serial_putchar+0x34>
			;
	}
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40004400 	.word	0x40004400

08000e90 <serial_get_last_char>:
	while (*s)
		serial_putchar(*s++);
}

signed char serial_get_last_char(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	if (last_char_read)
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <serial_get_last_char+0x2c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <serial_get_last_char+0x14>
		return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e006      	b.n	8000eb2 <serial_get_last_char+0x22>
	else
	{
		last_char_read = 1;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <serial_get_last_char+0x2c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
		return last_char;
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <serial_get_last_char+0x30>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	b25b      	sxtb	r3, r3
	}
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	20000020 	.word	0x20000020
 8000ec0:	20000040 	.word	0x20000040

08000ec4 <serial_input_not_empty>:

/* interruption management */

static int32_t serial_input_not_empty(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	return USART_GetITStatus(USART2, USART_IT_RXNE);
 8000ec8:	f240 5125 	movw	r1, #1317	; 0x525
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <serial_input_not_empty+0x14>)
 8000ece:	f7ff fe3d 	bl	8000b4c <USART_GetITStatus>
 8000ed2:	4603      	mov	r3, r0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40004400 	.word	0x40004400

08000edc <serial_input_character>:

static char serial_input_character(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	return USART2->DR;
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <serial_input_character+0x18>)
 8000ee2:	889b      	ldrh	r3, [r3, #4]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	b2db      	uxtb	r3, r3
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40004400 	.word	0x40004400

08000ef8 <USART2_IRQHandler>:

#define serial_it_handler USART2_IRQHandler
void serial_it_handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	if (serial_input_not_empty())
 8000efc:	f7ff ffe2 	bl	8000ec4 <serial_input_not_empty>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d008      	beq.n	8000f18 <USART2_IRQHandler+0x20>
	{
		last_char = serial_input_character();
 8000f06:	f7ff ffe9 	bl	8000edc <serial_input_character>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <USART2_IRQHandler+0x24>)
 8000f10:	701a      	strb	r2, [r3, #0]
		last_char_read = 0;
 8000f12:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <USART2_IRQHandler+0x28>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
	}
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000040 	.word	0x20000040
 8000f20:	20000020 	.word	0x20000020

08000f24 <init_sprites>:

shoot shoot_list[SHOOT_AMOUNT];

shoot spaceship_shoot, ennemy_1_shoot, ennemy_2_shoot, ennemy_3_shoot;

void init_sprites() {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0

	_spaceship.life = SPACESHIP_LIFE_MAX;
 8000f2a:	4b4e      	ldr	r3, [pc, #312]	; (8001064 <init_sprites+0x140>)
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e00c      	b.n	8000f50 <init_sprites+0x2c>
		_spaceship.appearance[i] = spaceship_appearance[i];
 8000f36:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <init_sprites+0x144>)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	7819      	ldrb	r1, [r3, #0]
 8000f3e:	4a49      	ldr	r2, [pc, #292]	; (8001064 <init_sprites+0x140>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	3301      	adds	r3, #1
 8000f46:	460a      	mov	r2, r1
 8000f48:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	ddef      	ble.n	8000f36 <init_sprites+0x12>
	_spaceship.x = VT100_SCREEN_XMAX / 2;
 8000f56:	4b43      	ldr	r3, [pc, #268]	; (8001064 <init_sprites+0x140>)
 8000f58:	2228      	movs	r2, #40	; 0x28
 8000f5a:	711a      	strb	r2, [r3, #4]
	_spaceship.y = VT100_SCREEN_YMAX;
 8000f5c:	4b41      	ldr	r3, [pc, #260]	; (8001064 <init_sprites+0x140>)
 8000f5e:	2218      	movs	r2, #24
 8000f60:	715a      	strb	r2, [r3, #5]

	spaceship_shoot.appearance = SPACESHIP_SHOOT;
 8000f62:	4b42      	ldr	r3, [pc, #264]	; (800106c <init_sprites+0x148>)
 8000f64:	227c      	movs	r2, #124	; 0x7c
 8000f66:	701a      	strb	r2, [r3, #0]
	spaceship_shoot.exist = TRUE;
 8000f68:	4b40      	ldr	r3, [pc, #256]	; (800106c <init_sprites+0x148>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	711a      	strb	r2, [r3, #4]

	ennemy_1.type = ENNEMY_TYPE_1;
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <init_sprites+0x14c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
	ennemy_1.life = 1;
 8000f74:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <init_sprites+0x14c>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 3; i++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	e00d      	b.n	8000f9c <init_sprites+0x78>
		ennemy_1.appearance[i] = ennemy_appearances[1][i];
 8000f80:	4a3c      	ldr	r2, [pc, #240]	; (8001074 <init_sprites+0x150>)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	3303      	adds	r3, #3
 8000f88:	7819      	ldrb	r1, [r3, #0]
 8000f8a:	4a39      	ldr	r2, [pc, #228]	; (8001070 <init_sprites+0x14c>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4413      	add	r3, r2
 8000f90:	3303      	adds	r3, #3
 8000f92:	460a      	mov	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	ddee      	ble.n	8000f80 <init_sprites+0x5c>
	ennemy_1.shoot_type = ENNEMY_SHOOT_TYPE_1;
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <init_sprites+0x14c>)
 8000fa4:	2223      	movs	r2, #35	; 0x23
 8000fa6:	709a      	strb	r2, [r3, #2]
	ennemy_1.exist = TRUE;
 8000fa8:	4b31      	ldr	r3, [pc, #196]	; (8001070 <init_sprites+0x14c>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	721a      	strb	r2, [r3, #8]

	ennemy_1_shoot.appearance = ENNEMY_SHOOT_TYPE_1;
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <init_sprites+0x154>)
 8000fb0:	2223      	movs	r2, #35	; 0x23
 8000fb2:	701a      	strb	r2, [r3, #0]
	ennemy_1_shoot.exist = TRUE;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <init_sprites+0x154>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	711a      	strb	r2, [r3, #4]

	ennemy_2.type = ENNEMY_TYPE_2;
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <init_sprites+0x158>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	701a      	strb	r2, [r3, #0]
	ennemy_2.life = 1;
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <init_sprites+0x158>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 3; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	e00d      	b.n	8000fe8 <init_sprites+0xc4>
		ennemy_2.appearance[i] = ennemy_appearances[2][i];
 8000fcc:	4a29      	ldr	r2, [pc, #164]	; (8001074 <init_sprites+0x150>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3306      	adds	r3, #6
 8000fd4:	7819      	ldrb	r1, [r3, #0]
 8000fd6:	4a29      	ldr	r2, [pc, #164]	; (800107c <init_sprites+0x158>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	3303      	adds	r3, #3
 8000fde:	460a      	mov	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	ddee      	ble.n	8000fcc <init_sprites+0xa8>
	ennemy_2.shoot_type = ENNEMY_SHOOT_TYPE_2;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <init_sprites+0x158>)
 8000ff0:	222a      	movs	r2, #42	; 0x2a
 8000ff2:	709a      	strb	r2, [r3, #2]
	ennemy_2.exist = TRUE;
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <init_sprites+0x158>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	721a      	strb	r2, [r3, #8]

	ennemy_2_shoot.appearance = ENNEMY_SHOOT_TYPE_2;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <init_sprites+0x15c>)
 8000ffc:	222a      	movs	r2, #42	; 0x2a
 8000ffe:	701a      	strb	r2, [r3, #0]
	ennemy_2_shoot.exist = TRUE;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <init_sprites+0x15c>)
 8001002:	2201      	movs	r2, #1
 8001004:	711a      	strb	r2, [r3, #4]

	ennemy_3.type = ENNEMY_TYPE_3;
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <init_sprites+0x160>)
 8001008:	2203      	movs	r2, #3
 800100a:	701a      	strb	r2, [r3, #0]
	ennemy_3.life = 1;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <init_sprites+0x160>)
 800100e:	2201      	movs	r2, #1
 8001010:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 3; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	e00d      	b.n	8001034 <init_sprites+0x110>
		ennemy_3.appearance[i] = ennemy_appearances[3][i];
 8001018:	4a16      	ldr	r2, [pc, #88]	; (8001074 <init_sprites+0x150>)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	4413      	add	r3, r2
 800101e:	3309      	adds	r3, #9
 8001020:	7819      	ldrb	r1, [r3, #0]
 8001022:	4a18      	ldr	r2, [pc, #96]	; (8001084 <init_sprites+0x160>)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	4413      	add	r3, r2
 8001028:	3303      	adds	r3, #3
 800102a:	460a      	mov	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2b02      	cmp	r3, #2
 8001038:	ddee      	ble.n	8001018 <init_sprites+0xf4>
	ennemy_3.shoot_type = ENNEMY_SHOOT_TYPE_3;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <init_sprites+0x160>)
 800103c:	222d      	movs	r2, #45	; 0x2d
 800103e:	709a      	strb	r2, [r3, #2]
	ennemy_3.exist = TRUE;
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <init_sprites+0x160>)
 8001042:	2201      	movs	r2, #1
 8001044:	721a      	strb	r2, [r3, #8]

	ennemy_3_shoot.appearance = ENNEMY_SHOOT_TYPE_3;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <init_sprites+0x164>)
 8001048:	222d      	movs	r2, #45	; 0x2d
 800104a:	701a      	strb	r2, [r3, #0]
	ennemy_3_shoot.exist = TRUE;
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <init_sprites+0x164>)
 800104e:	2201      	movs	r2, #1
 8001050:	711a      	strb	r2, [r3, #4]

	init_tim_base(TIMER_2, 0x00ff);
 8001052:	21ff      	movs	r1, #255	; 0xff
 8001054:	2000      	movs	r0, #0
 8001056:	f000 fccb 	bl	80019f0 <init_tim_base>
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000c0 	.word	0x200000c0
 8001068:	08001c0c 	.word	0x08001c0c
 800106c:	2000011c 	.word	0x2000011c
 8001070:	20000100 	.word	0x20000100
 8001074:	08001c10 	.word	0x08001c10
 8001078:	20000130 	.word	0x20000130
 800107c:	20000138 	.word	0x20000138
 8001080:	20000114 	.word	0x20000114
 8001084:	20000124 	.word	0x20000124
 8001088:	2000010c 	.word	0x2000010c

0800108c <init_screen>:

void init_screen() {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	serial_init(SERIAL_BAUD);
 8001090:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001094:	f7ff fe76 	bl	8000d84 <serial_init>

	vt100_move(0, 0);
 8001098:	2100      	movs	r1, #0
 800109a:	2000      	movs	r0, #0
 800109c:	f000 fce8 	bl	8001a70 <vt100_move>
	vt100_clear_screen();
 80010a0:	f000 fd62 	bl	8001b68 <vt100_clear_screen>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <compute_keyboard>:

void compute_keyboard() {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	uint8_t _char = serial_get_last_char();
 80010ae:	f7ff feef 	bl	8000e90 <serial_get_last_char>
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	if (_char == 'p') {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b70      	cmp	r3, #112	; 0x70
 80010ba:	d101      	bne.n	80010c0 <compute_keyboard+0x18>
		toggle_pause();
 80010bc:	f000 fa86 	bl	80015cc <toggle_pause>
	}
	if (!(keyboard_flags & KFPAUS)) {
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <compute_keyboard+0xd4>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d152      	bne.n	8001172 <compute_keyboard+0xca>
		switch (_char) {
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d013      	beq.n	80010fa <compute_keyboard+0x52>
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	dc04      	bgt.n	80010e0 <compute_keyboard+0x38>
 80010d6:	2b0d      	cmp	r3, #13
 80010d8:	d017      	beq.n	800110a <compute_keyboard+0x62>
 80010da:	2b63      	cmp	r3, #99	; 0x63
 80010dc:	d028      	beq.n	8001130 <compute_keyboard+0x88>
			charge_level(lev_num_flag);

			break;
		}
	}
}
 80010de:	e048      	b.n	8001172 <compute_keyboard+0xca>
		switch (_char) {
 80010e0:	2b6c      	cmp	r3, #108	; 0x6c
 80010e2:	d02f      	beq.n	8001144 <compute_keyboard+0x9c>
 80010e4:	2b71      	cmp	r3, #113	; 0x71
 80010e6:	d000      	beq.n	80010ea <compute_keyboard+0x42>
}
 80010e8:	e043      	b.n	8001172 <compute_keyboard+0xca>
			if (lev_num_flag != MENU) {
 80010ea:	4b25      	ldr	r3, [pc, #148]	; (8001180 <compute_keyboard+0xd8>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d03c      	beq.n	800116c <compute_keyboard+0xc4>
				scroll_spaceship(LEFT);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f894 	bl	8001220 <scroll_spaceship>
			break;
 80010f8:	e038      	b.n	800116c <compute_keyboard+0xc4>
			if (lev_num_flag != MENU) {
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <compute_keyboard+0xd8>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d036      	beq.n	8001170 <compute_keyboard+0xc8>
				scroll_spaceship(RIGHT);
 8001102:	2001      	movs	r0, #1
 8001104:	f000 f88c 	bl	8001220 <scroll_spaceship>
			break;
 8001108:	e032      	b.n	8001170 <compute_keyboard+0xc8>
			if (lev_num_flag != MENU) {
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <compute_keyboard+0xd8>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00a      	beq.n	8001128 <compute_keyboard+0x80>
				init_shoot(SPACESHIP, _spaceship.x, _spaceship.y - 1);
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <compute_keyboard+0xdc>)
 8001114:	7919      	ldrb	r1, [r3, #4]
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <compute_keyboard+0xdc>)
 8001118:	795b      	ldrb	r3, [r3, #5]
 800111a:	3b01      	subs	r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	2000      	movs	r0, #0
 8001122:	f000 f8ad 	bl	8001280 <init_shoot>
			break;
 8001126:	e024      	b.n	8001172 <compute_keyboard+0xca>
				charge_level(LEVEL_1);
 8001128:	2001      	movs	r0, #1
 800112a:	f000 fa2b 	bl	8001584 <charge_level>
			break;
 800112e:	e020      	b.n	8001172 <compute_keyboard+0xca>
			init_sprites();
 8001130:	f7ff fef8 	bl	8000f24 <init_sprites>
			init_screen();
 8001134:	f7ff ffaa 	bl	800108c <init_screen>
			charge_level(lev_num_flag);
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <compute_keyboard+0xd8>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fa21 	bl	8001584 <charge_level>
			break;
 8001142:	e016      	b.n	8001172 <compute_keyboard+0xca>
			if (lev_num_flag != LEVEL_3 + 1)
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <compute_keyboard+0xd8>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b04      	cmp	r3, #4
 800114a:	d006      	beq.n	800115a <compute_keyboard+0xb2>
				lev_num_flag++;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <compute_keyboard+0xd8>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <compute_keyboard+0xd8>)
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e002      	b.n	8001160 <compute_keyboard+0xb8>
				lev_num_flag = LEVEL_1;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <compute_keyboard+0xd8>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
			charge_level(lev_num_flag);
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <compute_keyboard+0xd8>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fa0d 	bl	8001584 <charge_level>
			break;
 800116a:	e002      	b.n	8001172 <compute_keyboard+0xca>
			break;
 800116c:	bf00      	nop
 800116e:	e000      	b.n	8001172 <compute_keyboard+0xca>
			break;
 8001170:	bf00      	nop
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000c6 	.word	0x200000c6
 8001180:	200000c7 	.word	0x200000c7
 8001184:	200000c0 	.word	0x200000c0

08001188 <init_spaceship>:

void init_spaceship() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	e018      	b.n	80011c6 <init_spaceship+0x3e>
		vt100_move(_spaceship.x + i - 1, _spaceship.y);
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <init_spaceship+0x4c>)
 8001196:	791a      	ldrb	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3b01      	subs	r3, #1
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <init_spaceship+0x4c>)
 80011a6:	795b      	ldrb	r3, [r3, #5]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f000 fc60 	bl	8001a70 <vt100_move>
		serial_putchar(_spaceship.appearance[i]);
 80011b0:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <init_spaceship+0x4c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	3301      	adds	r3, #1
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fe3e 	bl	8000e3c <serial_putchar>
	for (int i = 0; i < 3; i++) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3301      	adds	r3, #1
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	dde3      	ble.n	8001194 <init_spaceship+0xc>
	}
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200000c0 	.word	0x200000c0

080011d8 <erase_spaceship>:

void erase_spaceship() {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	e013      	b.n	800120c <erase_spaceship+0x34>
		vt100_move(_spaceship.x + i - 1, _spaceship.y);
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <erase_spaceship+0x44>)
 80011e6:	791a      	ldrb	r2, [r3, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	3b01      	subs	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <erase_spaceship+0x44>)
 80011f6:	795b      	ldrb	r3, [r3, #5]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4610      	mov	r0, r2
 80011fc:	f000 fc38 	bl	8001a70 <vt100_move>
		serial_putchar(' ');
 8001200:	2020      	movs	r0, #32
 8001202:	f7ff fe1b 	bl	8000e3c <serial_putchar>
	for (int i = 0; i < 3; i++) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3301      	adds	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	dde8      	ble.n	80011e4 <erase_spaceship+0xc>
	}

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000c0 	.word	0x200000c0

08001220 <scroll_spaceship>:

void scroll_spaceship(side _side) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	switch (_side) {
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <scroll_spaceship+0x16>
 8001230:	2b01      	cmp	r3, #1
 8001232:	d00f      	beq.n	8001254 <scroll_spaceship+0x34>
			_spaceship.x++;
		init_spaceship();
		break;
	}

}
 8001234:	e01d      	b.n	8001272 <scroll_spaceship+0x52>
		erase_spaceship();
 8001236:	f7ff ffcf 	bl	80011d8 <erase_spaceship>
		if (_spaceship.x > 2)
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <scroll_spaceship+0x5c>)
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d905      	bls.n	800124e <scroll_spaceship+0x2e>
			_spaceship.x--;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <scroll_spaceship+0x5c>)
 8001244:	791b      	ldrb	r3, [r3, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <scroll_spaceship+0x5c>)
 800124c:	711a      	strb	r2, [r3, #4]
		init_spaceship();
 800124e:	f7ff ff9b 	bl	8001188 <init_spaceship>
		break;
 8001252:	e00e      	b.n	8001272 <scroll_spaceship+0x52>
		erase_spaceship();
 8001254:	f7ff ffc0 	bl	80011d8 <erase_spaceship>
		if (_spaceship.x < 79)
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <scroll_spaceship+0x5c>)
 800125a:	791b      	ldrb	r3, [r3, #4]
 800125c:	2b4e      	cmp	r3, #78	; 0x4e
 800125e:	d805      	bhi.n	800126c <scroll_spaceship+0x4c>
			_spaceship.x++;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <scroll_spaceship+0x5c>)
 8001262:	791b      	ldrb	r3, [r3, #4]
 8001264:	3301      	adds	r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <scroll_spaceship+0x5c>)
 800126a:	711a      	strb	r2, [r3, #4]
		init_spaceship();
 800126c:	f7ff ff8c 	bl	8001188 <init_spaceship>
		break;
 8001270:	bf00      	nop
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000c0 	.word	0x200000c0

08001280 <init_shoot>:

void init_shoot(object _object, uint8_t x, uint8_t y) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	460b      	mov	r3, r1
 800128c:	71bb      	strb	r3, [r7, #6]
 800128e:	4613      	mov	r3, r2
 8001290:	717b      	strb	r3, [r7, #5]
	if (_object == SPACESHIP)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10d      	bne.n	80012b4 <init_shoot+0x34>
		shoot_list[shoot_index] = spaceship_shoot;
 8001298:	4b35      	ldr	r3, [pc, #212]	; (8001370 <init_shoot+0xf0>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	4a35      	ldr	r2, [pc, #212]	; (8001374 <init_shoot+0xf4>)
 80012a0:	460b      	mov	r3, r1
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	4413      	add	r3, r2
 80012a8:	4a33      	ldr	r2, [pc, #204]	; (8001378 <init_shoot+0xf8>)
 80012aa:	6811      	ldr	r1, [r2, #0]
 80012ac:	6019      	str	r1, [r3, #0]
 80012ae:	7912      	ldrb	r2, [r2, #4]
 80012b0:	711a      	strb	r2, [r3, #4]
 80012b2:	e00c      	b.n	80012ce <init_shoot+0x4e>
	else
		shoot_list[shoot_index] = spaceship_shoot;
 80012b4:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <init_shoot+0xf0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4a2e      	ldr	r2, [pc, #184]	; (8001374 <init_shoot+0xf4>)
 80012bc:	460b      	mov	r3, r1
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	4413      	add	r3, r2
 80012c4:	4a2c      	ldr	r2, [pc, #176]	; (8001378 <init_shoot+0xf8>)
 80012c6:	6811      	ldr	r1, [r2, #0]
 80012c8:	6019      	str	r1, [r3, #0]
 80012ca:	7912      	ldrb	r2, [r2, #4]
 80012cc:	711a      	strb	r2, [r3, #4]

	shoot_list[shoot_index].x = x;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <init_shoot+0xf0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	4a27      	ldr	r2, [pc, #156]	; (8001374 <init_shoot+0xf4>)
 80012d6:	460b      	mov	r3, r1
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	4413      	add	r3, r2
 80012de:	3302      	adds	r3, #2
 80012e0:	79ba      	ldrb	r2, [r7, #6]
 80012e2:	701a      	strb	r2, [r3, #0]
	shoot_list[shoot_index].y = y;
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <init_shoot+0xf0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4a22      	ldr	r2, [pc, #136]	; (8001374 <init_shoot+0xf4>)
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	4413      	add	r3, r2
 80012f4:	3303      	adds	r3, #3
 80012f6:	797a      	ldrb	r2, [r7, #5]
 80012f8:	701a      	strb	r2, [r3, #0]

	vt100_move(shoot_list[shoot_index].x, shoot_list[shoot_index].y);
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <init_shoot+0xf0>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <init_shoot+0xf4>)
 8001302:	460b      	mov	r3, r1
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	4413      	add	r3, r2
 800130a:	3302      	adds	r3, #2
 800130c:	7818      	ldrb	r0, [r3, #0]
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <init_shoot+0xf0>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <init_shoot+0xf4>)
 8001316:	460b      	mov	r3, r1
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	4413      	add	r3, r2
 800131e:	3303      	adds	r3, #3
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	f000 fba4 	bl	8001a70 <vt100_move>
	serial_putchar(shoot_list[shoot_index].appearance);
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <init_shoot+0xf0>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <init_shoot+0xf4>)
 8001330:	460b      	mov	r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fd7e 	bl	8000e3c <serial_putchar>
	 do {
	 if (shoot_index >= SHOOT_AMOUNT)
	 shoot_index = 0;
	 shoot_index++;
	 } while (shoot_list[shoot_index].exist == TRUE);*/
	shoot_index++;
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <init_shoot+0xf0>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <init_shoot+0xf0>)
 800134a:	701a      	strb	r2, [r3, #0]
	shoot_index %= SHOOT_AMOUNT;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <init_shoot+0xf0>)
 800134e:	781a      	ldrb	r2, [r3, #0]
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <init_shoot+0xfc>)
 8001352:	fba3 1302 	umull	r1, r3, r3, r2
 8001356:	08d9      	lsrs	r1, r3, #3
 8001358:	460b      	mov	r3, r1
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b02      	ldr	r3, [pc, #8]	; (8001370 <init_shoot+0xf0>)
 8001366:	701a      	strb	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200000c8 	.word	0x200000c8
 8001374:	200000cc 	.word	0x200000cc
 8001378:	2000011c 	.word	0x2000011c
 800137c:	cccccccd 	.word	0xcccccccd

08001380 <erase_shoot>:

void erase_shoot(shoot *_shoot) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	vt100_move(_shoot->x, _shoot->y);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	789a      	ldrb	r2, [r3, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	78db      	ldrb	r3, [r3, #3]
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f000 fb6c 	bl	8001a70 <vt100_move>
	serial_putchar(' ');
 8001398:	2020      	movs	r0, #32
 800139a:	f7ff fd4f 	bl	8000e3c <serial_putchar>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <scroll_shoot>:

void scroll_shoot() {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

	for (int i = 0; i < SHOOT_AMOUNT; i++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e077      	b.n	80014a4 <scroll_shoot+0xfc>
		if (shoot_list[i].exist == TRUE) {
 80013b4:	493f      	ldr	r1, [pc, #252]	; (80014b4 <scroll_shoot+0x10c>)
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	440b      	add	r3, r1
 80013c0:	3304      	adds	r3, #4
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d16a      	bne.n	800149e <scroll_shoot+0xf6>

			erase_shoot(&shoot_list[i]);
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	4a38      	ldr	r2, [pc, #224]	; (80014b4 <scroll_shoot+0x10c>)
 80013d2:	4413      	add	r3, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ffd3 	bl	8001380 <erase_shoot>

			if (shoot_list[i]._object == SPACESHIP)
 80013da:	4936      	ldr	r1, [pc, #216]	; (80014b4 <scroll_shoot+0x10c>)
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	3301      	adds	r3, #1
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d113      	bne.n	8001416 <scroll_shoot+0x6e>
				shoot_list[i].y--;
 80013ee:	4931      	ldr	r1, [pc, #196]	; (80014b4 <scroll_shoot+0x10c>)
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	3303      	adds	r3, #3
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	3b01      	subs	r3, #1
 8001400:	b2d8      	uxtb	r0, r3
 8001402:	492c      	ldr	r1, [pc, #176]	; (80014b4 <scroll_shoot+0x10c>)
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	440b      	add	r3, r1
 800140e:	3303      	adds	r3, #3
 8001410:	4602      	mov	r2, r0
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	e012      	b.n	800143c <scroll_shoot+0x94>
			else
				shoot_list[i].y++;
 8001416:	4927      	ldr	r1, [pc, #156]	; (80014b4 <scroll_shoot+0x10c>)
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	440b      	add	r3, r1
 8001422:	3303      	adds	r3, #3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	b2d8      	uxtb	r0, r3
 800142a:	4922      	ldr	r1, [pc, #136]	; (80014b4 <scroll_shoot+0x10c>)
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	440b      	add	r3, r1
 8001436:	3303      	adds	r3, #3
 8001438:	4602      	mov	r2, r0
 800143a:	701a      	strb	r2, [r3, #0]

			if (shoot_list[i].y >= VT100_SCREEN_YMAX) {
 800143c:	491d      	ldr	r1, [pc, #116]	; (80014b4 <scroll_shoot+0x10c>)
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	440b      	add	r3, r1
 8001448:	3303      	adds	r3, #3
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b17      	cmp	r3, #23
 800144e:	d909      	bls.n	8001464 <scroll_shoot+0xbc>
				shoot_list[i].exist = FALSE;
 8001450:	4918      	ldr	r1, [pc, #96]	; (80014b4 <scroll_shoot+0x10c>)
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	440b      	add	r3, r1
 800145c:	3304      	adds	r3, #4
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e01c      	b.n	800149e <scroll_shoot+0xf6>
			} else {
				vt100_move(shoot_list[i].x, shoot_list[i].y);
 8001464:	4913      	ldr	r1, [pc, #76]	; (80014b4 <scroll_shoot+0x10c>)
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	440b      	add	r3, r1
 8001470:	3302      	adds	r3, #2
 8001472:	7818      	ldrb	r0, [r3, #0]
 8001474:	490f      	ldr	r1, [pc, #60]	; (80014b4 <scroll_shoot+0x10c>)
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	440b      	add	r3, r1
 8001480:	3303      	adds	r3, #3
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f000 faf3 	bl	8001a70 <vt100_move>
				serial_putchar(shoot_list[i].appearance);
 800148a:	490a      	ldr	r1, [pc, #40]	; (80014b4 <scroll_shoot+0x10c>)
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	440b      	add	r3, r1
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fccf 	bl	8000e3c <serial_putchar>
	for (int i = 0; i < SHOOT_AMOUNT; i++) {
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3301      	adds	r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b09      	cmp	r3, #9
 80014a8:	dd84      	ble.n	80013b4 <scroll_shoot+0xc>

			}
		}
	}
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200000cc 	.word	0x200000cc

080014b8 <init_ennemy>:

void init_ennemy(ennemy *_ennemy, uint8_t x, uint8_t y) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
 80014c4:	4613      	mov	r3, r2
 80014c6:	70bb      	strb	r3, [r7, #2]

	for (int i = 0; i < 3; i++) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e016      	b.n	80014fc <init_ennemy+0x44>
		vt100_move(x + i + 1, y);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	4413      	add	r3, r2
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	78ba      	ldrb	r2, [r7, #2]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fac5 	bl	8001a70 <vt100_move>
		serial_putchar(_ennemy->appearance[i]);
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	3303      	adds	r3, #3
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fca3 	bl	8000e3c <serial_putchar>
	for (int i = 0; i < 3; i++) {
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	dde5      	ble.n	80014ce <init_ennemy+0x16>
	}
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <init_shield>:

void scroll_ennemies(ennemy *_ennemy, uint8_t x, uint8_t y) {

}

void init_shield(uint8_t x, uint8_t y) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < 4; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e026      	b.n	8001570 <init_shield+0x64>
		for (int j = 0; j < 7; j++) {
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	e01d      	b.n	8001564 <init_shield+0x58>
			vt100_move(x + j - 3, y + i);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4413      	add	r3, r2
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3b03      	subs	r3, #3
 8001534:	b2d8      	uxtb	r0, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	4413      	add	r3, r2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	f000 fa95 	bl	8001a70 <vt100_move>
			serial_putchar(shield_appearance[i][j]);
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <init_shield+0x74>)
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	18ca      	adds	r2, r1, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	4413      	add	r3, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fc6f 	bl	8000e3c <serial_putchar>
		for (int j = 0; j < 7; j++) {
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	3301      	adds	r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b06      	cmp	r3, #6
 8001568:	ddde      	ble.n	8001528 <init_shield+0x1c>
	for (int i = 0; i < 4; i++) {
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b03      	cmp	r3, #3
 8001574:	ddd5      	ble.n	8001522 <init_shield+0x16>
		}
	}
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	08001c1c 	.word	0x08001c1c

08001584 <charge_level>:

void charge_level(level_num level) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
	switch (level) {
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b03      	cmp	r3, #3
 8001592:	d817      	bhi.n	80015c4 <charge_level+0x40>
 8001594:	a201      	add	r2, pc, #4	; (adr r2, 800159c <charge_level+0x18>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015ad 	.word	0x080015ad
 80015a0:	080015b3 	.word	0x080015b3
 80015a4:	080015b9 	.word	0x080015b9
 80015a8:	080015bf 	.word	0x080015bf
	case MENU:
		init_menu();
 80015ac:	f000 f85a 	bl	8001664 <init_menu>
		break;
 80015b0:	e008      	b.n	80015c4 <charge_level+0x40>
	case LEVEL_1:
		init_level_1();
 80015b2:	f000 f883 	bl	80016bc <init_level_1>
		break;
 80015b6:	e005      	b.n	80015c4 <charge_level+0x40>
	case LEVEL_2:
		init_level_2();
 80015b8:	f000 f8ce 	bl	8001758 <init_level_2>
		break;
 80015bc:	e002      	b.n	80015c4 <charge_level+0x40>
	case LEVEL_3:
		init_level_3();
 80015be:	f000 f8e5 	bl	800178c <init_level_3>
		break;
 80015c2:	bf00      	nop
	}
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <toggle_pause>:

void toggle_pause() {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
	if (keyboard_flags & KFPAUS) {
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <toggle_pause+0x90>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01b      	beq.n	8001616 <toggle_pause+0x4a>
		keyboard_flags &= ~KFPAUS;
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <toggle_pause+0x90>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <toggle_pause+0x90>)
 80015ea:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 5; i++) {
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	e00d      	b.n	800160e <toggle_pause+0x42>
			vt100_move(VT100_SCREEN_XMAX + i, VT100_SCREEN_YMAX / 2);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3350      	adds	r3, #80	; 0x50
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	210c      	movs	r1, #12
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fa37 	bl	8001a70 <vt100_move>
			serial_putchar(' ');
 8001602:	2020      	movs	r0, #32
 8001604:	f7ff fc1a 	bl	8000e3c <serial_putchar>
		for (int i = 0; i < 5; i++) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b04      	cmp	r3, #4
 8001612:	ddee      	ble.n	80015f2 <toggle_pause+0x26>
			vt100_move(VT100_SCREEN_XMAX / 2 - 2 + i,
			VT100_SCREEN_YMAX / 2 + 1);
			serial_putchar(pause_message[i]);
		}
	}
}
 8001614:	e01e      	b.n	8001654 <toggle_pause+0x88>
		keyboard_flags |= KFPAUS;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <toggle_pause+0x90>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <toggle_pause+0x90>)
 8001622:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 5; i++) {
 8001624:	2300      	movs	r3, #0
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	e011      	b.n	800164e <toggle_pause+0x82>
			vt100_move(VT100_SCREEN_XMAX / 2 - 2 + i,
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	3326      	adds	r3, #38	; 0x26
 8001630:	b2db      	uxtb	r3, r3
 8001632:	210d      	movs	r1, #13
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fa1b 	bl	8001a70 <vt100_move>
			serial_putchar(pause_message[i]);
 800163a:	4a09      	ldr	r2, [pc, #36]	; (8001660 <toggle_pause+0x94>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fbfa 	bl	8000e3c <serial_putchar>
		for (int i = 0; i < 5; i++) {
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b04      	cmp	r3, #4
 8001652:	ddea      	ble.n	800162a <toggle_pause+0x5e>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200000c6 	.word	0x200000c6
 8001660:	08001c38 	.word	0x08001c38

08001664 <init_menu>:

void init_menu() {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
	for (int i; i < 2; i++) {
 800166a:	e01d      	b.n	80016a8 <init_menu+0x44>
		for (int j; j < 20; j++) {
			vt100_move(j, i);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f9fa 	bl	8001a70 <vt100_move>
			serial_putchar(menu_message[i][j]);
 800167c:	490e      	ldr	r1, [pc, #56]	; (80016b8 <init_menu+0x54>)
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	18ca      	adds	r2, r1, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	4413      	add	r3, r2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fbd3 	bl	8000e3c <serial_putchar>
		for (int j; j < 20; j++) {
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	2b13      	cmp	r3, #19
 80016a0:	dde4      	ble.n	800166c <init_menu+0x8>
	for (int i; i < 2; i++) {
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3301      	adds	r3, #1
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	ddf6      	ble.n	800169c <init_menu+0x38>
		}

	}
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	08001c40 	.word	0x08001c40

080016bc <init_level_1>:

void init_level_1() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0

	lev_num_flag = LEVEL_1;
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <init_level_1+0x90>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]

	vt100_clear_screen();
 80016c8:	f000 fa4e 	bl	8001b68 <vt100_clear_screen>

	init_shield(10, 20);
 80016cc:	2114      	movs	r1, #20
 80016ce:	200a      	movs	r0, #10
 80016d0:	f7ff ff1c 	bl	800150c <init_shield>
	init_shield(40, 20);
 80016d4:	2114      	movs	r1, #20
 80016d6:	2028      	movs	r0, #40	; 0x28
 80016d8:	f7ff ff18 	bl	800150c <init_shield>
	init_shield(70, 20);
 80016dc:	2114      	movs	r1, #20
 80016de:	2046      	movs	r0, #70	; 0x46
 80016e0:	f7ff ff14 	bl	800150c <init_shield>
	for (int j = 0; j < 4; j++) {
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e015      	b.n	8001716 <init_level_1+0x5a>
		for (int i = 0; i < 20; i += 3) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	e00c      	b.n	800170a <init_level_1+0x4e>
			init_ennemy(&ennemy_1, i + 30, j);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	331e      	adds	r3, #30
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	4814      	ldr	r0, [pc, #80]	; (8001750 <init_level_1+0x94>)
 8001700:	f7ff feda 	bl	80014b8 <init_ennemy>
		for (int i = 0; i < 20; i += 3) {
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	3303      	adds	r3, #3
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b13      	cmp	r3, #19
 800170e:	ddef      	ble.n	80016f0 <init_level_1+0x34>
	for (int j = 0; j < 4; j++) {
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3301      	adds	r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b03      	cmp	r3, #3
 800171a:	dde6      	ble.n	80016ea <init_level_1+0x2e>
		}
	}

	for (int i = 0; i < 20; i += 3) {
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	e00b      	b.n	800173a <init_level_1+0x7e>
		init_ennemy(&ennemy_2, i + 30, 4);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	331e      	adds	r3, #30
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2204      	movs	r2, #4
 800172c:	4619      	mov	r1, r3
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <init_level_1+0x98>)
 8001730:	f7ff fec2 	bl	80014b8 <init_ennemy>
	for (int i = 0; i < 20; i += 3) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3303      	adds	r3, #3
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b13      	cmp	r3, #19
 800173e:	ddf0      	ble.n	8001722 <init_level_1+0x66>
	}

	init_spaceship();
 8001740:	f7ff fd22 	bl	8001188 <init_spaceship>
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200000c7 	.word	0x200000c7
 8001750:	20000100 	.word	0x20000100
 8001754:	20000138 	.word	0x20000138

08001758 <init_level_2>:

void init_level_2() {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

	lev_num_flag = LEVEL_2;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <init_level_2+0x30>)
 800175e:	2202      	movs	r2, #2
 8001760:	701a      	strb	r2, [r3, #0]

	vt100_clear_screen();
 8001762:	f000 fa01 	bl	8001b68 <vt100_clear_screen>

	init_shield(10, 20);
 8001766:	2114      	movs	r1, #20
 8001768:	200a      	movs	r0, #10
 800176a:	f7ff fecf 	bl	800150c <init_shield>
	init_shield(40, 20);
 800176e:	2114      	movs	r1, #20
 8001770:	2028      	movs	r0, #40	; 0x28
 8001772:	f7ff fecb 	bl	800150c <init_shield>
	init_shield(70, 20);
 8001776:	2114      	movs	r1, #20
 8001778:	2046      	movs	r0, #70	; 0x46
 800177a:	f7ff fec7 	bl	800150c <init_shield>

	init_spaceship();
 800177e:	f7ff fd03 	bl	8001188 <init_spaceship>
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200000c7 	.word	0x200000c7

0800178c <init_level_3>:

void init_level_3() {
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0

	lev_num_flag = LEVEL_3;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <init_level_3+0x30>)
 8001792:	2203      	movs	r2, #3
 8001794:	701a      	strb	r2, [r3, #0]

	vt100_clear_screen();
 8001796:	f000 f9e7 	bl	8001b68 <vt100_clear_screen>

	init_shield(10, 20);
 800179a:	2114      	movs	r1, #20
 800179c:	200a      	movs	r0, #10
 800179e:	f7ff feb5 	bl	800150c <init_shield>
	init_shield(40, 20);
 80017a2:	2114      	movs	r1, #20
 80017a4:	2028      	movs	r0, #40	; 0x28
 80017a6:	f7ff feb1 	bl	800150c <init_shield>
	init_shield(70, 20);
 80017aa:	2114      	movs	r1, #20
 80017ac:	2046      	movs	r0, #70	; 0x46
 80017ae:	f7ff fead 	bl	800150c <init_shield>

	init_spaceship();
 80017b2:	f7ff fce9 	bl	8001188 <init_spaceship>
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200000c7 	.word	0x200000c7

080017c0 <TIM2_IRQHandler>:

#define tim2_irq TIM2_IRQHandler

void tim2_irq(void) {
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	//scroll_shoot();
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <TIM3_IRQHandler>:

#define tim3_irq TIM3_IRQHandler

void tim3_irq(void) {
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001814 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017e2:	e003      	b.n	80017ec <LoopCopyDataInit>

080017e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017ea:	3104      	adds	r1, #4

080017ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017f4:	d3f6      	bcc.n	80017e4 <CopyDataInit>
  ldr  r2, =_sbss
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017f8:	e002      	b.n	8001800 <LoopFillZerobss>

080017fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017fc:	f842 3b04 	str.w	r3, [r2], #4

08001800 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001802:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001804:	d3f9      	bcc.n	80017fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001806:	f000 f841 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180a:	f000 f9cf 	bl	8001bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180e:	f7ff faa8 	bl	8000d62 <main>
  bx  lr    
 8001812:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001814:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001818:	08001c70 	.word	0x08001c70
  ldr  r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001820:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8001824:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8001828:	20000144 	.word	0x20000144

0800182c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC_IRQHandler>

0800182e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001840:	e7fe      	b.n	8001840 <HardFault_Handler+0x4>

08001842 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001846:	e7fe      	b.n	8001846 <MemManage_Handler+0x4>

08001848 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800184c:	e7fe      	b.n	800184c <BusFault_Handler+0x4>

0800184e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001852:	e7fe      	b.n	8001852 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4a16      	ldr	r2, [pc, #88]	; (80018ec <SystemInit+0x60>)
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <SystemInit+0x60>)
 8001894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018a0:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <SystemInit+0x64>)
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <SystemInit+0x64>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <SystemInit+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <SystemInit+0x64>)
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <SystemInit+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80018bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <SystemInit+0x64>)
 80018c4:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <SystemInit+0x68>)
 80018c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018c8:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <SystemInit+0x64>)
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <SystemInit+0x64>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <SystemInit+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80018da:	f000 f80d 	bl	80018f8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018de:	4b03      	ldr	r3, [pc, #12]	; (80018ec <SystemInit+0x60>)
 80018e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018e4:	609a      	str	r2, [r3, #8]
#endif
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	24003010 	.word	0x24003010

080018f8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	2300      	movs	r3, #0
 8001904:	603b      	str	r3, [r7, #0]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001906:	4a36      	ldr	r2, [pc, #216]	; (80019e0 <SetSysClock+0xe8>)
 8001908:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <SetSysClock+0xe8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001912:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <SetSysClock+0xe8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3301      	adds	r3, #1
 8001920:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d103      	bne.n	8001930 <SetSysClock+0x38>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800192e:	d1f0      	bne.n	8001912 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001930:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <SetSysClock+0xe8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800193c:	2301      	movs	r3, #1
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	e001      	b.n	8001946 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d142      	bne.n	80019d2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800194c:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <SetSysClock+0xe8>)
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <SetSysClock+0xe8>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;
 8001958:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <SetSysClock+0xec>)
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <SetSysClock+0xec>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001962:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001964:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <SetSysClock+0xe8>)
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <SetSysClock+0xe8>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800196c:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <SetSysClock+0xe8>)
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <SetSysClock+0xe8>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001976:	6093      	str	r3, [r2, #8]

    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <SetSysClock+0xe8>)
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <SetSysClock+0xe8>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001982:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <SetSysClock+0xe8>)
 8001986:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <SetSysClock+0xf0>)
 8001988:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800198a:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <SetSysClock+0xe8>)
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <SetSysClock+0xe8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001994:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001996:	bf00      	nop
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <SetSysClock+0xe8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f9      	beq.n	8001998 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <SetSysClock+0xf4>)
 80019a6:	f240 6205 	movw	r2, #1541	; 0x605
 80019aa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <SetSysClock+0xe8>)
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <SetSysClock+0xe8>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 0303 	bic.w	r3, r3, #3
 80019b6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80019b8:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <SetSysClock+0xe8>)
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <SetSysClock+0xe8>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
		while ((RCC->CFGR & (uint32_t) RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 80019c4:	bf00      	nop
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <SetSysClock+0xe8>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d1f9      	bne.n	80019c6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40007000 	.word	0x40007000
 80019e8:	07405408 	.word	0x07405408
 80019ec:	40023c00 	.word	0x40023c00

080019f0 <init_tim_base>:
 *      Author: lucasadam33400
 */

#include "timer.h"

void init_tim_base(t_timer type, uint32_t delay_val) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]

	TIM_TimeBaseInitTypeDef str_TIM;
	NVIC_InitTypeDef str_NVIC;

	str_TIM.TIM_Prescaler = TIM_TS_ITR0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	81bb      	strh	r3, [r7, #12]
	str_TIM.TIM_Period = delay_val;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	613b      	str	r3, [r7, #16]
	str_TIM.TIM_ClockDivision = TIM_CKD_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	82bb      	strh	r3, [r7, #20]
	str_TIM.TIM_CounterMode = TIM_CounterMode_Down;
 8001a08:	2310      	movs	r3, #16
 8001a0a:	81fb      	strh	r3, [r7, #14]
	str_TIM.TIM_RepetitionCounter = TIM_OPMode_Repetitive;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	75bb      	strb	r3, [r7, #22]

	str_NVIC.NVIC_IRQChannelCmd = ENABLE;
 8001a10:	2301      	movs	r3, #1
 8001a12:	72fb      	strb	r3, [r7, #11]
	str_NVIC.NVIC_IRQChannelPreemptionPriority = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	727b      	strb	r3, [r7, #9]
	str_NVIC.NVIC_IRQChannelSubPriority = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	72bb      	strb	r3, [r7, #10]

	switch (type) {
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <init_tim_base+0x38>
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d00f      	beq.n	8001a46 <init_tim_base+0x56>
		str_NVIC.NVIC_IRQChannel = TIM3_IRQn;
		NVIC_Init(&str_NVIC);

		break;
	}
}
 8001a26:	e01c      	b.n	8001a62 <init_tim_base+0x72>
		TIM_TimeBaseInit(TIM2, &str_TIM);
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a32:	f7fe fefd 	bl	8000830 <TIM_TimeBaseInit>
		str_NVIC.NVIC_IRQChannel = TIM2_IRQn;
 8001a36:	231c      	movs	r3, #28
 8001a38:	723b      	strb	r3, [r7, #8]
		NVIC_Init(&str_NVIC);
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fbc2 	bl	80001c8 <NVIC_Init>
		break;
 8001a44:	e00d      	b.n	8001a62 <init_tim_base+0x72>
		TIM_TimeBaseInit(TIM3, &str_TIM);
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4807      	ldr	r0, [pc, #28]	; (8001a6c <init_tim_base+0x7c>)
 8001a4e:	f7fe feef 	bl	8000830 <TIM_TimeBaseInit>
		str_NVIC.NVIC_IRQChannel = TIM3_IRQn;
 8001a52:	231d      	movs	r3, #29
 8001a54:	723b      	strb	r3, [r7, #8]
		NVIC_Init(&str_NVIC);
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fbb4 	bl	80001c8 <NVIC_Init>
		break;
 8001a60:	bf00      	nop
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40000400 	.word	0x40000400

08001a70 <vt100_move>:
#include "vt100.h"
#include "serial.h"

void vt100_move(uint8_t x, uint8_t y)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71bb      	strb	r3, [r7, #6]
	serial_putchar(VT100_ESC);
 8001a80:	201b      	movs	r0, #27
 8001a82:	f7ff f9db 	bl	8000e3c <serial_putchar>
	serial_putchar('[');
 8001a86:	205b      	movs	r0, #91	; 0x5b
 8001a88:	f7ff f9d8 	bl	8000e3c <serial_putchar>
	serial_putchar('0' + (y / 100));
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	4a34      	ldr	r2, [pc, #208]	; (8001b60 <vt100_move+0xf0>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	095b      	lsrs	r3, r3, #5
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3330      	adds	r3, #48	; 0x30
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff f9cd 	bl	8000e3c <serial_putchar>
	serial_putchar('0' + ((y / 10) % 10));
 8001aa2:	79bb      	ldrb	r3, [r7, #6]
 8001aa4:	4a2f      	ldr	r2, [pc, #188]	; (8001b64 <vt100_move+0xf4>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	08db      	lsrs	r3, r3, #3
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <vt100_move+0xf4>)
 8001ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ab4:	08d9      	lsrs	r1, r3, #3
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3330      	adds	r3, #48	; 0x30
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f9b8 	bl	8000e3c <serial_putchar>
	serial_putchar('0' + (y % 10));
 8001acc:	79ba      	ldrb	r2, [r7, #6]
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <vt100_move+0xf4>)
 8001ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ad4:	08d9      	lsrs	r1, r3, #3
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3330      	adds	r3, #48	; 0x30
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f9a8 	bl	8000e3c <serial_putchar>
	serial_putchar(';');
 8001aec:	203b      	movs	r0, #59	; 0x3b
 8001aee:	f7ff f9a5 	bl	8000e3c <serial_putchar>
	serial_putchar('0' + (x / 100));
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <vt100_move+0xf0>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3330      	adds	r3, #48	; 0x30
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f99a 	bl	8000e3c <serial_putchar>
	serial_putchar('0' + ((x / 10) % 10));
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <vt100_move+0xf4>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	08db      	lsrs	r3, r3, #3
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <vt100_move+0xf4>)
 8001b16:	fba3 1302 	umull	r1, r3, r3, r2
 8001b1a:	08d9      	lsrs	r1, r3, #3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	3330      	adds	r3, #48	; 0x30
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff f985 	bl	8000e3c <serial_putchar>
	serial_putchar('0' + (x % 10));
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <vt100_move+0xf4>)
 8001b36:	fba3 1302 	umull	r1, r3, r3, r2
 8001b3a:	08d9      	lsrs	r1, r3, #3
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	3330      	adds	r3, #48	; 0x30
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff f975 	bl	8000e3c <serial_putchar>
	serial_putchar('H');
 8001b52:	2048      	movs	r0, #72	; 0x48
 8001b54:	f7ff f972 	bl	8000e3c <serial_putchar>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	51eb851f 	.word	0x51eb851f
 8001b64:	cccccccd 	.word	0xcccccccd

08001b68 <vt100_clear_screen>:

void vt100_clear_screen(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	serial_putchar(VT100_ESC);
 8001b6c:	201b      	movs	r0, #27
 8001b6e:	f7ff f965 	bl	8000e3c <serial_putchar>
	serial_putchar('[');
 8001b72:	205b      	movs	r0, #91	; 0x5b
 8001b74:	f7ff f962 	bl	8000e3c <serial_putchar>
	serial_putchar('2');
 8001b78:	2032      	movs	r0, #50	; 0x32
 8001b7a:	f7ff f95f 	bl	8000e3c <serial_putchar>
	serial_putchar('J');
 8001b7e:	204a      	movs	r0, #74	; 0x4a
 8001b80:	f7ff f95c 	bl	8000e3c <serial_putchar>
	serial_putchar(VT100_ESC);
 8001b84:	201b      	movs	r0, #27
 8001b86:	f7ff f959 	bl	8000e3c <serial_putchar>
	serial_putchar('[');
 8001b8a:	205b      	movs	r0, #91	; 0x5b
 8001b8c:	f7ff f956 	bl	8000e3c <serial_putchar>
	serial_putchar('?');
 8001b90:	203f      	movs	r0, #63	; 0x3f
 8001b92:	f7ff f953 	bl	8000e3c <serial_putchar>
	serial_putchar('2');
 8001b96:	2032      	movs	r0, #50	; 0x32
 8001b98:	f7ff f950 	bl	8000e3c <serial_putchar>
	serial_putchar('5');
 8001b9c:	2035      	movs	r0, #53	; 0x35
 8001b9e:	f7ff f94d 	bl	8000e3c <serial_putchar>
	serial_putchar('l');
 8001ba2:	206c      	movs	r0, #108	; 0x6c
 8001ba4:	f7ff f94a 	bl	8000e3c <serial_putchar>
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <__libc_init_array>:
 8001bac:	b570      	push	{r4, r5, r6, lr}
 8001bae:	4e0d      	ldr	r6, [pc, #52]	; (8001be4 <__libc_init_array+0x38>)
 8001bb0:	4c0d      	ldr	r4, [pc, #52]	; (8001be8 <__libc_init_array+0x3c>)
 8001bb2:	1ba4      	subs	r4, r4, r6
 8001bb4:	10a4      	asrs	r4, r4, #2
 8001bb6:	2500      	movs	r5, #0
 8001bb8:	42a5      	cmp	r5, r4
 8001bba:	d109      	bne.n	8001bd0 <__libc_init_array+0x24>
 8001bbc:	4e0b      	ldr	r6, [pc, #44]	; (8001bec <__libc_init_array+0x40>)
 8001bbe:	4c0c      	ldr	r4, [pc, #48]	; (8001bf0 <__libc_init_array+0x44>)
 8001bc0:	f000 f818 	bl	8001bf4 <_init>
 8001bc4:	1ba4      	subs	r4, r4, r6
 8001bc6:	10a4      	asrs	r4, r4, #2
 8001bc8:	2500      	movs	r5, #0
 8001bca:	42a5      	cmp	r5, r4
 8001bcc:	d105      	bne.n	8001bda <__libc_init_array+0x2e>
 8001bce:	bd70      	pop	{r4, r5, r6, pc}
 8001bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bd4:	4798      	blx	r3
 8001bd6:	3501      	adds	r5, #1
 8001bd8:	e7ee      	b.n	8001bb8 <__libc_init_array+0xc>
 8001bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bde:	4798      	blx	r3
 8001be0:	3501      	adds	r5, #1
 8001be2:	e7f2      	b.n	8001bca <__libc_init_array+0x1e>
 8001be4:	08001c68 	.word	0x08001c68
 8001be8:	08001c68 	.word	0x08001c68
 8001bec:	08001c68 	.word	0x08001c68
 8001bf0:	08001c6c 	.word	0x08001c6c

08001bf4 <_init>:
 8001bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf6:	bf00      	nop
 8001bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bfa:	bc08      	pop	{r3}
 8001bfc:	469e      	mov	lr, r3
 8001bfe:	4770      	bx	lr

08001c00 <_fini>:
 8001c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c02:	bf00      	nop
 8001c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c06:	bc08      	pop	{r3}
 8001c08:	469e      	mov	lr, r3
 8001c0a:	4770      	bx	lr
