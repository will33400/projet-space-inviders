
space.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001de4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001f6c  08001f6c  00011f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001fbc  08001fbc  00011fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001fc0  08001fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08001fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  7 .bss          000006b8  20000024  20000024  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200006dc  200006dc  00020024  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007101  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000014f9  00000000  00000000  00027155  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000830  00000000  00000000  00028650  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000748  00000000  00000000  00028e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000325b  00000000  00000000  000295c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002c8a  00000000  00000000  0002c823  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002f4ad  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002088  00000000  00000000  0002f52c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000315b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f54 	.word	0x08001f54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08001f54 	.word	0x08001f54

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	4b25      	ldr	r3, [pc, #148]	; (8000338 <DMA_Init+0xac>)
 80002a4:	4013      	ands	r3, r2
 80002a6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002b6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002c2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002ce:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002d4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80002da:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80002e0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	f023 0307 	bic.w	r3, r3, #7
 80002fa:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4313      	orrs	r3, r2
 8000306:	68fa      	ldr	r2, [r7, #12]
 8000308:	4313      	orrs	r3, r2
 800030a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68fa      	ldr	r2, [r7, #12]
 8000310:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	691a      	ldr	r2, [r3, #16]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	685a      	ldr	r2, [r3, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	689a      	ldr	r2, [r3, #8]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	60da      	str	r2, [r3, #12]
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	f01c803f 	.word	0xf01c803f

0800033c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d006      	beq.n	800035c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f043 0201 	orr.w	r2, r3, #1
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800035a:	e005      	b.n	8000368 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f023 0201 	bic.w	r2, r3, #1
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	601a      	str	r2, [r3, #0]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800038c:	2301      	movs	r3, #1
 800038e:	73fb      	strb	r3, [r7, #15]
 8000390:	e001      	b.n	8000396 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000392:	2300      	movs	r3, #0
 8000394:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000396:	7bfb      	ldrb	r3, [r7, #15]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b087      	sub	sp, #28
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003ae:	2300      	movs	r3, #0
 80003b0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a15      	ldr	r2, [pc, #84]	; (8000410 <DMA_GetFlagStatus+0x6c>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d802      	bhi.n	80003c4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <DMA_GetFlagStatus+0x70>)
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	e001      	b.n	80003c8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <DMA_GetFlagStatus+0x74>)
 80003c6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d003      	beq.n	80003da <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	e002      	b.n	80003e0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003e6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003ea:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	4013      	ands	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d002      	beq.n	80003fc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80003f6:	2301      	movs	r3, #1
 80003f8:	75fb      	strb	r3, [r7, #23]
 80003fa:	e001      	b.n	8000400 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80003fc:	2300      	movs	r3, #0
 80003fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000400:	7dfb      	ldrb	r3, [r7, #23]
}
 8000402:	4618      	mov	r0, r3
 8000404:	371c      	adds	r7, #28
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	4002640f 	.word	0x4002640f
 8000414:	40026000 	.word	0x40026000
 8000418:	40026400 	.word	0x40026400

0800041c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a10      	ldr	r2, [pc, #64]	; (800046c <DMA_ClearFlag+0x50>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d802      	bhi.n	8000434 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <DMA_ClearFlag+0x54>)
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	e001      	b.n	8000438 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <DMA_ClearFlag+0x58>)
 8000436:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800043e:	2b00      	cmp	r3, #0
 8000440:	d007      	beq.n	8000452 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000448:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000450:	e006      	b.n	8000460 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000458:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	6093      	str	r3, [r2, #8]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	4002640f 	.word	0x4002640f
 8000470:	40026000 	.word	0x40026000
 8000474:	40026400 	.word	0x40026400

08000478 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000478:	b480      	push	{r7}
 800047a:	b087      	sub	sp, #28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	e076      	b.n	8000582 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000494:	2201      	movs	r2, #1
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	4013      	ands	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d165      	bne.n	800057c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	2103      	movs	r1, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	43db      	mvns	r3, r3
 80004c0:	401a      	ands	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	4619      	mov	r1, r3
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	fa01 f303 	lsl.w	r3, r1, r3
 80004d8:	431a      	orrs	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	791b      	ldrb	r3, [r3, #4]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d003      	beq.n	80004ee <GPIO_Init+0x76>
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d12e      	bne.n	800054c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	689a      	ldr	r2, [r3, #8]
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	2103      	movs	r1, #3
 80004f8:	fa01 f303 	lsl.w	r3, r1, r3
 80004fc:	43db      	mvns	r3, r3
 80004fe:	401a      	ands	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	795b      	ldrb	r3, [r3, #5]
 800050c:	4619      	mov	r1, r3
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	431a      	orrs	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	685a      	ldr	r2, [r3, #4]
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	b29b      	uxth	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	2301      	movs	r3, #1
 8000528:	408b      	lsls	r3, r1
 800052a:	43db      	mvns	r3, r3
 800052c:	401a      	ands	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	683a      	ldr	r2, [r7, #0]
 8000538:	7992      	ldrb	r2, [r2, #6]
 800053a:	4611      	mov	r1, r2
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	b292      	uxth	r2, r2
 8000540:	fa01 f202 	lsl.w	r2, r1, r2
 8000544:	b292      	uxth	r2, r2
 8000546:	431a      	orrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	b29b      	uxth	r3, r3
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	2103      	movs	r1, #3
 8000558:	fa01 f303 	lsl.w	r3, r1, r3
 800055c:	43db      	mvns	r3, r3
 800055e:	401a      	ands	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	68da      	ldr	r2, [r3, #12]
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	79db      	ldrb	r3, [r3, #7]
 800056c:	4619      	mov	r1, r3
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	431a      	orrs	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	3301      	adds	r3, #1
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d985      	bls.n	8000494 <GPIO_Init+0x1c>
    }
  }
}
 8000588:	bf00      	nop
 800058a:	371c      	adds	r7, #28
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
 80005a0:	4613      	mov	r3, r2
 80005a2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005ac:	787a      	ldrb	r2, [r7, #1]
 80005ae:	887b      	ldrh	r3, [r7, #2]
 80005b0:	f003 0307 	and.w	r3, r3, #7
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	08db      	lsrs	r3, r3, #3
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	887b      	ldrh	r3, [r7, #2]
 80005c6:	08db      	lsrs	r3, r3, #3
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3208      	adds	r2, #8
 80005d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	210f      	movs	r1, #15
 80005de:	fa01 f303 	lsl.w	r3, r1, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	ea02 0103 	and.w	r1, r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f100 0208 	add.w	r2, r0, #8
 80005ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80005f2:	887b      	ldrh	r3, [r7, #2]
 80005f4:	08db      	lsrs	r3, r3, #3
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3208      	adds	r2, #8
 80005fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	4313      	orrs	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	08db      	lsrs	r3, r3, #3
 800060c:	b29b      	uxth	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3208      	adds	r2, #8
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000628:	b480      	push	{r7}
 800062a:	b089      	sub	sp, #36	; 0x24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	2302      	movs	r3, #2
 8000646:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000648:	4b47      	ldr	r3, [pc, #284]	; (8000768 <RCC_GetClocksFreq+0x140>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f003 030c 	and.w	r3, r3, #12
 8000650:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	2b04      	cmp	r3, #4
 8000656:	d007      	beq.n	8000668 <RCC_GetClocksFreq+0x40>
 8000658:	2b08      	cmp	r3, #8
 800065a:	d009      	beq.n	8000670 <RCC_GetClocksFreq+0x48>
 800065c:	2b00      	cmp	r3, #0
 800065e:	d13d      	bne.n	80006dc <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a42      	ldr	r2, [pc, #264]	; (800076c <RCC_GetClocksFreq+0x144>)
 8000664:	601a      	str	r2, [r3, #0]
      break;
 8000666:	e03d      	b.n	80006e4 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a41      	ldr	r2, [pc, #260]	; (8000770 <RCC_GetClocksFreq+0x148>)
 800066c:	601a      	str	r2, [r3, #0]
      break;
 800066e:	e039      	b.n	80006e4 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000670:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <RCC_GetClocksFreq+0x140>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	0d9b      	lsrs	r3, r3, #22
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800067c:	4b3a      	ldr	r3, [pc, #232]	; (8000768 <RCC_GetClocksFreq+0x140>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000684:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800068c:	4a38      	ldr	r2, [pc, #224]	; (8000770 <RCC_GetClocksFreq+0x148>)
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	fbb2 f3f3 	udiv	r3, r2, r3
 8000694:	4a34      	ldr	r2, [pc, #208]	; (8000768 <RCC_GetClocksFreq+0x140>)
 8000696:	6852      	ldr	r2, [r2, #4]
 8000698:	0992      	lsrs	r2, r2, #6
 800069a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800069e:	fb02 f303 	mul.w	r3, r2, r3
 80006a2:	61fb      	str	r3, [r7, #28]
 80006a4:	e00b      	b.n	80006be <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006a6:	4a31      	ldr	r2, [pc, #196]	; (800076c <RCC_GetClocksFreq+0x144>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4a2e      	ldr	r2, [pc, #184]	; (8000768 <RCC_GetClocksFreq+0x140>)
 80006b0:	6852      	ldr	r2, [r2, #4]
 80006b2:	0992      	lsrs	r2, r2, #6
 80006b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006b8:	fb02 f303 	mul.w	r3, r2, r3
 80006bc:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <RCC_GetClocksFreq+0x140>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	0c1b      	lsrs	r3, r3, #16
 80006c4:	f003 0303 	and.w	r3, r3, #3
 80006c8:	3301      	adds	r3, #1
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80006ce:	69fa      	ldr	r2, [r7, #28]
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	601a      	str	r2, [r3, #0]
      break;
 80006da:	e003      	b.n	80006e4 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a23      	ldr	r2, [pc, #140]	; (800076c <RCC_GetClocksFreq+0x144>)
 80006e0:	601a      	str	r2, [r3, #0]
      break;
 80006e2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <RCC_GetClocksFreq+0x140>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006ec:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	091b      	lsrs	r3, r3, #4
 80006f2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006f4:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <RCC_GetClocksFreq+0x14c>)
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	40da      	lsrs	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <RCC_GetClocksFreq+0x140>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000714:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	0a9b      	lsrs	r3, r3, #10
 800071a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800071c:	4a15      	ldr	r2, [pc, #84]	; (8000774 <RCC_GetClocksFreq+0x14c>)
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	40da      	lsrs	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <RCC_GetClocksFreq+0x140>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800073c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	0b5b      	lsrs	r3, r3, #13
 8000742:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000744:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <RCC_GetClocksFreq+0x14c>)
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	40da      	lsrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60da      	str	r2, [r3, #12]
}
 800075c:	bf00      	nop
 800075e:	3724      	adds	r7, #36	; 0x24
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	40023800 	.word	0x40023800
 800076c:	00f42400 	.word	0x00f42400
 8000770:	007a1200 	.word	0x007a1200
 8000774:	20000000 	.word	0x20000000

08000778 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d006      	beq.n	8000798 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800078a:	490a      	ldr	r1, [pc, #40]	; (80007b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800078e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4313      	orrs	r3, r2
 8000794:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000796:	e006      	b.n	80007a6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000798:	4906      	ldr	r1, [pc, #24]	; (80007b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800079c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	43db      	mvns	r3, r3
 80007a2:	4013      	ands	r3, r2
 80007a4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80007ca:	490a      	ldr	r1, [pc, #40]	; (80007f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80007ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80007d6:	e006      	b.n	80007e6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007d8:	4906      	ldr	r1, [pc, #24]	; (80007f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80007dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	43db      	mvns	r3, r3
 80007e2:	4013      	ands	r3, r2
 80007e4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	891b      	ldrh	r3, [r3, #8]
 800080c:	b29a      	uxth	r2, r3
 800080e:	887b      	ldrh	r3, [r7, #2]
 8000810:	4013      	ands	r3, r2
 8000812:	b29b      	uxth	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000818:	2301      	movs	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	e001      	b.n	8000822 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	8a1b      	ldrh	r3, [r3, #16]
 800084e:	b29b      	uxth	r3, r3
 8000850:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000854:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000858:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	88db      	ldrh	r3, [r3, #6]
 800085e:	461a      	mov	r2, r3
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	4313      	orrs	r3, r2
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000868:	b29a      	uxth	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	899b      	ldrh	r3, [r3, #12]
 8000872:	b29b      	uxth	r3, r3
 8000874:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000878:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800087c:	f023 030c 	bic.w	r3, r3, #12
 8000880:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	889a      	ldrh	r2, [r3, #4]
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	891b      	ldrh	r3, [r3, #8]
 800088a:	4313      	orrs	r3, r2
 800088c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000892:	4313      	orrs	r3, r2
 8000894:	b29b      	uxth	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	4313      	orrs	r3, r2
 800089c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	8a9b      	ldrh	r3, [r3, #20]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80008ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	899b      	ldrh	r3, [r3, #12]
 80008ba:	461a      	mov	r2, r3
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	4313      	orrs	r3, r2
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff feaa 	bl	8000628 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a30      	ldr	r2, [pc, #192]	; (8000998 <USART_Init+0x168>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d003      	beq.n	80008e4 <USART_Init+0xb4>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <USART_Init+0x16c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d102      	bne.n	80008ea <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	623b      	str	r3, [r7, #32]
 80008e8:	e001      	b.n	80008ee <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	899b      	ldrh	r3, [r3, #12]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	da0c      	bge.n	8000914 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80008fa:	6a3a      	ldr	r2, [r7, #32]
 80008fc:	4613      	mov	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	009a      	lsls	r2, r3, #2
 8000904:	441a      	add	r2, r3
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000910:	61fb      	str	r3, [r7, #28]
 8000912:	e00b      	b.n	800092c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000914:	6a3a      	ldr	r2, [r7, #32]
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	009a      	lsls	r2, r3, #2
 800091e:	441a      	add	r2, r3
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <USART_Init+0x170>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	095b      	lsrs	r3, r3, #5
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	091b      	lsrs	r3, r3, #4
 800093e:	2264      	movs	r2, #100	; 0x64
 8000940:	fb02 f303 	mul.w	r3, r2, r3
 8000944:	69fa      	ldr	r2, [r7, #28]
 8000946:	1ad3      	subs	r3, r2, r3
 8000948:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	899b      	ldrh	r3, [r3, #12]
 800094e:	b29b      	uxth	r3, r3
 8000950:	b21b      	sxth	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	da0c      	bge.n	8000970 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	3332      	adds	r3, #50	; 0x32
 800095c:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <USART_Init+0x170>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	f003 0307 	and.w	r3, r3, #7
 8000968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800096a:	4313      	orrs	r3, r2
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
 800096e:	e00b      	b.n	8000988 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	3332      	adds	r3, #50	; 0x32
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <USART_Init+0x170>)
 8000978:	fba2 2303 	umull	r2, r3, r2, r3
 800097c:	095b      	lsrs	r3, r3, #5
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000984:	4313      	orrs	r3, r2
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	b29a      	uxth	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	811a      	strh	r2, [r3, #8]
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40011000 	.word	0x40011000
 800099c:	40011400 	.word	0x40011400
 80009a0:	51eb851f 	.word	0x51eb851f

080009a4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009b0:	78fb      	ldrb	r3, [r7, #3]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d008      	beq.n	80009c8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	899b      	ldrh	r3, [r3, #12]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80009c6:	e007      	b.n	80009d8 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	899b      	ldrh	r3, [r3, #12]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	819a      	strh	r2, [r3, #12]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]
 80009f0:	4613      	mov	r3, r2
 80009f2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a08:	887b      	ldrh	r3, [r7, #2]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	095b      	lsrs	r3, r3, #5
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000a12:	887b      	ldrh	r3, [r7, #2]
 8000a14:	f003 031f 	and.w	r3, r3, #31
 8000a18:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d103      	bne.n	8000a32 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	330c      	adds	r3, #12
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e009      	b.n	8000a46 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d103      	bne.n	8000a40 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3310      	adds	r3, #16
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	e002      	b.n	8000a46 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	3314      	adds	r3, #20
 8000a44:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000a46:	787b      	ldrb	r3, [r7, #1]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d006      	beq.n	8000a5a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	6811      	ldr	r1, [r2, #0]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	430a      	orrs	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000a58:	e006      	b.n	8000a68 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	6811      	ldr	r1, [r2, #0]
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	43d2      	mvns	r2, r2
 8000a64:	400a      	ands	r2, r1
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a90:	887b      	ldrh	r3, [r7, #2]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	095b      	lsrs	r3, r3, #5
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d107      	bne.n	8000ac2 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	899b      	ldrh	r3, [r3, #12]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	4013      	ands	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e011      	b.n	8000ae6 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d107      	bne.n	8000ad8 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	8a1b      	ldrh	r3, [r3, #16]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e006      	b.n	8000ae6 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	8a9b      	ldrh	r3, [r3, #20]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000aee:	2201      	movs	r2, #1
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4013      	ands	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <USART_GetITStatus+0xa4>
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000b12:	2301      	movs	r3, #1
 8000b14:	74fb      	strb	r3, [r7, #19]
 8000b16:	e001      	b.n	8000b1c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000b1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */

#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000b30:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <Audio_MAL_IRQHandler+0xdc>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <Audio_MAL_IRQHandler+0xe0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	f7ff fc32 	bl	80003a4 <DMA_GetFlagStatus>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d05e      	beq.n	8000c04 <Audio_MAL_IRQHandler+0xd8>
  {
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000b46:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <Audio_MAL_IRQHandler+0xe4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d04c      	beq.n	8000be8 <Audio_MAL_IRQHandler+0xbc>
    {
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000b4e:	bf00      	nop
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <Audio_MAL_IRQHandler+0xdc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fc0d 	bl	8000374 <DMA_GetCmdStatus>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1f7      	bne.n	8000b50 <Audio_MAL_IRQHandler+0x24>
      {}

      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 8000b60:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <Audio_MAL_IRQHandler+0xdc>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <Audio_MAL_IRQHandler+0xe0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	f7ff fc56 	bl	800041c <DMA_ClearFlag>

      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <Audio_MAL_IRQHandler+0xe8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <Audio_MAL_IRQHandler+0xec>)
 8000b78:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <Audio_MAL_IRQHandler+0xe4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b82:	4293      	cmp	r3, r2
 8000b84:	bf28      	it	cs
 8000b86:	4613      	movcs	r3, r2
 8000b88:	4a23      	ldr	r2, [pc, #140]	; (8000c18 <Audio_MAL_IRQHandler+0xec>)
 8000b8a:	6113      	str	r3, [r2, #16]

      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <Audio_MAL_IRQHandler+0xdc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4921      	ldr	r1, [pc, #132]	; (8000c18 <Audio_MAL_IRQHandler+0xec>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fb7a 	bl	800028c <DMA_Init>

      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <Audio_MAL_IRQHandler+0xdc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fbcc 	bl	800033c <DMA_Cmd>

      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <Audio_MAL_IRQHandler+0xe8>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <Audio_MAL_IRQHandler+0xe4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb0:	d203      	bcs.n	8000bba <Audio_MAL_IRQHandler+0x8e>
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <Audio_MAL_IRQHandler+0xe4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	e000      	b.n	8000bbc <Audio_MAL_IRQHandler+0x90>
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <Audio_MAL_IRQHandler+0xf0>)
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <Audio_MAL_IRQHandler+0xe8>)
 8000bc0:	6013      	str	r3, [r2, #0]

      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <Audio_MAL_IRQHandler+0xe4>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <Audio_MAL_IRQHandler+0xe4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	bf28      	it	cs
 8000bd2:	460b      	movcs	r3, r1
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <Audio_MAL_IRQHandler+0xe4>)
 8000bd8:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <Audio_MAL_IRQHandler+0xdc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2101      	movs	r1, #1
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fbab 	bl	800033c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000be6:	e00d      	b.n	8000c04 <Audio_MAL_IRQHandler+0xd8>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <Audio_MAL_IRQHandler+0xdc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fba4 	bl	800033c <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <Audio_MAL_IRQHandler+0xdc>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <Audio_MAL_IRQHandler+0xe0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4610      	mov	r0, r2
 8000c00:	f7ff fc0c 	bl	800041c <DMA_ClearFlag>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000018 	.word	0x20000018
 8000c0c:	2000001c 	.word	0x2000001c
 8000c10:	20000010 	.word	0x20000010
 8000c14:	20000044 	.word	0x20000044
 8000c18:	20000084 	.word	0x20000084
 8000c1c:	0001fffe 	.word	0x0001fffe

08000c20 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000c24:	f7ff ff82 	bl	8000b2c <Audio_MAL_IRQHandler>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000c30:	f7ff ff7c 	bl	8000b2c <Audio_MAL_IRQHandler>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <SPI3_IRQHandler+0x1c>)
 8000c40:	f7ff fdda 	bl	80007f8 <SPI_I2S_GetFlagStatus>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SPI3_IRQHandler+0x16>
  {
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000c4a:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <SPI3_IRQHandler+0x20>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
    }

    /* Send dummy data on I2S to avoid the underrun condition */
		//SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack());
  }
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40003c00 	.word	0x40003c00
 8000c58:	20000014 	.word	0x20000014

08000c5c <delay_>:
 *      Author: lucasadam33400
 */

#include <stdint.h>

void delay_(uint32_t val) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	for (uint32_t i = val * 10000; i > 0; i--)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c6a:	fb02 f303 	mul.w	r3, r2, r3
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	e002      	b.n	8000c78 <delay_+0x1c>
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f9      	bne.n	8000c72 <delay_+0x16>
		;
}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <main>:
#include "serial.h"
#include "space_invaders.h"
#include "timer.h"
#include "delay.h"

int main(void) {
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0

	init_sprites();
 8000c8e:	f000 f8dd 	bl	8000e4c <init_sprites>
	init_screen();
 8000c92:	f000 fa1f 	bl	80010d4 <init_screen>

	charge_level(MENU);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 fe52 	bl	8001940 <charge_level>

	while (1) {
		delay_(25);
 8000c9c:	2019      	movs	r0, #25
 8000c9e:	f7ff ffdd 	bl	8000c5c <delay_>

		scroll_shoot();
 8000ca2:	f000 fbd7 	bl	8001454 <scroll_shoot>

		compute_keyboard();
 8000ca6:	f000 fa23 	bl	80010f0 <compute_keyboard>
		delay_(25);
 8000caa:	e7f7      	b.n	8000c9c <main+0x12>

08000cac <serial_init>:

static volatile unsigned char last_char_read = 1;
static volatile char last_char;

void serial_init(const uint32_t baudrate)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Use USART2 with PA2 and PA3 */

	/* Enable clock for GPIOA and USART */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000cba:	f7ff fd7d 	bl	80007b8 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fd59 	bl	8000778 <RCC_AHB1PeriphClockCmd>

	/* Init GPIOA 2 and 3 as alternate functions */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	481c      	ldr	r0, [pc, #112]	; (8000d5c <serial_init+0xb0>)
 8000cea:	f7ff fbc5 	bl	8000478 <GPIO_Init>

	/* Connect TX and RX pints to their alternate function pins */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8000cee:	2207      	movs	r2, #7
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	481a      	ldr	r0, [pc, #104]	; (8000d5c <serial_init+0xb0>)
 8000cf4:	f7ff fc4e 	bl	8000594 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	4817      	ldr	r0, [pc, #92]	; (8000d5c <serial_init+0xb0>)
 8000cfe:	f7ff fc49 	bl	8000594 <GPIO_PinAFConfig>

	/* Configure USART parameters */
	USART_InitStruct.USART_BaudRate = baudrate;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000d06:	2300      	movs	r3, #0
 8000d08:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	837b      	strh	r3, [r7, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000d16:	2300      	movs	r3, #0
 8000d18:	82bb      	strh	r3, [r7, #20]
	USART_Init(USART2, &USART_InitStruct);
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480f      	ldr	r0, [pc, #60]	; (8000d60 <serial_init+0xb4>)
 8000d22:	f7ff fd85 	bl	8000830 <USART_Init>

	/* Configure interruption */
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000d26:	2201      	movs	r2, #1
 8000d28:	f240 5125 	movw	r1, #1317	; 0x525
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <serial_init+0xb4>)
 8000d2e:	f7ff fe59 	bl	80009e4 <USART_ITConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000d32:	2326      	movs	r3, #38	; 0x26
 8000d34:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fa3e 	bl	80001c8 <NVIC_Init>

	USART_Cmd(USART2, ENABLE);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4804      	ldr	r0, [pc, #16]	; (8000d60 <serial_init+0xb4>)
 8000d50:	f7ff fe28 	bl	80009a4 <USART_Cmd>
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40004400 	.word	0x40004400

08000d64 <serial_putchar>:

void serial_putchar(const volatile char c)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	/* Check USART */
	if ((USART2->CR1 & USART_CR1_UE))
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <serial_putchar+0x50>)
 8000d70:	899b      	ldrh	r3, [r3, #12]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d014      	beq.n	8000da6 <serial_putchar+0x42>
	{
		/* Wait to be ready, buffer empty */
		while (!(USART2->SR & USART_FLAG_TXE))
 8000d7c:	bf00      	nop
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <serial_putchar+0x50>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0f8      	beq.n	8000d7e <serial_putchar+0x1a>
			;
		/* Send data */
		USART2->DR = (uint16_t) (c & 0x01FF);
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <serial_putchar+0x50>)
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	b292      	uxth	r2, r2
 8000d94:	809a      	strh	r2, [r3, #4]
		/* Wait to be ready, buffer empty */
		while (!(USART2->SR & USART_FLAG_TXE))
 8000d96:	bf00      	nop
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <serial_putchar+0x50>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f8      	beq.n	8000d98 <serial_putchar+0x34>
			;
	}
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40004400 	.word	0x40004400

08000db8 <serial_get_last_char>:
	while (*s)
		serial_putchar(*s++);
}

signed char serial_get_last_char(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
	if (last_char_read)
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <serial_get_last_char+0x2c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <serial_get_last_char+0x14>
		return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e006      	b.n	8000dda <serial_get_last_char+0x22>
	else
	{
		last_char_read = 1;
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <serial_get_last_char+0x2c>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
		return last_char;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <serial_get_last_char+0x30>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	b25b      	sxtb	r3, r3
	}
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	20000020 	.word	0x20000020
 8000de8:	20000040 	.word	0x20000040

08000dec <serial_input_not_empty>:

/* interruption management */

static int32_t serial_input_not_empty(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	return USART_GetITStatus(USART2, USART_IT_RXNE);
 8000df0:	f240 5125 	movw	r1, #1317	; 0x525
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <serial_input_not_empty+0x14>)
 8000df6:	f7ff fe3d 	bl	8000a74 <USART_GetITStatus>
 8000dfa:	4603      	mov	r3, r0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40004400 	.word	0x40004400

08000e04 <serial_input_character>:

static char serial_input_character(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
	return USART2->DR;
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <serial_input_character+0x18>)
 8000e0a:	889b      	ldrh	r3, [r3, #4]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40004400 	.word	0x40004400

08000e20 <USART2_IRQHandler>:

#define serial_it_handler USART2_IRQHandler
void serial_it_handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	if (serial_input_not_empty())
 8000e24:	f7ff ffe2 	bl	8000dec <serial_input_not_empty>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d008      	beq.n	8000e40 <USART2_IRQHandler+0x20>
	{
		last_char = serial_input_character();
 8000e2e:	f7ff ffe9 	bl	8000e04 <serial_input_character>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <USART2_IRQHandler+0x24>)
 8000e38:	701a      	strb	r2, [r3, #0]
		last_char_read = 0;
 8000e3a:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <USART2_IRQHandler+0x28>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
	}
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000040 	.word	0x20000040
 8000e48:	20000020 	.word	0x20000020

08000e4c <init_sprites>:

shoot shoot_list[SHOOT_AMOUNT];

shoot spaceship_shoot, ennemy_1_shoot, ennemy_2_shoot, ennemy_3_shoot;

void init_sprites(void) {
 8000e4c:	b490      	push	{r4, r7}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0

	_spaceship.life = SPACESHIP_LIFE_MAX;
 8000e52:	4b92      	ldr	r3, [pc, #584]	; (800109c <init_sprites+0x250>)
 8000e54:	2203      	movs	r2, #3
 8000e56:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SPACESHIP_WIDTH; i++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	e00c      	b.n	8000e78 <init_sprites+0x2c>
		_spaceship.appearance[i] = spaceship_appearance[i];
 8000e5e:	4a90      	ldr	r2, [pc, #576]	; (80010a0 <init_sprites+0x254>)
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	4413      	add	r3, r2
 8000e64:	7819      	ldrb	r1, [r3, #0]
 8000e66:	4a8d      	ldr	r2, [pc, #564]	; (800109c <init_sprites+0x250>)
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	460a      	mov	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SPACESHIP_WIDTH; i++)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3301      	adds	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	ddef      	ble.n	8000e5e <init_sprites+0x12>
	_spaceship.x = VT100_SCREEN_XMAX / 2;
 8000e7e:	4b87      	ldr	r3, [pc, #540]	; (800109c <init_sprites+0x250>)
 8000e80:	2228      	movs	r2, #40	; 0x28
 8000e82:	711a      	strb	r2, [r3, #4]
	_spaceship.y = VT100_SCREEN_YMAX;
 8000e84:	4b85      	ldr	r3, [pc, #532]	; (800109c <init_sprites+0x250>)
 8000e86:	2218      	movs	r2, #24
 8000e88:	715a      	strb	r2, [r3, #5]

	spaceship_shoot.appearance = SPACESHIP_SHOOT;
 8000e8a:	4b86      	ldr	r3, [pc, #536]	; (80010a4 <init_sprites+0x258>)
 8000e8c:	227c      	movs	r2, #124	; 0x7c
 8000e8e:	701a      	strb	r2, [r3, #0]
	spaceship_shoot.exist = TRUE;
 8000e90:	4b84      	ldr	r3, [pc, #528]	; (80010a4 <init_sprites+0x258>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	711a      	strb	r2, [r3, #4]

	ennemy_1.type = ENNEMY_TYPE_1;
 8000e96:	4b84      	ldr	r3, [pc, #528]	; (80010a8 <init_sprites+0x25c>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
	ennemy_1.life = ENNEMY_LIFE_MIN;
 8000e9c:	4b82      	ldr	r3, [pc, #520]	; (80010a8 <init_sprites+0x25c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < ENNEMY_WIDTH; i++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	e00c      	b.n	8000ec2 <init_sprites+0x76>
		ennemy_1.appearance[i] = ennemy_appearances[0][i];
 8000ea8:	4a80      	ldr	r2, [pc, #512]	; (80010ac <init_sprites+0x260>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	4413      	add	r3, r2
 8000eae:	7819      	ldrb	r1, [r3, #0]
 8000eb0:	4a7d      	ldr	r2, [pc, #500]	; (80010a8 <init_sprites+0x25c>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	3303      	adds	r3, #3
 8000eb8:	460a      	mov	r2, r1
 8000eba:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ENNEMY_WIDTH; i++)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	ddef      	ble.n	8000ea8 <init_sprites+0x5c>
	ennemy_1.shoot_type = ENNEMY_SHOOT_TYPE_1;
 8000ec8:	4b77      	ldr	r3, [pc, #476]	; (80010a8 <init_sprites+0x25c>)
 8000eca:	2223      	movs	r2, #35	; 0x23
 8000ecc:	709a      	strb	r2, [r3, #2]
	ennemy_1.exist = TRUE;
 8000ece:	4b76      	ldr	r3, [pc, #472]	; (80010a8 <init_sprites+0x25c>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	721a      	strb	r2, [r3, #8]

	ennemy_1_shoot.appearance = ENNEMY_SHOOT_TYPE_1;
 8000ed4:	4b76      	ldr	r3, [pc, #472]	; (80010b0 <init_sprites+0x264>)
 8000ed6:	2223      	movs	r2, #35	; 0x23
 8000ed8:	701a      	strb	r2, [r3, #0]
	ennemy_1_shoot.exist = TRUE;
 8000eda:	4b75      	ldr	r3, [pc, #468]	; (80010b0 <init_sprites+0x264>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	711a      	strb	r2, [r3, #4]

	ennemy_2.type = ENNEMY_TYPE_2;
 8000ee0:	4b74      	ldr	r3, [pc, #464]	; (80010b4 <init_sprites+0x268>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	701a      	strb	r2, [r3, #0]
	ennemy_2.life = ENNEMY_LIFE_MIN;
 8000ee6:	4b73      	ldr	r3, [pc, #460]	; (80010b4 <init_sprites+0x268>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < ENNEMY_WIDTH; i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00d      	b.n	8000f0e <init_sprites+0xc2>
		ennemy_2.appearance[i] = ennemy_appearances[1][i];
 8000ef2:	4a6e      	ldr	r2, [pc, #440]	; (80010ac <init_sprites+0x260>)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3303      	adds	r3, #3
 8000efa:	7819      	ldrb	r1, [r3, #0]
 8000efc:	4a6d      	ldr	r2, [pc, #436]	; (80010b4 <init_sprites+0x268>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	4413      	add	r3, r2
 8000f02:	3303      	adds	r3, #3
 8000f04:	460a      	mov	r2, r1
 8000f06:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ENNEMY_WIDTH; i++)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	ddee      	ble.n	8000ef2 <init_sprites+0xa6>
	ennemy_2.shoot_type = ENNEMY_SHOOT_TYPE_2;
 8000f14:	4b67      	ldr	r3, [pc, #412]	; (80010b4 <init_sprites+0x268>)
 8000f16:	222a      	movs	r2, #42	; 0x2a
 8000f18:	709a      	strb	r2, [r3, #2]
	ennemy_2.exist = TRUE;
 8000f1a:	4b66      	ldr	r3, [pc, #408]	; (80010b4 <init_sprites+0x268>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	721a      	strb	r2, [r3, #8]

	ennemy_2_shoot.appearance = ENNEMY_SHOOT_TYPE_2;
 8000f20:	4b65      	ldr	r3, [pc, #404]	; (80010b8 <init_sprites+0x26c>)
 8000f22:	222a      	movs	r2, #42	; 0x2a
 8000f24:	701a      	strb	r2, [r3, #0]
	ennemy_2_shoot.exist = TRUE;
 8000f26:	4b64      	ldr	r3, [pc, #400]	; (80010b8 <init_sprites+0x26c>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	711a      	strb	r2, [r3, #4]

	ennemy_3.type = ENNEMY_TYPE_3;
 8000f2c:	4b63      	ldr	r3, [pc, #396]	; (80010bc <init_sprites+0x270>)
 8000f2e:	2203      	movs	r2, #3
 8000f30:	701a      	strb	r2, [r3, #0]
	ennemy_3.life = ENNEMY_LIFE_MIN;
 8000f32:	4b62      	ldr	r3, [pc, #392]	; (80010bc <init_sprites+0x270>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < ENNEMY_WIDTH; i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	e00d      	b.n	8000f5a <init_sprites+0x10e>
		ennemy_3.appearance[i] = ennemy_appearances[2][i];
 8000f3e:	4a5b      	ldr	r2, [pc, #364]	; (80010ac <init_sprites+0x260>)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4413      	add	r3, r2
 8000f44:	3306      	adds	r3, #6
 8000f46:	7819      	ldrb	r1, [r3, #0]
 8000f48:	4a5c      	ldr	r2, [pc, #368]	; (80010bc <init_sprites+0x270>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3303      	adds	r3, #3
 8000f50:	460a      	mov	r2, r1
 8000f52:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ENNEMY_WIDTH; i++)
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	3301      	adds	r3, #1
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	ddee      	ble.n	8000f3e <init_sprites+0xf2>
	ennemy_3.shoot_type = ENNEMY_SHOOT_TYPE_3;
 8000f60:	4b56      	ldr	r3, [pc, #344]	; (80010bc <init_sprites+0x270>)
 8000f62:	222d      	movs	r2, #45	; 0x2d
 8000f64:	709a      	strb	r2, [r3, #2]
	ennemy_3.exist = TRUE;
 8000f66:	4b55      	ldr	r3, [pc, #340]	; (80010bc <init_sprites+0x270>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	721a      	strb	r2, [r3, #8]

	ennemy_3_shoot.appearance = ENNEMY_SHOOT_TYPE_3;
 8000f6c:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <init_sprites+0x274>)
 8000f6e:	222d      	movs	r2, #45	; 0x2d
 8000f70:	701a      	strb	r2, [r3, #0]
	ennemy_3_shoot.exist = TRUE;
 8000f72:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <init_sprites+0x274>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	711a      	strb	r2, [r3, #4]

	for (int j = 0; j < 4; j++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	e038      	b.n	8000ff0 <init_sprites+0x1a4>
		for (int k = 0; k < (ENNEMY_AMOUNT / 8) * ENNEMY_WIDTH; k++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	e02f      	b.n	8000fe4 <init_sprites+0x198>
			ennemy_group[0][k + j] = ennemy_1;
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	441a      	add	r2, r3
 8000f8a:	494e      	ldr	r1, [pc, #312]	; (80010c4 <init_sprites+0x278>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4413      	add	r3, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	4a44      	ldr	r2, [pc, #272]	; (80010a8 <init_sprites+0x25c>)
 8000f96:	6810      	ldr	r0, [r2, #0]
 8000f98:	6851      	ldr	r1, [r2, #4]
 8000f9a:	6018      	str	r0, [r3, #0]
 8000f9c:	6059      	str	r1, [r3, #4]
 8000f9e:	7a12      	ldrb	r2, [r2, #8]
 8000fa0:	721a      	strb	r2, [r3, #8]
			ennemy_group[0][k + j].x = k + VT100_SCREEN_XMIN;
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	441a      	add	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2d8      	uxtb	r0, r3
 8000fb0:	4944      	ldr	r1, [pc, #272]	; (80010c4 <init_sprites+0x278>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	3306      	adds	r3, #6
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	701a      	strb	r2, [r3, #0]
			ennemy_group[0][k + j].y = j + VT100_SCREEN_YMIN;
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	441a      	add	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b2d8      	uxtb	r0, r3
 8000fce:	493d      	ldr	r1, [pc, #244]	; (80010c4 <init_sprites+0x278>)
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	3307      	adds	r3, #7
 8000fda:	4602      	mov	r2, r0
 8000fdc:	701a      	strb	r2, [r3, #0]
		for (int k = 0; k < (ENNEMY_AMOUNT / 8) * ENNEMY_WIDTH; k++) {
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b0b      	cmp	r3, #11
 8000fe8:	ddcc      	ble.n	8000f84 <init_sprites+0x138>
	for (int j = 0; j < 4; j++) {
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3301      	adds	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	ddc3      	ble.n	8000f7e <init_sprites+0x132>
		}
	}

	shield_part._object = SHIELD;
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <init_sprites+0x27c>)
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	705a      	strb	r2, [r3, #1]
	shield_part.exist = TRUE;
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <init_sprites+0x27c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	711a      	strb	r2, [r3, #4]

	for (int i = 0; i < SHIELD_HEIGHT; i++) {
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	e040      	b.n	800108a <init_sprites+0x23e>
		for (int j = 0; j < SHIELD_WIDTH; j++) {
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	e037      	b.n	800107e <init_sprites+0x232>
			if (shield_appearance[i][j] != ' ') {
 800100e:	492f      	ldr	r1, [pc, #188]	; (80010cc <init_sprites+0x280>)
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	18ca      	adds	r2, r1, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b20      	cmp	r3, #32
 8001022:	d029      	beq.n	8001078 <init_sprites+0x22c>
				shield[i][j] = shield_part;
 8001024:	482a      	ldr	r0, [pc, #168]	; (80010d0 <init_sprites+0x284>)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	461a      	mov	r2, r3
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	441a      	add	r2, r3
 8001030:	460b      	mov	r3, r1
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	00d9      	lsls	r1, r3, #3
 8001038:	1ac9      	subs	r1, r1, r3
 800103a:	1853      	adds	r3, r2, r1
 800103c:	4403      	add	r3, r0
 800103e:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <init_sprites+0x27c>)
 8001040:	6811      	ldr	r1, [r2, #0]
 8001042:	6019      	str	r1, [r3, #0]
 8001044:	7912      	ldrb	r2, [r2, #4]
 8001046:	711a      	strb	r2, [r3, #4]
				shield[i][j].appearance = shield_appearance[i][j];
 8001048:	4920      	ldr	r1, [pc, #128]	; (80010cc <init_sprites+0x280>)
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	1a9b      	subs	r3, r3, r2
 8001052:	18ca      	adds	r2, r1, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	4413      	add	r3, r2
 8001058:	781c      	ldrb	r4, [r3, #0]
 800105a:	481d      	ldr	r0, [pc, #116]	; (80010d0 <init_sprites+0x284>)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	461a      	mov	r2, r3
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	441a      	add	r2, r3
 8001066:	460b      	mov	r3, r1
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	00d9      	lsls	r1, r3, #3
 800106e:	1ac9      	subs	r1, r1, r3
 8001070:	1853      	adds	r3, r2, r1
 8001072:	4403      	add	r3, r0
 8001074:	4622      	mov	r2, r4
 8001076:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < SHIELD_WIDTH; j++) {
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b06      	cmp	r3, #6
 8001082:	ddc4      	ble.n	800100e <init_sprites+0x1c2>
	for (int i = 0; i < SHIELD_HEIGHT; i++) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b03      	cmp	r3, #3
 800108e:	ddbb      	ble.n	8001008 <init_sprites+0x1bc>
			}
		}
	}

	//init_tim_base(TIMER_2, 0x00ff);
}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bc90      	pop	{r4, r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	200000c0 	.word	0x200000c0
 80010a0:	08001f6c 	.word	0x08001f6c
 80010a4:	2000011c 	.word	0x2000011c
 80010a8:	20000100 	.word	0x20000100
 80010ac:	08001f70 	.word	0x08001f70
 80010b0:	200006c8 	.word	0x200006c8
 80010b4:	200006d0 	.word	0x200006d0
 80010b8:	20000114 	.word	0x20000114
 80010bc:	20000630 	.word	0x20000630
 80010c0:	2000010c 	.word	0x2000010c
 80010c4:	20000124 	.word	0x20000124
 80010c8:	20000484 	.word	0x20000484
 80010cc:	08001f7c 	.word	0x08001f7c
 80010d0:	2000063c 	.word	0x2000063c

080010d4 <init_screen>:

void init_screen(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	serial_init(SERIAL_BAUD);
 80010d8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80010dc:	f7ff fde6 	bl	8000cac <serial_init>

	vt100_move(0, 0);
 80010e0:	2100      	movs	r1, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 fe74 	bl	8001dd0 <vt100_move>
	vt100_clear_screen();
 80010e8:	f000 feee 	bl	8001ec8 <vt100_clear_screen>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <compute_keyboard>:

void compute_keyboard(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	uint8_t _char = serial_get_last_char();
 80010f6:	f7ff fe5f 	bl	8000db8 <serial_get_last_char>
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	if (_char == 'p') {
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b70      	cmp	r3, #112	; 0x70
 8001102:	d101      	bne.n	8001108 <compute_keyboard+0x18>
		toggle_pause();
 8001104:	f000 fc44 	bl	8001990 <toggle_pause>
	}
	if (!(keyboard_flags & KFPAUS)) {
 8001108:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <compute_keyboard+0xd4>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d152      	bne.n	80011ba <compute_keyboard+0xca>
		switch (_char) {
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b64      	cmp	r3, #100	; 0x64
 8001118:	d013      	beq.n	8001142 <compute_keyboard+0x52>
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	dc04      	bgt.n	8001128 <compute_keyboard+0x38>
 800111e:	2b0d      	cmp	r3, #13
 8001120:	d017      	beq.n	8001152 <compute_keyboard+0x62>
 8001122:	2b63      	cmp	r3, #99	; 0x63
 8001124:	d028      	beq.n	8001178 <compute_keyboard+0x88>
			charge_level(lev_num_flag);

			break;
		}
	}
}
 8001126:	e048      	b.n	80011ba <compute_keyboard+0xca>
		switch (_char) {
 8001128:	2b6c      	cmp	r3, #108	; 0x6c
 800112a:	d02f      	beq.n	800118c <compute_keyboard+0x9c>
 800112c:	2b71      	cmp	r3, #113	; 0x71
 800112e:	d000      	beq.n	8001132 <compute_keyboard+0x42>
}
 8001130:	e043      	b.n	80011ba <compute_keyboard+0xca>
			if (lev_num_flag != MENU) {
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <compute_keyboard+0xd8>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d03c      	beq.n	80011b4 <compute_keyboard+0xc4>
				scroll_spaceship(LEFT);
 800113a:	2000      	movs	r0, #0
 800113c:	f000 f894 	bl	8001268 <scroll_spaceship>
			break;
 8001140:	e038      	b.n	80011b4 <compute_keyboard+0xc4>
			if (lev_num_flag != MENU) {
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <compute_keyboard+0xd8>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d036      	beq.n	80011b8 <compute_keyboard+0xc8>
				scroll_spaceship(RIGHT);
 800114a:	2001      	movs	r0, #1
 800114c:	f000 f88c 	bl	8001268 <scroll_spaceship>
			break;
 8001150:	e032      	b.n	80011b8 <compute_keyboard+0xc8>
			if (lev_num_flag != MENU) {
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <compute_keyboard+0xd8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00a      	beq.n	8001170 <compute_keyboard+0x80>
				init_shoot(SPACESHIP, _spaceship.x, _spaceship.y - 1);
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <compute_keyboard+0xdc>)
 800115c:	7919      	ldrb	r1, [r3, #4]
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <compute_keyboard+0xdc>)
 8001160:	795b      	ldrb	r3, [r3, #5]
 8001162:	3b01      	subs	r3, #1
 8001164:	b2db      	uxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	2000      	movs	r0, #0
 800116a:	f000 f8ad 	bl	80012c8 <init_shoot>
			break;
 800116e:	e024      	b.n	80011ba <compute_keyboard+0xca>
				charge_level(LEVEL_1);
 8001170:	2001      	movs	r0, #1
 8001172:	f000 fbe5 	bl	8001940 <charge_level>
			break;
 8001176:	e020      	b.n	80011ba <compute_keyboard+0xca>
			init_sprites();
 8001178:	f7ff fe68 	bl	8000e4c <init_sprites>
			init_screen();
 800117c:	f7ff ffaa 	bl	80010d4 <init_screen>
			charge_level(lev_num_flag);
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <compute_keyboard+0xd8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fbdb 	bl	8001940 <charge_level>
			break;
 800118a:	e016      	b.n	80011ba <compute_keyboard+0xca>
			if (lev_num_flag != LEVEL_3 + 1)
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <compute_keyboard+0xd8>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b04      	cmp	r3, #4
 8001192:	d006      	beq.n	80011a2 <compute_keyboard+0xb2>
				lev_num_flag++;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <compute_keyboard+0xd8>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <compute_keyboard+0xd8>)
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e002      	b.n	80011a8 <compute_keyboard+0xb8>
				lev_num_flag = LEVEL_1;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <compute_keyboard+0xd8>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
			charge_level(lev_num_flag);
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <compute_keyboard+0xd8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fbc7 	bl	8001940 <charge_level>
			break;
 80011b2:	e002      	b.n	80011ba <compute_keyboard+0xca>
			break;
 80011b4:	bf00      	nop
 80011b6:	e000      	b.n	80011ba <compute_keyboard+0xca>
			break;
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000c6 	.word	0x200000c6
 80011c8:	200000c7 	.word	0x200000c7
 80011cc:	200000c0 	.word	0x200000c0

080011d0 <init_spaceship>:

void init_spaceship(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	for (int i = 0; i < SPACESHIP_WIDTH; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	e018      	b.n	800120e <init_spaceship+0x3e>
		vt100_move(_spaceship.x + i - (SPACESHIP_WIDTH / 2), _spaceship.y);
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <init_spaceship+0x4c>)
 80011de:	791a      	ldrb	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3b01      	subs	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <init_spaceship+0x4c>)
 80011ee:	795b      	ldrb	r3, [r3, #5]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f000 fdec 	bl	8001dd0 <vt100_move>
		serial_putchar(_spaceship.appearance[i]);
 80011f8:	4a08      	ldr	r2, [pc, #32]	; (800121c <init_spaceship+0x4c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	3301      	adds	r3, #1
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fdae 	bl	8000d64 <serial_putchar>
	for (int i = 0; i < SPACESHIP_WIDTH; i++) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b02      	cmp	r3, #2
 8001212:	dde3      	ble.n	80011dc <init_spaceship+0xc>
	}
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200000c0 	.word	0x200000c0

08001220 <erase_spaceship>:

void erase_spaceship(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
	for (int i = 0; i < SPACESHIP_WIDTH; i++) {
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	e013      	b.n	8001254 <erase_spaceship+0x34>
		vt100_move(_spaceship.x + i - (SPACESHIP_WIDTH / 2), _spaceship.y);
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <erase_spaceship+0x44>)
 800122e:	791a      	ldrb	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4413      	add	r3, r2
 8001236:	b2db      	uxtb	r3, r3
 8001238:	3b01      	subs	r3, #1
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <erase_spaceship+0x44>)
 800123e:	795b      	ldrb	r3, [r3, #5]
 8001240:	4619      	mov	r1, r3
 8001242:	4610      	mov	r0, r2
 8001244:	f000 fdc4 	bl	8001dd0 <vt100_move>
		serial_putchar(' ');
 8001248:	2020      	movs	r0, #32
 800124a:	f7ff fd8b 	bl	8000d64 <serial_putchar>
	for (int i = 0; i < SPACESHIP_WIDTH; i++) {
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3301      	adds	r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b02      	cmp	r3, #2
 8001258:	dde8      	ble.n	800122c <erase_spaceship+0xc>
	}

}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200000c0 	.word	0x200000c0

08001268 <scroll_spaceship>:

void scroll_spaceship(side _side) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	switch (_side) {
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <scroll_spaceship+0x16>
 8001278:	2b01      	cmp	r3, #1
 800127a:	d00f      	beq.n	800129c <scroll_spaceship+0x34>
			_spaceship.x++;
		init_spaceship();
		break;
	}

}
 800127c:	e01d      	b.n	80012ba <scroll_spaceship+0x52>
		erase_spaceship();
 800127e:	f7ff ffcf 	bl	8001220 <erase_spaceship>
		if (_spaceship.x > VT100_SCREEN_XMIN + (SPACESHIP_WIDTH / 2))
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <scroll_spaceship+0x5c>)
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d905      	bls.n	8001296 <scroll_spaceship+0x2e>
			_spaceship.x--;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <scroll_spaceship+0x5c>)
 800128c:	791b      	ldrb	r3, [r3, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <scroll_spaceship+0x5c>)
 8001294:	711a      	strb	r2, [r3, #4]
		init_spaceship();
 8001296:	f7ff ff9b 	bl	80011d0 <init_spaceship>
		break;
 800129a:	e00e      	b.n	80012ba <scroll_spaceship+0x52>
		erase_spaceship();
 800129c:	f7ff ffc0 	bl	8001220 <erase_spaceship>
		if (_spaceship.x < VT100_SCREEN_XMAX - (SPACESHIP_WIDTH / 2))
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <scroll_spaceship+0x5c>)
 80012a2:	791b      	ldrb	r3, [r3, #4]
 80012a4:	2b4e      	cmp	r3, #78	; 0x4e
 80012a6:	d805      	bhi.n	80012b4 <scroll_spaceship+0x4c>
			_spaceship.x++;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <scroll_spaceship+0x5c>)
 80012aa:	791b      	ldrb	r3, [r3, #4]
 80012ac:	3301      	adds	r3, #1
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <scroll_spaceship+0x5c>)
 80012b2:	711a      	strb	r2, [r3, #4]
		init_spaceship();
 80012b4:	f7ff ff8c 	bl	80011d0 <init_spaceship>
		break;
 80012b8:	bf00      	nop
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200000c0 	.word	0x200000c0

080012c8 <init_shoot>:

void init_shoot(object _object, uint8_t x, uint8_t y) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	460b      	mov	r3, r1
 80012d4:	71bb      	strb	r3, [r7, #6]
 80012d6:	4613      	mov	r3, r2
 80012d8:	717b      	strb	r3, [r7, #5]

	switch (_object) {
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d845      	bhi.n	800136c <init_shoot+0xa4>
 80012e0:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <init_shoot+0x20>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	080012fd 	.word	0x080012fd
 80012ec:	08001319 	.word	0x08001319
 80012f0:	08001335 	.word	0x08001335
 80012f4:	08001351 	.word	0x08001351
 80012f8:	0800136d 	.word	0x0800136d
	case SPACESHIP:
		shoot_list[shoot_index] = spaceship_shoot;
 80012fc:	4b44      	ldr	r3, [pc, #272]	; (8001410 <init_shoot+0x148>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	4a44      	ldr	r2, [pc, #272]	; (8001414 <init_shoot+0x14c>)
 8001304:	460b      	mov	r3, r1
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	4413      	add	r3, r2
 800130c:	4a42      	ldr	r2, [pc, #264]	; (8001418 <init_shoot+0x150>)
 800130e:	6811      	ldr	r1, [r2, #0]
 8001310:	6019      	str	r1, [r3, #0]
 8001312:	7912      	ldrb	r2, [r2, #4]
 8001314:	711a      	strb	r2, [r3, #4]
		break;
 8001316:	e029      	b.n	800136c <init_shoot+0xa4>
	case ENNEMY_TYPE_1:
		shoot_list[shoot_index] = ennemy_1_shoot;
 8001318:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <init_shoot+0x148>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	4a3d      	ldr	r2, [pc, #244]	; (8001414 <init_shoot+0x14c>)
 8001320:	460b      	mov	r3, r1
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	4413      	add	r3, r2
 8001328:	4a3c      	ldr	r2, [pc, #240]	; (800141c <init_shoot+0x154>)
 800132a:	6811      	ldr	r1, [r2, #0]
 800132c:	6019      	str	r1, [r3, #0]
 800132e:	7912      	ldrb	r2, [r2, #4]
 8001330:	711a      	strb	r2, [r3, #4]
		break;
 8001332:	e01b      	b.n	800136c <init_shoot+0xa4>
	case ENNEMY_TYPE_2:
		shoot_list[shoot_index] = ennemy_2_shoot;
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <init_shoot+0x148>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	4a36      	ldr	r2, [pc, #216]	; (8001414 <init_shoot+0x14c>)
 800133c:	460b      	mov	r3, r1
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	4413      	add	r3, r2
 8001344:	4a36      	ldr	r2, [pc, #216]	; (8001420 <init_shoot+0x158>)
 8001346:	6811      	ldr	r1, [r2, #0]
 8001348:	6019      	str	r1, [r3, #0]
 800134a:	7912      	ldrb	r2, [r2, #4]
 800134c:	711a      	strb	r2, [r3, #4]
		break;
 800134e:	e00d      	b.n	800136c <init_shoot+0xa4>
	case ENNEMY_TYPE_3:
		shoot_list[shoot_index] = ennemy_3_shoot;
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <init_shoot+0x148>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	4a2f      	ldr	r2, [pc, #188]	; (8001414 <init_shoot+0x14c>)
 8001358:	460b      	mov	r3, r1
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	4413      	add	r3, r2
 8001360:	4a30      	ldr	r2, [pc, #192]	; (8001424 <init_shoot+0x15c>)
 8001362:	6811      	ldr	r1, [r2, #0]
 8001364:	6019      	str	r1, [r3, #0]
 8001366:	7912      	ldrb	r2, [r2, #4]
 8001368:	711a      	strb	r2, [r3, #4]
		break;
 800136a:	bf00      	nop
	case SHIELD:
		/* nothing to do */
		break;
	}

	shoot_list[shoot_index].x = x;
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <init_shoot+0x148>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	4a28      	ldr	r2, [pc, #160]	; (8001414 <init_shoot+0x14c>)
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	4413      	add	r3, r2
 800137c:	3302      	adds	r3, #2
 800137e:	79ba      	ldrb	r2, [r7, #6]
 8001380:	701a      	strb	r2, [r3, #0]
	shoot_list[shoot_index].y = y;
 8001382:	4b23      	ldr	r3, [pc, #140]	; (8001410 <init_shoot+0x148>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <init_shoot+0x14c>)
 800138a:	460b      	mov	r3, r1
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	4413      	add	r3, r2
 8001392:	3303      	adds	r3, #3
 8001394:	797a      	ldrb	r2, [r7, #5]
 8001396:	701a      	strb	r2, [r3, #0]

	vt100_move(shoot_list[shoot_index].x, shoot_list[shoot_index].y);
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <init_shoot+0x148>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <init_shoot+0x14c>)
 80013a0:	460b      	mov	r3, r1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	4413      	add	r3, r2
 80013a8:	3302      	adds	r3, #2
 80013aa:	7818      	ldrb	r0, [r3, #0]
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <init_shoot+0x148>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <init_shoot+0x14c>)
 80013b4:	460b      	mov	r3, r1
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	4413      	add	r3, r2
 80013bc:	3303      	adds	r3, #3
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f000 fd05 	bl	8001dd0 <vt100_move>
	serial_putchar(shoot_list[shoot_index].appearance);
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <init_shoot+0x148>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4a11      	ldr	r2, [pc, #68]	; (8001414 <init_shoot+0x14c>)
 80013ce:	460b      	mov	r3, r1
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fcc3 	bl	8000d64 <serial_putchar>

	shoot_index++;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <init_shoot+0x148>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <init_shoot+0x148>)
 80013e8:	701a      	strb	r2, [r3, #0]
	shoot_index %= SHOOT_AMOUNT;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <init_shoot+0x148>)
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <init_shoot+0x160>)
 80013f0:	fba3 1302 	umull	r1, r3, r3, r2
 80013f4:	08d9      	lsrs	r1, r3, #3
 80013f6:	460b      	mov	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b03      	ldr	r3, [pc, #12]	; (8001410 <init_shoot+0x148>)
 8001404:	701a      	strb	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200000c9 	.word	0x200000c9
 8001414:	200000cc 	.word	0x200000cc
 8001418:	2000011c 	.word	0x2000011c
 800141c:	200006c8 	.word	0x200006c8
 8001420:	20000114 	.word	0x20000114
 8001424:	2000010c 	.word	0x2000010c
 8001428:	cccccccd 	.word	0xcccccccd

0800142c <erase_shoot>:

void erase_shoot(shoot *_shoot) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	vt100_move(_shoot->x, _shoot->y);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	789a      	ldrb	r2, [r3, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	78db      	ldrb	r3, [r3, #3]
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f000 fcc6 	bl	8001dd0 <vt100_move>
	serial_putchar(' ');
 8001444:	2020      	movs	r0, #32
 8001446:	f7ff fc8d 	bl	8000d64 <serial_putchar>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <scroll_shoot>:

void scroll_shoot(void) {
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0

	for (int i = 0; i < SHOOT_AMOUNT; i++) {
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e19b      	b.n	8001798 <scroll_shoot+0x344>
		if (shoot_list[i].exist == TRUE) {
 8001460:	49b4      	ldr	r1, [pc, #720]	; (8001734 <scroll_shoot+0x2e0>)
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	440b      	add	r3, r1
 800146c:	3304      	adds	r3, #4
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 818e 	bne.w	8001792 <scroll_shoot+0x33e>

			erase_shoot(&shoot_list[i]);
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	4aad      	ldr	r2, [pc, #692]	; (8001734 <scroll_shoot+0x2e0>)
 8001480:	4413      	add	r3, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ffd2 	bl	800142c <erase_shoot>

			if (shoot_list[i]._object == SPACESHIP) {
 8001488:	49aa      	ldr	r1, [pc, #680]	; (8001734 <scroll_shoot+0x2e0>)
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	440b      	add	r3, r1
 8001494:	3301      	adds	r3, #1
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f040 808e 	bne.w	80015ba <scroll_shoot+0x166>
				shoot_list[i].y--;
 800149e:	49a5      	ldr	r1, [pc, #660]	; (8001734 <scroll_shoot+0x2e0>)
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	3303      	adds	r3, #3
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b2d8      	uxtb	r0, r3
 80014b2:	49a0      	ldr	r1, [pc, #640]	; (8001734 <scroll_shoot+0x2e0>)
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	440b      	add	r3, r1
 80014be:	3303      	adds	r3, #3
 80014c0:	4602      	mov	r2, r0
 80014c2:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < (ENNEMY_AMOUNT / 8); j++) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	e073      	b.n	80015b2 <scroll_shoot+0x15e>
					if ((shoot_list[i].x == ennemy_group[lev_num_flag - 1][j].x
 80014ca:	499a      	ldr	r1, [pc, #616]	; (8001734 <scroll_shoot+0x2e0>)
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	3302      	adds	r3, #2
 80014d8:	7818      	ldrb	r0, [r3, #0]
 80014da:	4b97      	ldr	r3, [pc, #604]	; (8001738 <scroll_shoot+0x2e4>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	1e59      	subs	r1, r3, #1
 80014e0:	4c96      	ldr	r4, [pc, #600]	; (800173c <scroll_shoot+0x2e8>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	461a      	mov	r2, r3
 80014e6:	00d2      	lsls	r2, r2, #3
 80014e8:	441a      	add	r2, r3
 80014ea:	460b      	mov	r3, r1
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	015b      	lsls	r3, r3, #5
 80014f2:	4413      	add	r3, r2
 80014f4:	4423      	add	r3, r4
 80014f6:	3306      	adds	r3, #6
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4298      	cmp	r0, r3
 80014fc:	d156      	bne.n	80015ac <scroll_shoot+0x158>
							&& shoot_list[i].y
 80014fe:	498d      	ldr	r1, [pc, #564]	; (8001734 <scroll_shoot+0x2e0>)
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	440b      	add	r3, r1
 800150a:	3303      	adds	r3, #3
 800150c:	7818      	ldrb	r0, [r3, #0]
									== ennemy_group[lev_num_flag - 1][j].y
 800150e:	4b8a      	ldr	r3, [pc, #552]	; (8001738 <scroll_shoot+0x2e4>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	1e59      	subs	r1, r3, #1
 8001514:	4c89      	ldr	r4, [pc, #548]	; (800173c <scroll_shoot+0x2e8>)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	461a      	mov	r2, r3
 800151a:	00d2      	lsls	r2, r2, #3
 800151c:	441a      	add	r2, r3
 800151e:	460b      	mov	r3, r1
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	015b      	lsls	r3, r3, #5
 8001526:	4413      	add	r3, r2
 8001528:	4423      	add	r3, r4
 800152a:	3307      	adds	r3, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
							&& shoot_list[i].y
 800152e:	4298      	cmp	r0, r3
 8001530:	d13c      	bne.n	80015ac <scroll_shoot+0x158>
							&& ennemy_group[lev_num_flag - 1][j].exist == TRUE)) {
 8001532:	4b81      	ldr	r3, [pc, #516]	; (8001738 <scroll_shoot+0x2e4>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	1e59      	subs	r1, r3, #1
 8001538:	4880      	ldr	r0, [pc, #512]	; (800173c <scroll_shoot+0x2e8>)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	461a      	mov	r2, r3
 800153e:	00d2      	lsls	r2, r2, #3
 8001540:	441a      	add	r2, r3
 8001542:	460b      	mov	r3, r1
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	4413      	add	r3, r2
 800154c:	4403      	add	r3, r0
 800154e:	3308      	adds	r3, #8
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d12a      	bne.n	80015ac <scroll_shoot+0x158>

						erase_ennemy(&ennemy_group[lev_num_flag - 1][j]);
 8001556:	4b78      	ldr	r3, [pc, #480]	; (8001738 <scroll_shoot+0x2e4>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	1e59      	subs	r1, r3, #1
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	461a      	mov	r2, r3
 8001560:	00d2      	lsls	r2, r2, #3
 8001562:	441a      	add	r2, r3
 8001564:	460b      	mov	r3, r1
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	015b      	lsls	r3, r3, #5
 800156c:	4413      	add	r3, r2
 800156e:	4a73      	ldr	r2, [pc, #460]	; (800173c <scroll_shoot+0x2e8>)
 8001570:	4413      	add	r3, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f91c 	bl	80017b0 <erase_ennemy>
						ennemy_group[lev_num_flag - 1][j].exist = FALSE;
 8001578:	4b6f      	ldr	r3, [pc, #444]	; (8001738 <scroll_shoot+0x2e4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	1e59      	subs	r1, r3, #1
 800157e:	486f      	ldr	r0, [pc, #444]	; (800173c <scroll_shoot+0x2e8>)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	461a      	mov	r2, r3
 8001584:	00d2      	lsls	r2, r2, #3
 8001586:	441a      	add	r2, r3
 8001588:	460b      	mov	r3, r1
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	015b      	lsls	r3, r3, #5
 8001590:	4413      	add	r3, r2
 8001592:	4403      	add	r3, r0
 8001594:	3308      	adds	r3, #8
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
						shoot_list[i].exist = FALSE;
 800159a:	4966      	ldr	r1, [pc, #408]	; (8001734 <scroll_shoot+0x2e0>)
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	3304      	adds	r3, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < (ENNEMY_AMOUNT / 8); j++) {
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	3301      	adds	r3, #1
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	dd88      	ble.n	80014ca <scroll_shoot+0x76>
 80015b8:	e012      	b.n	80015e0 <scroll_shoot+0x18c>
					}
				}

			} else {
				shoot_list[i].y++;
 80015ba:	495e      	ldr	r1, [pc, #376]	; (8001734 <scroll_shoot+0x2e0>)
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	3303      	adds	r3, #3
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	b2d8      	uxtb	r0, r3
 80015ce:	4959      	ldr	r1, [pc, #356]	; (8001734 <scroll_shoot+0x2e0>)
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	440b      	add	r3, r1
 80015da:	3303      	adds	r3, #3
 80015dc:	4602      	mov	r2, r0
 80015de:	701a      	strb	r2, [r3, #0]
			}

			for (int j = 0; j < SHIELD_AMOUNT; j++) { //collision handling between a shoot and a shield
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e08e      	b.n	8001704 <scroll_shoot+0x2b0>
				for (int k = 0; k < SHIELD_HEIGHT; k++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	e084      	b.n	80016f6 <scroll_shoot+0x2a2>
					for (int l = 0; l < SHIELD_WIDTH; l++) {
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	e07b      	b.n	80016ea <scroll_shoot+0x296>
						if (shield_group[j][k][l].x == shoot_list[i].x
 80015f2:	4c53      	ldr	r4, [pc, #332]	; (8001740 <scroll_shoot+0x2ec>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68b9      	ldr	r1, [r7, #8]
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	461a      	mov	r2, r3
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	441a      	add	r2, r3
 8001600:	460b      	mov	r3, r1
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	00d9      	lsls	r1, r3, #3
 8001608:	1ac9      	subs	r1, r1, r3
 800160a:	440a      	add	r2, r1
 800160c:	238c      	movs	r3, #140	; 0x8c
 800160e:	fb03 f300 	mul.w	r3, r3, r0
 8001612:	4413      	add	r3, r2
 8001614:	4423      	add	r3, r4
 8001616:	3302      	adds	r3, #2
 8001618:	7819      	ldrb	r1, [r3, #0]
 800161a:	4846      	ldr	r0, [pc, #280]	; (8001734 <scroll_shoot+0x2e0>)
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	4403      	add	r3, r0
 8001626:	3302      	adds	r3, #2
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	4299      	cmp	r1, r3
 800162c:	d15a      	bne.n	80016e4 <scroll_shoot+0x290>
								&& shield_group[j][k][l].y == shoot_list[i].y
 800162e:	4c44      	ldr	r4, [pc, #272]	; (8001740 <scroll_shoot+0x2ec>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68b9      	ldr	r1, [r7, #8]
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	461a      	mov	r2, r3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	441a      	add	r2, r3
 800163c:	460b      	mov	r3, r1
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	00d9      	lsls	r1, r3, #3
 8001644:	1ac9      	subs	r1, r1, r3
 8001646:	440a      	add	r2, r1
 8001648:	238c      	movs	r3, #140	; 0x8c
 800164a:	fb03 f300 	mul.w	r3, r3, r0
 800164e:	4413      	add	r3, r2
 8001650:	4423      	add	r3, r4
 8001652:	3303      	adds	r3, #3
 8001654:	7819      	ldrb	r1, [r3, #0]
 8001656:	4837      	ldr	r0, [pc, #220]	; (8001734 <scroll_shoot+0x2e0>)
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	4403      	add	r3, r0
 8001662:	3303      	adds	r3, #3
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	4299      	cmp	r1, r3
 8001668:	d13c      	bne.n	80016e4 <scroll_shoot+0x290>
								&& shield_group[j][k][l].exist == TRUE) {
 800166a:	4c35      	ldr	r4, [pc, #212]	; (8001740 <scroll_shoot+0x2ec>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	461a      	mov	r2, r3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	441a      	add	r2, r3
 8001678:	460b      	mov	r3, r1
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	00d9      	lsls	r1, r3, #3
 8001680:	1ac9      	subs	r1, r1, r3
 8001682:	440a      	add	r2, r1
 8001684:	238c      	movs	r3, #140	; 0x8c
 8001686:	fb03 f300 	mul.w	r3, r3, r0
 800168a:	4413      	add	r3, r2
 800168c:	4423      	add	r3, r4
 800168e:	3304      	adds	r3, #4
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d126      	bne.n	80016e4 <scroll_shoot+0x290>
							shield_group[j][k][l].exist = FALSE;
 8001696:	4c2a      	ldr	r4, [pc, #168]	; (8001740 <scroll_shoot+0x2ec>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	461a      	mov	r2, r3
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	441a      	add	r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	00d9      	lsls	r1, r3, #3
 80016ac:	1ac9      	subs	r1, r1, r3
 80016ae:	440a      	add	r2, r1
 80016b0:	238c      	movs	r3, #140	; 0x8c
 80016b2:	fb03 f300 	mul.w	r3, r3, r0
 80016b6:	4413      	add	r3, r2
 80016b8:	4423      	add	r3, r4
 80016ba:	3304      	adds	r3, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
							shoot_list[i].exist = FALSE;
 80016c0:	491c      	ldr	r1, [pc, #112]	; (8001734 <scroll_shoot+0x2e0>)
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	3304      	adds	r3, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
							erase_shoot(&shoot_list[i]);
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <scroll_shoot+0x2e0>)
 80016dc:	4413      	add	r3, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fea4 	bl	800142c <erase_shoot>
					for (int l = 0; l < SHIELD_WIDTH; l++) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3301      	adds	r3, #1
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	dd80      	ble.n	80015f2 <scroll_shoot+0x19e>
				for (int k = 0; k < SHIELD_HEIGHT; k++) {
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3301      	adds	r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	f77f af77 	ble.w	80015ec <scroll_shoot+0x198>
			for (int j = 0; j < SHIELD_AMOUNT; j++) { //collision handling between a shoot and a shield
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b02      	cmp	r3, #2
 8001708:	f77f af6d 	ble.w	80015e6 <scroll_shoot+0x192>
						}
					}
				}
			}

			if (shoot_list[i].y >= VT100_SCREEN_YMAX) {
 800170c:	4909      	ldr	r1, [pc, #36]	; (8001734 <scroll_shoot+0x2e0>)
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	440b      	add	r3, r1
 8001718:	3303      	adds	r3, #3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b17      	cmp	r3, #23
 800171e:	d911      	bls.n	8001744 <scroll_shoot+0x2f0>
				shoot_list[i].exist = FALSE;
 8001720:	4904      	ldr	r1, [pc, #16]	; (8001734 <scroll_shoot+0x2e0>)
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	440b      	add	r3, r1
 800172c:	3304      	adds	r3, #4
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	e02e      	b.n	8001792 <scroll_shoot+0x33e>
 8001734:	200000cc 	.word	0x200000cc
 8001738:	200000c7 	.word	0x200000c7
 800173c:	20000124 	.word	0x20000124
 8001740:	2000048c 	.word	0x2000048c
			} else if (shoot_list[i].exist == FALSE) {
 8001744:	4919      	ldr	r1, [pc, #100]	; (80017ac <scroll_shoot+0x358>)
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	440b      	add	r3, r1
 8001750:	3304      	adds	r3, #4
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d024      	beq.n	80017a2 <scroll_shoot+0x34e>
				return;
			} else {
				vt100_move(shoot_list[i].x, shoot_list[i].y);
 8001758:	4914      	ldr	r1, [pc, #80]	; (80017ac <scroll_shoot+0x358>)
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	440b      	add	r3, r1
 8001764:	3302      	adds	r3, #2
 8001766:	7818      	ldrb	r0, [r3, #0]
 8001768:	4910      	ldr	r1, [pc, #64]	; (80017ac <scroll_shoot+0x358>)
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	440b      	add	r3, r1
 8001774:	3303      	adds	r3, #3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f000 fb29 	bl	8001dd0 <vt100_move>
				serial_putchar(shoot_list[i].appearance);
 800177e:	490b      	ldr	r1, [pc, #44]	; (80017ac <scroll_shoot+0x358>)
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	440b      	add	r3, r1
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fae9 	bl	8000d64 <serial_putchar>
	for (int i = 0; i < SHOOT_AMOUNT; i++) {
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b09      	cmp	r3, #9
 800179c:	f77f ae60 	ble.w	8001460 <scroll_shoot+0xc>
 80017a0:	e000      	b.n	80017a4 <scroll_shoot+0x350>
				return;
 80017a2:	bf00      	nop
			}
		}
	}
}
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd90      	pop	{r4, r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200000cc 	.word	0x200000cc

080017b0 <erase_ennemy>:
 serial_putchar(_ennemy->appearance[i]);
 }
 }
 */

void erase_ennemy(ennemy *_ennemy) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < ENNEMY_WIDTH; i++) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e00d      	b.n	80017da <erase_ennemy+0x2a>
		vt100_move(_ennemy->x, _ennemy->y);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	799a      	ldrb	r2, [r3, #6]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	79db      	ldrb	r3, [r3, #7]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f000 fb01 	bl	8001dd0 <vt100_move>
		serial_putchar(' ');
 80017ce:	2020      	movs	r0, #32
 80017d0:	f7ff fac8 	bl	8000d64 <serial_putchar>
	for (int i = 0; i < ENNEMY_WIDTH; i++) {
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3301      	adds	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	ddee      	ble.n	80017be <erase_ennemy+0xe>
	}
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <init_shield>:

void scroll_ennemies(void) {

}

void init_shield(uint8_t x, uint8_t y) {
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	460a      	mov	r2, r1
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	4613      	mov	r3, r2
 80017f6:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < SHIELD_HEIGHT; i++) {
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e08c      	b.n	8001918 <init_shield+0x130>
		for (int j = 0; j < SHIELD_WIDTH; j++) {
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	e082      	b.n	800190a <init_shield+0x122>
			shield_group[shield_index][i][j] = shield[i][j];
 8001804:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <init_shield+0x14c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461c      	mov	r4, r3
 800180a:	484b      	ldr	r0, [pc, #300]	; (8001938 <init_shield+0x150>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	68f9      	ldr	r1, [r7, #12]
 8001810:	461a      	mov	r2, r3
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	441a      	add	r2, r3
 8001816:	460b      	mov	r3, r1
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	00d9      	lsls	r1, r3, #3
 800181e:	1ac9      	subs	r1, r1, r3
 8001820:	440a      	add	r2, r1
 8001822:	238c      	movs	r3, #140	; 0x8c
 8001824:	fb03 f304 	mul.w	r3, r3, r4
 8001828:	4413      	add	r3, r2
 800182a:	18c4      	adds	r4, r0, r3
 800182c:	4843      	ldr	r0, [pc, #268]	; (800193c <init_shield+0x154>)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	68f9      	ldr	r1, [r7, #12]
 8001832:	461a      	mov	r2, r3
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	441a      	add	r2, r3
 8001838:	460b      	mov	r3, r1
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	00d9      	lsls	r1, r3, #3
 8001840:	1ac9      	subs	r1, r1, r3
 8001842:	1853      	adds	r3, r2, r1
 8001844:	18c2      	adds	r2, r0, r3
 8001846:	4623      	mov	r3, r4
 8001848:	6811      	ldr	r1, [r2, #0]
 800184a:	6019      	str	r1, [r3, #0]
 800184c:	7912      	ldrb	r2, [r2, #4]
 800184e:	711a      	strb	r2, [r3, #4]
			vt100_move(x + j - (SHIELD_WIDTH / 2), y + i);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	4413      	add	r3, r2
 8001858:	b2db      	uxtb	r3, r3
 800185a:	3b03      	subs	r3, #3
 800185c:	b2d8      	uxtb	r0, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	79bb      	ldrb	r3, [r7, #6]
 8001864:	4413      	add	r3, r2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4619      	mov	r1, r3
 800186a:	f000 fab1 	bl	8001dd0 <vt100_move>
			serial_putchar(shield[i][j].appearance);
 800186e:	4833      	ldr	r0, [pc, #204]	; (800193c <init_shield+0x154>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	68f9      	ldr	r1, [r7, #12]
 8001874:	461a      	mov	r2, r3
 8001876:	0092      	lsls	r2, r2, #2
 8001878:	441a      	add	r2, r3
 800187a:	460b      	mov	r3, r1
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	00d9      	lsls	r1, r3, #3
 8001882:	1ac9      	subs	r1, r1, r3
 8001884:	1853      	adds	r3, r2, r1
 8001886:	4403      	add	r3, r0
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fa6a 	bl	8000d64 <serial_putchar>
			shield_group[shield_index][i][j].x = x + j - (SHIELD_WIDTH / 2); // put on each hitbox their coordinates
 8001890:	4b28      	ldr	r3, [pc, #160]	; (8001934 <init_shield+0x14c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461d      	mov	r5, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4413      	add	r3, r2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3b03      	subs	r3, #3
 80018a2:	b2dc      	uxtb	r4, r3
 80018a4:	4824      	ldr	r0, [pc, #144]	; (8001938 <init_shield+0x150>)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	68f9      	ldr	r1, [r7, #12]
 80018aa:	461a      	mov	r2, r3
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	441a      	add	r2, r3
 80018b0:	460b      	mov	r3, r1
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	00d9      	lsls	r1, r3, #3
 80018b8:	1ac9      	subs	r1, r1, r3
 80018ba:	440a      	add	r2, r1
 80018bc:	238c      	movs	r3, #140	; 0x8c
 80018be:	fb03 f305 	mul.w	r3, r3, r5
 80018c2:	4413      	add	r3, r2
 80018c4:	4403      	add	r3, r0
 80018c6:	3302      	adds	r3, #2
 80018c8:	4622      	mov	r2, r4
 80018ca:	701a      	strb	r2, [r3, #0]
			shield_group[shield_index][i][j].y = y + i;
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <init_shield+0x14c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461d      	mov	r5, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	79bb      	ldrb	r3, [r7, #6]
 80018d8:	4413      	add	r3, r2
 80018da:	b2dc      	uxtb	r4, r3
 80018dc:	4816      	ldr	r0, [pc, #88]	; (8001938 <init_shield+0x150>)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	461a      	mov	r2, r3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	441a      	add	r2, r3
 80018e8:	460b      	mov	r3, r1
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	00d9      	lsls	r1, r3, #3
 80018f0:	1ac9      	subs	r1, r1, r3
 80018f2:	440a      	add	r2, r1
 80018f4:	238c      	movs	r3, #140	; 0x8c
 80018f6:	fb03 f305 	mul.w	r3, r3, r5
 80018fa:	4413      	add	r3, r2
 80018fc:	4403      	add	r3, r0
 80018fe:	3303      	adds	r3, #3
 8001900:	4622      	mov	r2, r4
 8001902:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < SHIELD_WIDTH; j++) {
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	3301      	adds	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b06      	cmp	r3, #6
 800190e:	f77f af79 	ble.w	8001804 <init_shield+0x1c>
	for (int i = 0; i < SHIELD_HEIGHT; i++) {
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b03      	cmp	r3, #3
 800191c:	f77f af6f 	ble.w	80017fe <init_shield+0x16>
		}
	}
	shield_index++;
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <init_shield+0x14c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b02      	ldr	r3, [pc, #8]	; (8001934 <init_shield+0x14c>)
 800192a:	701a      	strb	r2, [r3, #0]
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bdb0      	pop	{r4, r5, r7, pc}
 8001934:	200000c8 	.word	0x200000c8
 8001938:	2000048c 	.word	0x2000048c
 800193c:	2000063c 	.word	0x2000063c

08001940 <charge_level>:

void charge_level(level_num level) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
	shield_index = 0;
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <charge_level+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
	switch (level) {
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d816      	bhi.n	8001984 <charge_level+0x44>
 8001956:	a201      	add	r2, pc, #4	; (adr r2, 800195c <charge_level+0x1c>)
 8001958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195c:	0800196d 	.word	0x0800196d
 8001960:	08001973 	.word	0x08001973
 8001964:	08001979 	.word	0x08001979
 8001968:	0800197f 	.word	0x0800197f
	case MENU:
		init_menu();
 800196c:	f000 f864 	bl	8001a38 <init_menu>
		break;
 8001970:	e008      	b.n	8001984 <charge_level+0x44>
	case LEVEL_1:
		init_level_1();
 8001972:	f000 f89b 	bl	8001aac <init_level_1>
		break;
 8001976:	e005      	b.n	8001984 <charge_level+0x44>
	case LEVEL_2:
		init_level_2();
 8001978:	f000 f8de 	bl	8001b38 <init_level_2>
		break;
 800197c:	e002      	b.n	8001984 <charge_level+0x44>
	case LEVEL_3:
		init_level_3();
 800197e:	f000 f8f5 	bl	8001b6c <init_level_3>
		break;
 8001982:	bf00      	nop
	}
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200000c8 	.word	0x200000c8

08001990 <toggle_pause>:

void toggle_pause(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0

	if (keyboard_flags & KFPAUS) {
 8001996:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <toggle_pause+0x9c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d01e      	beq.n	80019e0 <toggle_pause+0x50>
		keyboard_flags &= ~KFPAUS;
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <toggle_pause+0x9c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <toggle_pause+0x9c>)
 80019ae:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < pause_max; i++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	e00d      	b.n	80019d2 <toggle_pause+0x42>
			vt100_move(VT100_SCREEN_XMAX / 2 - 2 + i, VT100_SCREEN_YMAX / 2);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3326      	adds	r3, #38	; 0x26
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	210c      	movs	r1, #12
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fa05 	bl	8001dd0 <vt100_move>
			serial_putchar(' ');
 80019c6:	2020      	movs	r0, #32
 80019c8:	f7ff f9cc 	bl	8000d64 <serial_putchar>
		for (int i = 0; i < pause_max; i++) {
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3301      	adds	r3, #1
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <toggle_pause+0xa0>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dceb      	bgt.n	80019b6 <toggle_pause+0x26>
		for (int i = 0; i < pause_max; i++) {
			vt100_move(VT100_SCREEN_XMAX / 2 - 2 + i, VT100_SCREEN_YMAX / 2);
			serial_putchar(pause_message[i]);
		}
	}
}
 80019de:	e021      	b.n	8001a24 <toggle_pause+0x94>
		keyboard_flags |= KFPAUS;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <toggle_pause+0x9c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <toggle_pause+0x9c>)
 80019ec:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < pause_max; i++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	e011      	b.n	8001a18 <toggle_pause+0x88>
			vt100_move(VT100_SCREEN_XMAX / 2 - 2 + i, VT100_SCREEN_YMAX / 2);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3326      	adds	r3, #38	; 0x26
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	210c      	movs	r1, #12
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f9e6 	bl	8001dd0 <vt100_move>
			serial_putchar(pause_message[i]);
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <toggle_pause+0xa4>)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f9a9 	bl	8000d64 <serial_putchar>
		for (int i = 0; i < pause_max; i++) {
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <toggle_pause+0xa0>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dce7      	bgt.n	80019f4 <toggle_pause+0x64>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200000c6 	.word	0x200000c6
 8001a30:	20000021 	.word	0x20000021
 8001a34:	08001f98 	.word	0x08001f98

08001a38 <init_menu>:

void init_menu(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0

	lev_num_flag = MENU;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <init_menu+0x6c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 2; i++) {
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	e024      	b.n	8001a94 <init_menu+0x5c>
		for (int j = 0; j < 14; j++) {
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	e01b      	b.n	8001a88 <init_menu+0x50>
			vt100_move(j + VT100_SCREEN_XMAX / 4, i + 10);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	3314      	adds	r3, #20
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	330a      	adds	r3, #10
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f000 f9b4 	bl	8001dd0 <vt100_move>
			serial_putchar(menu_message[i][j]);
 8001a68:	490f      	ldr	r1, [pc, #60]	; (8001aa8 <init_menu+0x70>)
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	18ca      	adds	r2, r1, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff f971 	bl	8000d64 <serial_putchar>
		for (int j = 0; j < 14; j++) {
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b0d      	cmp	r3, #13
 8001a8c:	dde0      	ble.n	8001a50 <init_menu+0x18>
	for (int i = 0; i < 2; i++) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3301      	adds	r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	ddd7      	ble.n	8001a4a <init_menu+0x12>
		}
	}

}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200000c7 	.word	0x200000c7
 8001aa8:	08001fa0 	.word	0x08001fa0

08001aac <init_level_1>:

void init_level_1(void) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0

	lev_num_flag = LEVEL_1;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <init_level_1+0x84>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]

	vt100_clear_screen();
 8001ab8:	f000 fa06 	bl	8001ec8 <vt100_clear_screen>

	init_shield(10, 19);
 8001abc:	2113      	movs	r1, #19
 8001abe:	200a      	movs	r0, #10
 8001ac0:	f7ff fe92 	bl	80017e8 <init_shield>
	init_shield(40, 19);
 8001ac4:	2113      	movs	r1, #19
 8001ac6:	2028      	movs	r0, #40	; 0x28
 8001ac8:	f7ff fe8e 	bl	80017e8 <init_shield>
	init_shield(70, 19);
 8001acc:	2113      	movs	r1, #19
 8001ace:	2046      	movs	r0, #70	; 0x46
 8001ad0:	f7ff fe8a 	bl	80017e8 <init_shield>

	for (int j = 0; j < ENNEMY_WIDTH; j++) {
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	e021      	b.n	8001b1e <init_level_1+0x72>
		vt100_move(ennemy_group[0][j].x + j, ennemy_group[0][0].y);
 8001ada:	4916      	ldr	r1, [pc, #88]	; (8001b34 <init_level_1+0x88>)
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3306      	adds	r3, #6
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <init_level_1+0x88>)
 8001af4:	79db      	ldrb	r3, [r3, #7]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4610      	mov	r0, r2
 8001afa:	f000 f969 	bl	8001dd0 <vt100_move>
		serial_putchar(ennemy_group[0][j].appearance[j]);
 8001afe:	490d      	ldr	r1, [pc, #52]	; (8001b34 <init_level_1+0x88>)
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	18ca      	adds	r2, r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3303      	adds	r3, #3
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f926 	bl	8000d64 <serial_putchar>
	for (int j = 0; j < ENNEMY_WIDTH; j++) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	ddda      	ble.n	8001ada <init_level_1+0x2e>

	 for (int i = 0; i < ENNEMY_WIDTH * 8; i += ENNEMY_WIDTH) {
	 init_ennemy(&ennemy_2, i + 30, 4);
	 }
	 */
	init_spaceship();
 8001b24:	f7ff fb54 	bl	80011d0 <init_spaceship>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200000c7 	.word	0x200000c7
 8001b34:	20000124 	.word	0x20000124

08001b38 <init_level_2>:

void init_level_2(void) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

	lev_num_flag = LEVEL_2;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <init_level_2+0x30>)
 8001b3e:	2202      	movs	r2, #2
 8001b40:	701a      	strb	r2, [r3, #0]

	vt100_clear_screen();
 8001b42:	f000 f9c1 	bl	8001ec8 <vt100_clear_screen>

	init_shield(10, 19);
 8001b46:	2113      	movs	r1, #19
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f7ff fe4d 	bl	80017e8 <init_shield>
	init_shield(40, 19);
 8001b4e:	2113      	movs	r1, #19
 8001b50:	2028      	movs	r0, #40	; 0x28
 8001b52:	f7ff fe49 	bl	80017e8 <init_shield>
	init_shield(70, 19);
 8001b56:	2113      	movs	r1, #19
 8001b58:	2046      	movs	r0, #70	; 0x46
 8001b5a:	f7ff fe45 	bl	80017e8 <init_shield>

	init_spaceship();
 8001b5e:	f7ff fb37 	bl	80011d0 <init_spaceship>
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200000c7 	.word	0x200000c7

08001b6c <init_level_3>:

void init_level_3(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

	lev_num_flag = LEVEL_3;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <init_level_3+0x30>)
 8001b72:	2203      	movs	r2, #3
 8001b74:	701a      	strb	r2, [r3, #0]

	vt100_clear_screen();
 8001b76:	f000 f9a7 	bl	8001ec8 <vt100_clear_screen>

	init_shield(10, 19);
 8001b7a:	2113      	movs	r1, #19
 8001b7c:	200a      	movs	r0, #10
 8001b7e:	f7ff fe33 	bl	80017e8 <init_shield>
	init_shield(40, 19);
 8001b82:	2113      	movs	r1, #19
 8001b84:	2028      	movs	r0, #40	; 0x28
 8001b86:	f7ff fe2f 	bl	80017e8 <init_shield>
	init_shield(70, 19);
 8001b8a:	2113      	movs	r1, #19
 8001b8c:	2046      	movs	r0, #70	; 0x46
 8001b8e:	f7ff fe2b 	bl	80017e8 <init_shield>

	init_spaceship();
 8001b92:	f7ff fb1d 	bl	80011d0 <init_spaceship>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200000c7 	.word	0x200000c7

08001ba0 <TIM2_IRQHandler>:

#define tim2_irq TIM2_IRQHandler

void tim2_irq(void) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
	//scroll_shoot();
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <TIM3_IRQHandler>:

#define tim3_irq TIM3_IRQHandler

void tim3_irq(void) {
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bc2:	e003      	b.n	8001bcc <LoopCopyDataInit>

08001bc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bca:	3104      	adds	r1, #4

08001bcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bcc:	480b      	ldr	r0, [pc, #44]	; (8001bfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bd4:	d3f6      	bcc.n	8001bc4 <CopyDataInit>
  ldr  r2, =_sbss
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bd8:	e002      	b.n	8001be0 <LoopFillZerobss>

08001bda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bdc:	f842 3b04 	str.w	r3, [r2], #4

08001be0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001be2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001be4:	d3f9      	bcc.n	8001bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001be6:	f000 f841 	bl	8001c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f000 f98f 	bl	8001f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bee:	f7ff f84c 	bl	8000c8a <main>
  bx  lr    
 8001bf2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bf4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bf8:	08001fc4 	.word	0x08001fc4
  ldr  r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c00:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8001c04:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8001c08:	200006dc 	.word	0x200006dc

08001c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC_IRQHandler>

08001c0e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <HardFault_Handler+0x4>

08001c22 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <MemManage_Handler+0x4>

08001c28 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <BusFault_Handler+0x4>

08001c2e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <UsageFault_Handler+0x4>

08001c34 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c70:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <SystemInit+0x60>)
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <SystemInit+0x60>)
 8001c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c80:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <SystemInit+0x64>)
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <SystemInit+0x64>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <SystemInit+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <SystemInit+0x64>)
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <SystemInit+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <SystemInit+0x64>)
 8001ca4:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <SystemInit+0x68>)
 8001ca6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ca8:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <SystemInit+0x64>)
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <SystemInit+0x64>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <SystemInit+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001cba:	f000 f80d 	bl	8001cd8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cbe:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <SystemInit+0x60>)
 8001cc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cc4:	609a      	str	r2, [r3, #8]
#endif
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	24003010 	.word	0x24003010

08001cd8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	603b      	str	r3, [r7, #0]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001ce6:	4a36      	ldr	r2, [pc, #216]	; (8001dc0 <SetSysClock+0xe8>)
 8001ce8:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <SetSysClock+0xe8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001cf2:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <SetSysClock+0xe8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d103      	bne.n	8001d10 <SetSysClock+0x38>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001d0e:	d1f0      	bne.n	8001cf2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <SetSysClock+0xe8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	e001      	b.n	8001d26 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d142      	bne.n	8001db2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001d2c:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <SetSysClock+0xe8>)
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <SetSysClock+0xe8>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;
 8001d38:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <SetSysClock+0xec>)
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <SetSysClock+0xec>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d42:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <SetSysClock+0xe8>)
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <SetSysClock+0xe8>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <SetSysClock+0xe8>)
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <SetSysClock+0xe8>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d56:	6093      	str	r3, [r2, #8]

    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <SetSysClock+0xe8>)
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <SetSysClock+0xe8>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001d62:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <SetSysClock+0xe8>)
 8001d66:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <SetSysClock+0xf0>)
 8001d68:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001d6a:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <SetSysClock+0xe8>)
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <SetSysClock+0xe8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d74:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001d76:	bf00      	nop
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <SetSysClock+0xe8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f9      	beq.n	8001d78 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <SetSysClock+0xf4>)
 8001d86:	f240 6205 	movw	r2, #1541	; 0x605
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <SetSysClock+0xe8>)
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <SetSysClock+0xe8>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 0303 	bic.w	r3, r3, #3
 8001d96:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001d98:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <SetSysClock+0xe8>)
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <SetSysClock+0xe8>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
		while ((RCC->CFGR & (uint32_t) RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 8001da4:	bf00      	nop
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <SetSysClock+0xe8>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d1f9      	bne.n	8001da6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	07405408 	.word	0x07405408
 8001dcc:	40023c00 	.word	0x40023c00

08001dd0 <vt100_move>:
#include "vt100.h"
#include "serial.h"

void vt100_move(uint8_t x, uint8_t y)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	460a      	mov	r2, r1
 8001dda:	71fb      	strb	r3, [r7, #7]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	71bb      	strb	r3, [r7, #6]
	serial_putchar(VT100_ESC);
 8001de0:	201b      	movs	r0, #27
 8001de2:	f7fe ffbf 	bl	8000d64 <serial_putchar>
	serial_putchar('[');
 8001de6:	205b      	movs	r0, #91	; 0x5b
 8001de8:	f7fe ffbc 	bl	8000d64 <serial_putchar>
	serial_putchar('0' + (y / 100));
 8001dec:	79bb      	ldrb	r3, [r7, #6]
 8001dee:	4a34      	ldr	r2, [pc, #208]	; (8001ec0 <vt100_move+0xf0>)
 8001df0:	fba2 2303 	umull	r2, r3, r2, r3
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3330      	adds	r3, #48	; 0x30
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe ffb1 	bl	8000d64 <serial_putchar>
	serial_putchar('0' + ((y / 10) % 10));
 8001e02:	79bb      	ldrb	r3, [r7, #6]
 8001e04:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <vt100_move+0xf4>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	08db      	lsrs	r3, r3, #3
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <vt100_move+0xf4>)
 8001e10:	fba3 1302 	umull	r1, r3, r3, r2
 8001e14:	08d9      	lsrs	r1, r3, #3
 8001e16:	460b      	mov	r3, r1
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	3330      	adds	r3, #48	; 0x30
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe ff9c 	bl	8000d64 <serial_putchar>
	serial_putchar('0' + (y % 10));
 8001e2c:	79ba      	ldrb	r2, [r7, #6]
 8001e2e:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <vt100_move+0xf4>)
 8001e30:	fba3 1302 	umull	r1, r3, r3, r2
 8001e34:	08d9      	lsrs	r1, r3, #3
 8001e36:	460b      	mov	r3, r1
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	3330      	adds	r3, #48	; 0x30
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe ff8c 	bl	8000d64 <serial_putchar>
	serial_putchar(';');
 8001e4c:	203b      	movs	r0, #59	; 0x3b
 8001e4e:	f7fe ff89 	bl	8000d64 <serial_putchar>
	serial_putchar('0' + (x / 100));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <vt100_move+0xf0>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	3330      	adds	r3, #48	; 0x30
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe ff7e 	bl	8000d64 <serial_putchar>
	serial_putchar('0' + ((x / 10) % 10));
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <vt100_move+0xf4>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	08db      	lsrs	r3, r3, #3
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <vt100_move+0xf4>)
 8001e76:	fba3 1302 	umull	r1, r3, r3, r2
 8001e7a:	08d9      	lsrs	r1, r3, #3
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3330      	adds	r3, #48	; 0x30
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe ff69 	bl	8000d64 <serial_putchar>
	serial_putchar('0' + (x % 10));
 8001e92:	79fa      	ldrb	r2, [r7, #7]
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <vt100_move+0xf4>)
 8001e96:	fba3 1302 	umull	r1, r3, r3, r2
 8001e9a:	08d9      	lsrs	r1, r3, #3
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	3330      	adds	r3, #48	; 0x30
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe ff59 	bl	8000d64 <serial_putchar>
	serial_putchar('H');
 8001eb2:	2048      	movs	r0, #72	; 0x48
 8001eb4:	f7fe ff56 	bl	8000d64 <serial_putchar>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	51eb851f 	.word	0x51eb851f
 8001ec4:	cccccccd 	.word	0xcccccccd

08001ec8 <vt100_clear_screen>:

void vt100_clear_screen(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	serial_putchar(VT100_ESC);
 8001ecc:	201b      	movs	r0, #27
 8001ece:	f7fe ff49 	bl	8000d64 <serial_putchar>
	serial_putchar('[');
 8001ed2:	205b      	movs	r0, #91	; 0x5b
 8001ed4:	f7fe ff46 	bl	8000d64 <serial_putchar>
	serial_putchar('2');
 8001ed8:	2032      	movs	r0, #50	; 0x32
 8001eda:	f7fe ff43 	bl	8000d64 <serial_putchar>
	serial_putchar('J');
 8001ede:	204a      	movs	r0, #74	; 0x4a
 8001ee0:	f7fe ff40 	bl	8000d64 <serial_putchar>
	serial_putchar(VT100_ESC);
 8001ee4:	201b      	movs	r0, #27
 8001ee6:	f7fe ff3d 	bl	8000d64 <serial_putchar>
	serial_putchar('[');
 8001eea:	205b      	movs	r0, #91	; 0x5b
 8001eec:	f7fe ff3a 	bl	8000d64 <serial_putchar>
	serial_putchar('?');
 8001ef0:	203f      	movs	r0, #63	; 0x3f
 8001ef2:	f7fe ff37 	bl	8000d64 <serial_putchar>
	serial_putchar('2');
 8001ef6:	2032      	movs	r0, #50	; 0x32
 8001ef8:	f7fe ff34 	bl	8000d64 <serial_putchar>
	serial_putchar('5');
 8001efc:	2035      	movs	r0, #53	; 0x35
 8001efe:	f7fe ff31 	bl	8000d64 <serial_putchar>
	serial_putchar('l');
 8001f02:	206c      	movs	r0, #108	; 0x6c
 8001f04:	f7fe ff2e 	bl	8000d64 <serial_putchar>
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <__libc_init_array>:
 8001f0c:	b570      	push	{r4, r5, r6, lr}
 8001f0e:	4e0d      	ldr	r6, [pc, #52]	; (8001f44 <__libc_init_array+0x38>)
 8001f10:	4c0d      	ldr	r4, [pc, #52]	; (8001f48 <__libc_init_array+0x3c>)
 8001f12:	1ba4      	subs	r4, r4, r6
 8001f14:	10a4      	asrs	r4, r4, #2
 8001f16:	2500      	movs	r5, #0
 8001f18:	42a5      	cmp	r5, r4
 8001f1a:	d109      	bne.n	8001f30 <__libc_init_array+0x24>
 8001f1c:	4e0b      	ldr	r6, [pc, #44]	; (8001f4c <__libc_init_array+0x40>)
 8001f1e:	4c0c      	ldr	r4, [pc, #48]	; (8001f50 <__libc_init_array+0x44>)
 8001f20:	f000 f818 	bl	8001f54 <_init>
 8001f24:	1ba4      	subs	r4, r4, r6
 8001f26:	10a4      	asrs	r4, r4, #2
 8001f28:	2500      	movs	r5, #0
 8001f2a:	42a5      	cmp	r5, r4
 8001f2c:	d105      	bne.n	8001f3a <__libc_init_array+0x2e>
 8001f2e:	bd70      	pop	{r4, r5, r6, pc}
 8001f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f34:	4798      	blx	r3
 8001f36:	3501      	adds	r5, #1
 8001f38:	e7ee      	b.n	8001f18 <__libc_init_array+0xc>
 8001f3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f3e:	4798      	blx	r3
 8001f40:	3501      	adds	r5, #1
 8001f42:	e7f2      	b.n	8001f2a <__libc_init_array+0x1e>
 8001f44:	08001fbc 	.word	0x08001fbc
 8001f48:	08001fbc 	.word	0x08001fbc
 8001f4c:	08001fbc 	.word	0x08001fbc
 8001f50:	08001fc0 	.word	0x08001fc0

08001f54 <_init>:
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	bf00      	nop
 8001f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f5a:	bc08      	pop	{r3}
 8001f5c:	469e      	mov	lr, r3
 8001f5e:	4770      	bx	lr

08001f60 <_fini>:
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f62:	bf00      	nop
 8001f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f66:	bc08      	pop	{r3}
 8001f68:	469e      	mov	lr, r3
 8001f6a:	4770      	bx	lr
